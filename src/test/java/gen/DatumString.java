// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class DatumString {
    Logger logger = LoggerFactory.getLogger(DatumString.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // datum/string.yaml #1
            /* 'str' */
            String expected_ = "str";
            /* r.expr('str') */
            System.out.println("About to run #1: r.expr('str')");
            Object obtained = runOrCatch(r.expr("str"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #2
            /* "str" */
            String expected_ = "str";
            /* r.expr("str") */
            System.out.println("About to run #2: r.expr('str')");
            Object obtained = runOrCatch(r.expr("str"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #3
            /* 'str' */
            String expected_ = "str";
            /* r.expr(u'str') */
            System.out.println("About to run #3: r.expr('str')");
            Object obtained = runOrCatch(r.expr("str"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #4
            /* 'こんにちは' */
            String expected_ = "こんにちは";
            /* r.expr(u'こんにちは') */
            System.out.println("About to run #4: r.expr('こんにちは')");
            Object obtained = runOrCatch(r.expr("こんにちは"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #5
            /* 'STRING' */
            String expected_ = "STRING";
            /* r.expr('foo').type_of() */
            System.out.println("About to run #5: r.expr('foo').typeOf()");
            Object obtained = runOrCatch(r.expr("foo").typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #6
            /* ('foo') */
            String expected_ = "foo";
            /* r.expr('foo').coerce_to('string') */
            System.out.println("About to run #6: r.expr('foo').coerceTo('string')");
            Object obtained = runOrCatch(r.expr("foo").coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #7
            /* -1.2 */
            Double expected_ = -1.2;
            /* r.expr('-1.2').coerce_to('NUMBER') */
            System.out.println("About to run #7: r.expr('-1.2').coerceTo('NUMBER')");
            Object obtained = runOrCatch(r.expr("-1.2").coerceTo("NUMBER"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #8
            /* err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", r.array());
            /* r.expr('--1.2').coerce_to('NUMBER') */
            System.out.println("About to run #8: r.expr('--1.2').coerceTo('NUMBER')");
            Object obtained = runOrCatch(r.expr("--1.2").coerceTo("NUMBER"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #9
            /* err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", r.array());
            /* r.expr('-1.2-').coerce_to('NUMBER') */
            System.out.println("About to run #9: r.expr('-1.2-').coerceTo('NUMBER')");
            Object obtained = runOrCatch(r.expr("-1.2-").coerceTo("NUMBER"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #10
            /* 10 */
            Long expected_ = 10L;
            /* r.expr('0xa').coerce_to('NUMBER') */
            System.out.println("About to run #10: r.expr('0xa').coerceTo('NUMBER')");
            Object obtained = runOrCatch(r.expr("0xa").coerceTo("NUMBER"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #11
            /* err("ReqlQueryLogicError", "Non-finite number: inf", [])
 */
            Err expected_ = err("ReqlQueryLogicError", "Non-finite number: inf", r.array());
            /* r.expr('inf').coerce_to('NUMBER') */
            System.out.println("About to run #11: r.expr('inf').coerceTo('NUMBER')");
            Object obtained = runOrCatch(r.expr("inf").coerceTo("NUMBER"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #12
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('').split() */
            System.out.println("About to run #12: r.expr('').split()");
            Object obtained = runOrCatch(r.expr("").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #13
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('').split(null) */
            System.out.println("About to run #13: r.expr('').split((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr("").split((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #14
            /* (['']) */
            List expected_ = r.array("");
            /* r.expr('').split(' ') */
            System.out.println("About to run #14: r.expr('').split(' ')");
            Object obtained = runOrCatch(r.expr("").split(" "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #15
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('').split('') */
            System.out.println("About to run #15: r.expr('').split('')");
            Object obtained = runOrCatch(r.expr("").split(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #16
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('').split(null, 5) */
            System.out.println("About to run #16: r.expr('').split((ReqlExpr) null, 5L)");
            Object obtained = runOrCatch(r.expr("").split((ReqlExpr) null, 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #17
            /* (['']) */
            List expected_ = r.array("");
            /* r.expr('').split(' ', 5) */
            System.out.println("About to run #17: r.expr('').split(' ', 5L)");
            Object obtained = runOrCatch(r.expr("").split(" ", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #18
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('').split('', 5) */
            System.out.println("About to run #18: r.expr('').split('', 5L)");
            Object obtained = runOrCatch(r.expr("").split("", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #19
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('aaaa bbbb  cccc ').split() */
            System.out.println("About to run #19: r.expr('aaaa bbbb  cccc ').split()");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #20
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('aaaa bbbb  cccc ').split(null) */
            System.out.println("About to run #20: r.expr('aaaa bbbb  cccc ').split((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #21
            /* (['aaaa', 'bbbb', '', 'cccc', '']) */
            List expected_ = r.array("aaaa", "bbbb", "", "cccc", "");
            /* r.expr('aaaa bbbb  cccc ').split(' ') */
            System.out.println("About to run #21: r.expr('aaaa bbbb  cccc ').split(' ')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #22
            /* (['a', 'a', 'a', 'a', ' ', 'b', 'b', 'b', 'b', ' ', ' ', 'c', 'c', 'c', 'c', ' ']) */
            List expected_ = r.array("a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " ");
            /* r.expr('aaaa bbbb  cccc ').split('') */
            System.out.println("About to run #22: r.expr('aaaa bbbb  cccc ').split('')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #23
            /* (['aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('b') */
            System.out.println("About to run #23: r.expr('aaaa bbbb  cccc ').split('b')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #24
            /* (['aaaa ', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('bb') */
            System.out.println("About to run #24: r.expr('aaaa bbbb  cccc ').split('bb')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("bb"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #25
            /* (['aaaa', 'cccc ']) */
            List expected_ = r.array("aaaa", "cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(' bbbb  ') */
            System.out.println("About to run #25: r.expr('aaaa bbbb  cccc ').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #26
            /* (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb') */
            System.out.println("About to run #26: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #27
            /* (['aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e bbbb f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ') */
            System.out.println("About to run #27: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #28
            /* (['aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e", "f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ') */
            System.out.println("About to run #28: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #29
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('aaaa bbbb  cccc ').split(null, 3) */
            System.out.println("About to run #29: r.expr('aaaa bbbb  cccc ').split((ReqlExpr) null, 3L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #30
            /* (['aaaa', 'bbbb', '', 'cccc', '']) */
            List expected_ = r.array("aaaa", "bbbb", "", "cccc", "");
            /* r.expr('aaaa bbbb  cccc ').split(' ', 5) */
            System.out.println("About to run #30: r.expr('aaaa bbbb  cccc ').split(' ', 5L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" ", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #31
            /* (['a', 'a', 'a', 'a', ' ', 'bbbb  cccc ']) */
            List expected_ = r.array("a", "a", "a", "a", " ", "bbbb  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('', 5) */
            System.out.println("About to run #31: r.expr('aaaa bbbb  cccc ').split('', 5L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #32
            /* (['aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('b', 5) */
            System.out.println("About to run #32: r.expr('aaaa bbbb  cccc ').split('b', 5L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("b", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #33
            /* (['aaaa ', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('bb', 3) */
            System.out.println("About to run #33: r.expr('aaaa bbbb  cccc ').split('bb', 3L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("bb", 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #34
            /* (['aaaa', 'cccc ']) */
            List expected_ = r.array("aaaa", "cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2) */
            System.out.println("About to run #34: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #35
            /* (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6) */
            System.out.println("About to run #35: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #36
            /* (['aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e bbbb f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
            System.out.println("About to run #36: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #37
            /* (['aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e", "f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3) */
            System.out.println("About to run #37: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #38
            /* (['aaaa', 'bbbb', 'cccc ']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(null, 2) */
            System.out.println("About to run #38: r.expr('aaaa bbbb  cccc ').split((ReqlExpr) null, 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #39
            /* (["a", "b"]) */
            List expected_ = r.array("a", "b");
            /* r.expr("a  b  ").split(null, 2) */
            System.out.println("About to run #39: r.expr('a  b  ').split((ReqlExpr) null, 2L)");
            Object obtained = runOrCatch(r.expr("a  b  ").split((ReqlExpr) null, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #40
            /* (['aaaa', 'bbbb', '', 'cccc', '']) */
            List expected_ = r.array("aaaa", "bbbb", "", "cccc", "");
            /* r.expr('aaaa bbbb  cccc ').split(' ', 4) */
            System.out.println("About to run #40: r.expr('aaaa bbbb  cccc ').split(' ', 4L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" ", 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #41
            /* (['a', 'a', 'a', 'a', ' bbbb  cccc ']) */
            List expected_ = r.array("a", "a", "a", "a", " bbbb  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('', 4) */
            System.out.println("About to run #41: r.expr('aaaa bbbb  cccc ').split('', 4L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("", 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #42
            /* (['aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('b', 4) */
            System.out.println("About to run #42: r.expr('aaaa bbbb  cccc ').split('b', 4L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("b", 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #43
            /* (['aaaa ', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('bb', 2) */
            System.out.println("About to run #43: r.expr('aaaa bbbb  cccc ').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #44
            /* (['aaaa', 'cccc ']) */
            List expected_ = r.array("aaaa", "cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1) */
            System.out.println("About to run #44: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #45
            /* (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5) */
            System.out.println("About to run #45: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #46
            /* (['aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e bbbb f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1) */
            System.out.println("About to run #46: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #47
            /* (['aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e", "f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
            System.out.println("About to run #47: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #48
            /* (['aaaa', 'bbbb  cccc ']) */
            List expected_ = r.array("aaaa", "bbbb  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(null, 1) */
            System.out.println("About to run #48: r.expr('aaaa bbbb  cccc ').split((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #49
            /* (['aaaa', 'bbbb', ' cccc ']) */
            List expected_ = r.array("aaaa", "bbbb", " cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(' ', 2) */
            System.out.println("About to run #49: r.expr('aaaa bbbb  cccc ').split(' ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #50
            /* (['a', 'a', 'aa bbbb  cccc ']) */
            List expected_ = r.array("a", "a", "aa bbbb  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('', 2) */
            System.out.println("About to run #50: r.expr('aaaa bbbb  cccc ').split('', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #51
            /* (['aaaa ', '', 'bb  cccc ']) */
            List expected_ = r.array("aaaa ", "", "bb  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('b', 2) */
            System.out.println("About to run #51: r.expr('aaaa bbbb  cccc ').split('b', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("b", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #51");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #51");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #52
            /* (['aaaa ', '', '  cccc ']) */
            List expected_ = r.array("aaaa ", "", "  cccc ");
            /* r.expr('aaaa bbbb  cccc ').split('bb', 2) */
            System.out.println("About to run #52: r.expr('aaaa bbbb  cccc ').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #52");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #52");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #53
            /* (['aaaa', 'cccc ']) */
            List expected_ = r.array("aaaa", "cccc ");
            /* r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2) */
            System.out.println("About to run #53: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #53");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #53");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #54
            /* (['aaaa ', '', '  cccc b d bb e bbbb f']) */
            List expected_ = r.array("aaaa ", "", "  cccc b d bb e bbbb f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2) */
            System.out.println("About to run #54: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #54");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #54");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #55
            /* (['aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e bbbb f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
            System.out.println("About to run #55: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #55");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #55");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #56
            /* (['aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("aaaa", "cccc b d bb e", "f");
            /* r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
            System.out.println("About to run #56: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #56");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #56");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #57
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('  ').split() */
            System.out.println("About to run #57: r.expr('  ').split()");
            Object obtained = runOrCatch(r.expr("  ").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #57");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #57");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #58
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('  ').split(null) */
            System.out.println("About to run #58: r.expr('  ').split((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr("  ").split((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #58");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #58");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #59
            /* (['', '', '']) */
            List expected_ = r.array("", "", "");
            /* r.expr('  ').split(' ') */
            System.out.println("About to run #59: r.expr('  ').split(' ')");
            Object obtained = runOrCatch(r.expr("  ").split(" "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #59");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #59");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #60
            /* ([]) */
            List expected_ = r.array();
            /* r.expr('  ').split(null, 5) */
            System.out.println("About to run #60: r.expr('  ').split((ReqlExpr) null, 5L)");
            Object obtained = runOrCatch(r.expr("  ").split((ReqlExpr) null, 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #60");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #60");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #61
            /* (['', '', '']) */
            List expected_ = r.array("", "", "");
            /* r.expr('  ').split(' ', 5) */
            System.out.println("About to run #61: r.expr('  ').split(' ', 5L)");
            Object obtained = runOrCatch(r.expr("  ").split(" ", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #61");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #61");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #62
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('  aaaa bbbb  cccc ').split() */
            System.out.println("About to run #62: r.expr('  aaaa bbbb  cccc ').split()");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #62");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #62");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #63
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('  aaaa bbbb  cccc ').split(null) */
            System.out.println("About to run #63: r.expr('  aaaa bbbb  cccc ').split((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #63");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #63");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #64
            /* (['', '', 'aaaa', 'bbbb', '', 'cccc', '']) */
            List expected_ = r.array("", "", "aaaa", "bbbb", "", "cccc", "");
            /* r.expr('  aaaa bbbb  cccc ').split(' ') */
            System.out.println("About to run #64: r.expr('  aaaa bbbb  cccc ').split(' ')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #64");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #64");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #65
            /* (['  aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('b') */
            System.out.println("About to run #65: r.expr('  aaaa bbbb  cccc ').split('b')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #65");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #65");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #66
            /* (['  aaaa ', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('bb') */
            System.out.println("About to run #66: r.expr('  aaaa bbbb  cccc ').split('bb')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("bb"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #66");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #66");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #67
            /* (['  aaaa', 'cccc ']) */
            List expected_ = r.array("  aaaa", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' bbbb  ') */
            System.out.println("About to run #67: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #67");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #67");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #68
            /* (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb') */
            System.out.println("About to run #68: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #68");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #68");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #69
            /* (['  aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e bbbb f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ') */
            System.out.println("About to run #69: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #69");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #69");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #70
            /* (['  aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e", "f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ') */
            System.out.println("About to run #70: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  "),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #70");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #70");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #71
            /* (['aaaa', 'bbbb', 'cccc']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc");
            /* r.expr('  aaaa bbbb  cccc ').split(null, 3) */
            System.out.println("About to run #71: r.expr('  aaaa bbbb  cccc ').split((ReqlExpr) null, 3L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #71");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #71");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #72
            /* (['', '', 'aaaa', 'bbbb', '', 'cccc ']) */
            List expected_ = r.array("", "", "aaaa", "bbbb", "", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' ', 5) */
            System.out.println("About to run #72: r.expr('  aaaa bbbb  cccc ').split(' ', 5L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" ", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #72");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #72");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #73
            /* (['  aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('b', 5) */
            System.out.println("About to run #73: r.expr('  aaaa bbbb  cccc ').split('b', 5L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("b", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #73");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #73");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #74
            /* (['  aaaa ', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('bb', 3) */
            System.out.println("About to run #74: r.expr('  aaaa bbbb  cccc ').split('bb', 3L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("bb", 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #74");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #74");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #75
            /* (['  aaaa', 'cccc ']) */
            List expected_ = r.array("  aaaa", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2) */
            System.out.println("About to run #75: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #75");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #75");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #75:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #76
            /* (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6) */
            System.out.println("About to run #76: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #76");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #76");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #77
            /* (['  aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e bbbb f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
            System.out.println("About to run #77: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #77");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #77");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #77:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #78
            /* (['  aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e", "f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3) */
            System.out.println("About to run #78: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #78");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #78");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #79
            /* (['aaaa', 'bbbb', 'cccc ']) */
            List expected_ = r.array("aaaa", "bbbb", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(null, 2) */
            System.out.println("About to run #79: r.expr('  aaaa bbbb  cccc ').split((ReqlExpr) null, 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #79");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #79");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #79:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #80
            /* (["a", "b"]) */
            List expected_ = r.array("a", "b");
            /* r.expr("a  b  ").split(null, 2) */
            System.out.println("About to run #80: r.expr('a  b  ').split((ReqlExpr) null, 2L)");
            Object obtained = runOrCatch(r.expr("a  b  ").split((ReqlExpr) null, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #80");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #80");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #81
            /* (['', '', 'aaaa', 'bbbb', ' cccc ']) */
            List expected_ = r.array("", "", "aaaa", "bbbb", " cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' ', 4) */
            System.out.println("About to run #81: r.expr('  aaaa bbbb  cccc ').split(' ', 4L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" ", 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #81");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #81");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #82
            /* (['  aaaa ', '', '', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('b', 4) */
            System.out.println("About to run #82: r.expr('  aaaa bbbb  cccc ').split('b', 4L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("b", 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #82");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #82");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #83
            /* (['  aaaa ', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('bb', 2) */
            System.out.println("About to run #83: r.expr('  aaaa bbbb  cccc ').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #83");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #83");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #84
            /* (['  aaaa', 'cccc ']) */
            List expected_ = r.array("  aaaa", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1) */
            System.out.println("About to run #84: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #84");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #84");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #85
            /* (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
            List expected_ = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5) */
            System.out.println("About to run #85: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #85");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #85");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #86
            /* (['  aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e bbbb f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1) */
            System.out.println("About to run #86: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #86");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #86");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #87
            /* (['  aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e", "f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
            System.out.println("About to run #87: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #87");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #87");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #88
            /* (['aaaa', 'bbbb  cccc ']) */
            List expected_ = r.array("aaaa", "bbbb  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(null, 1) */
            System.out.println("About to run #88: r.expr('  aaaa bbbb  cccc ').split((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #88");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #88");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #89
            /* (['', '', 'aaaa bbbb  cccc ']) */
            List expected_ = r.array("", "", "aaaa bbbb  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' ', 2) */
            System.out.println("About to run #89: r.expr('  aaaa bbbb  cccc ').split(' ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #89");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #89");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #90
            /* (['  aaaa ', '', 'bb  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "bb  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('b', 2) */
            System.out.println("About to run #90: r.expr('  aaaa bbbb  cccc ').split('b', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("b", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #90");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #90");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #91
            /* (['  aaaa ', '', '  cccc ']) */
            List expected_ = r.array("  aaaa ", "", "  cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split('bb', 2) */
            System.out.println("About to run #91: r.expr('  aaaa bbbb  cccc ').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #91");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #91");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #91:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #92
            /* (['  aaaa', 'cccc ']) */
            List expected_ = r.array("  aaaa", "cccc ");
            /* r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2) */
            System.out.println("About to run #92: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #92");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #92");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #92:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #93
            /* (['  aaaa ', '', '  cccc b d bb e bbbb f']) */
            List expected_ = r.array("  aaaa ", "", "  cccc b d bb e bbbb f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2) */
            System.out.println("About to run #93: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #93");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #93");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #94
            /* (['  aaaa', 'cccc b d bb e bbbb f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e bbbb f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
            System.out.println("About to run #94: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #94");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #94");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #94:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #95
            /* (['  aaaa', 'cccc b d bb e', 'f']) */
            List expected_ = r.array("  aaaa", "cccc b d bb e", "f");
            /* r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
            System.out.println("About to run #95: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2L)");
            Object obtained = runOrCatch(r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #95");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #95");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #95:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #96
            /* ("ABC-DEF-GHJ") */
            String expected_ = "ABC-DEF-GHJ";
            /* r.expr("abc-dEf-GHJ").upcase() */
            System.out.println("About to run #96: r.expr('abc-dEf-GHJ').upcase()");
            Object obtained = runOrCatch(r.expr("abc-dEf-GHJ").upcase(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #96");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #96");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #97
            /* ("abc-def-ghj") */
            String expected_ = "abc-def-ghj";
            /* r.expr("abc-dEf-GHJ").downcase() */
            System.out.println("About to run #97: r.expr('abc-dEf-GHJ').downcase()");
            Object obtained = runOrCatch(r.expr("abc-dEf-GHJ").downcase(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #97");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #97");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #97:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #98
            /* (["f", "\u00e9", "o", "o"]) */
            List expected_ = r.array("f", "é", "o", "o");
            /* r.expr(u"f\u00e9oo").split("") */
            System.out.println("About to run #98: r.expr('féoo').split('')");
            Object obtained = runOrCatch(r.expr("féoo").split(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #98");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #98");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #99
            /* (["f", "e\u0301", "o", "o"]) */
            List expected_ = r.array("f", "é", "o", "o");
            /* r.expr(u"fe\u0301oo").split("") */
            System.out.println("About to run #99: r.expr('féoo').split('')");
            Object obtained = runOrCatch(r.expr("féoo").split(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #99");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #99");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #100
            /* (["foo", "bar", "baz", "quux", "fred", "barney", "wilma"]) */
            List expected_ = r.array("foo", "bar", "baz", "quux", "fred", "barney", "wilma");
            /* r.expr(u"foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split() */
            System.out.println("About to run #100: r.expr('foo bar\\tbaz\\nquux\\rfred\\u000bbarney\\u000cwilma').split()");
            Object obtained = runOrCatch(r.expr("foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #100");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #100");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/string.yaml #101
            /* (["foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b"]) */
            List expected_ = r.array("foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b");
            /* r.expr(u"foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split() */
            System.out.println("About to run #101: r.expr('foo\\u00a0bar\\u2001baz\\u2060quux\\u2028fred\\u2028barney\\u2029wilma\\u0085betty\\u200b').split()");
            Object obtained = runOrCatch(r.expr("foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #101");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #101");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #101:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
