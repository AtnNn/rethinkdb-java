// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class DatumArray {
    Logger logger = LoggerFactory.getLogger(DatumArray.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // datum/array.yaml #1
            /* [] */
            List expected_ = r.array();
            /* r.expr([]) */
            System.out.println("About to run #1: r.expr(r.array())");
            Object obtained = runOrCatch(r.expr(r.array()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #2
            /* [1] */
            List expected_ = r.array(1L);
            /* r.expr([1]) */
            System.out.println("About to run #2: r.expr(r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #3
            /* [1, 2, 3, 4, 5] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L);
            /* r.expr([1,2,3,4,5]) */
            System.out.println("About to run #3: r.expr(r.array(1L, 2L, 3L, 4L, 5L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L, 5L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #4
            /* 'ARRAY' */
            String expected_ = "ARRAY";
            /* r.expr([]).type_of() */
            System.out.println("About to run #4: r.expr(r.array()).typeOf()");
            Object obtained = runOrCatch(r.expr(r.array()).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #(5, 1)
            /* '[1,2]' */
            String expected_ = "[1,2]";
            /* r.expr([1, 2]).coerce_to('string') */
            System.out.println("About to run #(5, 1): r.expr(r.array(1L, 2L)).coerceTo('string')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(5, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(5, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(5, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #(5, 2)
            /* '[1,2]' */
            String expected_ = "[1,2]";
            /* r.expr([1, 2]).coerce_to('STRING') */
            System.out.println("About to run #(5, 2): r.expr(r.array(1L, 2L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(5, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(5, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(5, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #6
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* r.expr([1, 2]).coerce_to('array') */
            System.out.println("About to run #6: r.expr(r.array(1L, 2L)).coerceTo('array')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #7
            /* err('ReqlQueryLogicError', 'Cannot coerce ARRAY to NUMBER.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce ARRAY to NUMBER.", r.array(0L));
            /* r.expr([1, 2]).coerce_to('number') */
            System.out.println("About to run #7: r.expr(r.array(1L, 2L)).coerceTo('number')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("number"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #8
            /* ({'a':1,'b':2}) */
            Map expected_ = r.hashMap("a", 1L).with("b", 2L);
            /* r.expr([['a', 1], ['b', 2]]).coerce_to('object') */
            System.out.println("About to run #8: r.expr(r.array(r.array('a', 1L), r.array('b', 2L))).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array("a", 1L), r.array("b", 2L))).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #9
            /* err('ReqlQueryLogicError', 'Expected array of size 2, but got size 0.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected array of size 2, but got size 0.");
            /* r.expr([[]]).coerce_to('object') */
            System.out.println("About to run #9: r.expr(r.array(r.array())).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array())).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #10
            /* err('ReqlQueryLogicError', 'Expected array of size 2, but got size 3.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected array of size 2, but got size 3.");
            /* r.expr([['1',2,3]]).coerce_to('object') */
            System.out.println("About to run #10: r.expr(r.array(r.array('1', 2L, 3L))).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array("1", 2L, 3L))).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #11
            /* [1] */
            List expected_ = r.array(1L);
            /* r.expr([r.expr(1)]) */
            System.out.println("About to run #11: r.expr(r.array(r.expr(1L)))");
            Object obtained = runOrCatch(r.expr(r.array(r.expr(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #12
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,3,4]).insert_at(1, 2) */
            System.out.println("About to run #12: r.expr(r.array(1L, 3L, 4L)).insertAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 3L, 4L)).insertAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #13
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([2,3]).insert_at(0, 1) */
            System.out.println("About to run #13: r.expr(r.array(2L, 3L)).insertAt(0L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(2L, 3L)).insertAt(0L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #14
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3]).insert_at(-1, 4) */
            System.out.println("About to run #14: r.expr(r.array(1L, 2L, 3L)).insertAt(-1L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(-1L, 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #15
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3]).insert_at(3, 4) */
            System.out.println("About to run #15: r.expr(r.array(1L, 2L, 3L)).insertAt(3L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(3L, 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #16
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr(3).do(lambda x: r.expr([1,2,3]).insert_at(x, 4)) */
            System.out.println("About to run #16: r.expr(3L).do_(x -> r.expr(r.array(1L, 2L, 3L)).insertAt(x, 4L))");
            Object obtained = runOrCatch(r.expr(3L).do_(x -> r.expr(r.array(1L, 2L, 3L)).insertAt(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #17
            /* err('ReqlNonExistenceError', 'Index `4` out of bounds for array of size: `3`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `3`.", r.array(0L));
            /* r.expr([1,2,3]).insert_at(4, 5) */
            System.out.println("About to run #17: r.expr(r.array(1L, 2L, 3L)).insertAt(4L, 5L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(4L, 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #18
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3]).insert_at(-5, -1) */
            System.out.println("About to run #18: r.expr(r.array(1L, 2L, 3L)).insertAt(-5L, -1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(-5L, -1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #19
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).insert_at(1.5, 1) */
            System.out.println("About to run #19: r.expr(r.array(1L, 2L, 3L)).insertAt(1.5, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(1.5, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #20
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).insert_at(null, 1) */
            System.out.println("About to run #20: r.expr(r.array(1L, 2L, 3L)).insertAt((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #21
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,4]).splice_at(1, [2,3]) */
            System.out.println("About to run #21: r.expr(r.array(1L, 4L)).spliceAt(1L, r.array(2L, 3L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 4L)).spliceAt(1L, r.array(2L, 3L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #22
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([3,4]).splice_at(0, [1,2]) */
            System.out.println("About to run #22: r.expr(r.array(3L, 4L)).spliceAt(0L, r.array(1L, 2L))");
            Object obtained = runOrCatch(r.expr(r.array(3L, 4L)).spliceAt(0L, r.array(1L, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #23
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2]).splice_at(2, [3,4]) */
            System.out.println("About to run #23: r.expr(r.array(1L, 2L)).spliceAt(2L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(2L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #24
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2]).splice_at(-1, [3,4]) */
            System.out.println("About to run #24: r.expr(r.array(1L, 2L)).spliceAt(-1L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(-1L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #25
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr(2).do(lambda x: r.expr([1,2]).splice_at(x, [3,4])) */
            System.out.println("About to run #25: r.expr(2L).do_(x -> r.expr(r.array(1L, 2L)).spliceAt(x, r.array(3L, 4L)))");
            Object obtained = runOrCatch(r.expr(2L).do_(x -> r.expr(r.array(1L, 2L)).spliceAt(x, r.array(3L, 4L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #26
            /* err('ReqlNonExistenceError', 'Index `3` out of bounds for array of size: `2`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `2`.", r.array(0L));
            /* r.expr([1,2]).splice_at(3, [3,4]) */
            System.out.println("About to run #26: r.expr(r.array(1L, 2L)).spliceAt(3L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(3L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #27
            /* err('ReqlNonExistenceError', 'Index out of bounds: -4', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -4", r.array(0L));
            /* r.expr([1,2]).splice_at(-4, [3,4]) */
            System.out.println("About to run #27: r.expr(r.array(1L, 2L)).spliceAt(-4L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(-4L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #28
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).splice_at(1.5, [1]) */
            System.out.println("About to run #28: r.expr(r.array(1L, 2L, 3L)).spliceAt(1.5, r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).spliceAt(1.5, r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #29
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).splice_at(null, [1]) */
            System.out.println("About to run #29: r.expr(r.array(1L, 2L, 3L)).spliceAt((ReqlExpr) null, r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).spliceAt((ReqlExpr) null, r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #30
            /* err('ReqlQueryLogicError', 'Expected type ARRAY but found NUMBER.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", r.array(0L));
            /* r.expr([1,4]).splice_at(1, 2) */
            System.out.println("About to run #30: r.expr(r.array(1L, 4L)).spliceAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 4L)).spliceAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #31
            /* [2, 3, 4] */
            List expected_ = r.array(2L, 3L, 4L);
            /* r.expr([1,2,3,4]).delete_at(0) */
            System.out.println("About to run #31: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(0L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #32
            /* [2, 3, 4] */
            List expected_ = r.array(2L, 3L, 4L);
            /* r.expr(0).do(lambda x: r.expr([1,2,3,4]).delete_at(x)) */
            System.out.println("About to run #32: r.expr(0L).do_(x -> r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(x))");
            Object obtained = runOrCatch(r.expr(0L).do_(x -> r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(x)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #33
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,2,3,4]).delete_at(-1) */
            System.out.println("About to run #33: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #34
            /* [1, 4] */
            List expected_ = r.array(1L, 4L);
            /* r.expr([1,2,3,4]).delete_at(1,3) */
            System.out.println("About to run #34: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, 3L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #35
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3,4]).delete_at(4,4) */
            System.out.println("About to run #35: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L, 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #36
            /* [] */
            List expected_ = r.array();
            /* r.expr([]).delete_at(0,0) */
            System.out.println("About to run #36: r.expr(r.array()).deleteAt(0L, 0L)");
            Object obtained = runOrCatch(r.expr(r.array()).deleteAt(0L, 0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #37
            /* [1, 4] */
            List expected_ = r.array(1L, 4L);
            /* r.expr([1,2,3,4]).delete_at(1,-1) */
            System.out.println("About to run #37: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, -1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, -1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #38
            /* err('ReqlNonExistenceError', 'Index `4` out of bounds for array of size: `4`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `4`.", r.array(0L));
            /* r.expr([1,2,3,4]).delete_at(4) */
            System.out.println("About to run #38: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #39
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3,4]).delete_at(-5) */
            System.out.println("About to run #39: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-5L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #40
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).delete_at(1.5) */
            System.out.println("About to run #40: r.expr(r.array(1L, 2L, 3L)).deleteAt(1.5)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).deleteAt(1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #41
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).delete_at(null) */
            System.out.println("About to run #41: r.expr(r.array(1L, 2L, 3L)).deleteAt((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).deleteAt((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #42
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([0,2,3]).change_at(0, 1) */
            System.out.println("About to run #42: r.expr(r.array(0L, 2L, 3L)).changeAt(0L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(0L, 2L, 3L)).changeAt(0L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #43
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr(1).do(lambda x: r.expr([0,2,3]).change_at(0,x)) */
            System.out.println("About to run #43: r.expr(1L).do_(x -> r.expr(r.array(0L, 2L, 3L)).changeAt(0L, x))");
            Object obtained = runOrCatch(r.expr(1L).do_(x -> r.expr(r.array(0L, 2L, 3L)).changeAt(0L, x)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #44
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,0,3]).change_at(1, 2) */
            System.out.println("About to run #44: r.expr(r.array(1L, 0L, 3L)).changeAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 0L, 3L)).changeAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #45
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,2,0]).change_at(2, 3) */
            System.out.println("About to run #45: r.expr(r.array(1L, 2L, 0L)).changeAt(2L, 3L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 0L)).changeAt(2L, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #46
            /* err('ReqlNonExistenceError', 'Index `3` out of bounds for array of size: `3`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `3`.", r.array(0L));
            /* r.expr([1,2,3]).change_at(3, 4) */
            System.out.println("About to run #46: r.expr(r.array(1L, 2L, 3L)).changeAt(3L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt(3L, 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #47
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3,4]).change_at(-5, 1) */
            System.out.println("About to run #47: r.expr(r.array(1L, 2L, 3L, 4L)).changeAt(-5L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).changeAt(-5L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #48
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).change_at(1.5, 1) */
            System.out.println("About to run #48: r.expr(r.array(1L, 2L, 3L)).changeAt(1.5, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt(1.5, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/array.yaml #49
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).change_at(null, 1) */
            System.out.println("About to run #49: r.expr(r.array(1L, 2L, 3L)).changeAt((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
