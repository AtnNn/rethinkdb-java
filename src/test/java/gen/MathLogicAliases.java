// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MathLogicAliases {
    Logger logger = LoggerFactory.getLogger(MathLogicAliases.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // math_logic/aliases.yaml #(1, 1)
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(0).add(1) */
            System.out.println("About to run #(1, 1): r.expr(0L).add(1L)");
            Object obtained = runOrCatch(r.expr(0L).add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 2)
            /* 1 */
            Long expected_ = 1L;
            /* r.add(0, 1) */
            System.out.println("About to run #(1, 2): r.add(0L, 1L)");
            Object obtained = runOrCatch(r.add(0L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 3)
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(2).sub(1) */
            System.out.println("About to run #(1, 3): r.expr(2L).sub(1L)");
            Object obtained = runOrCatch(r.expr(2L).sub(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 4)
            /* 1 */
            Long expected_ = 1L;
            /* r.sub(2, 1) */
            System.out.println("About to run #(1, 4): r.sub(2L, 1L)");
            Object obtained = runOrCatch(r.sub(2L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 5)
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(2).div(2) */
            System.out.println("About to run #(1, 5): r.expr(2L).div(2L)");
            Object obtained = runOrCatch(r.expr(2L).div(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 6)
            /* 1 */
            Long expected_ = 1L;
            /* r.div(2, 2) */
            System.out.println("About to run #(1, 6): r.div(2L, 2L)");
            Object obtained = runOrCatch(r.div(2L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 7)
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).mul(1) */
            System.out.println("About to run #(1, 7): r.expr(1L).mul(1L)");
            Object obtained = runOrCatch(r.expr(1L).mul(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 7)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 7)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 7):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 8)
            /* 1 */
            Long expected_ = 1L;
            /* r.mul(1, 1) */
            System.out.println("About to run #(1, 8): r.mul(1L, 1L)");
            Object obtained = runOrCatch(r.mul(1L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 8)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 8)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 8):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 9)
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).mod(2) */
            System.out.println("About to run #(1, 9): r.expr(1L).mod(2L)");
            Object obtained = runOrCatch(r.expr(1L).mod(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 9)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 9)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 9):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(1, 10)
            /* 1 */
            Long expected_ = 1L;
            /* r.mod(1, 2) */
            System.out.println("About to run #(1, 10): r.mod(1L, 2L)");
            Object obtained = runOrCatch(r.mod(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 10)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 10)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 10):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 1)
            /* True */
            Boolean expected_ = true;
            /* r.expr(True).and_(True) */
            System.out.println("About to run #(2, 1): r.expr(true).and(true)");
            Object obtained = runOrCatch(r.expr(true).and(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 2)
            /* True */
            Boolean expected_ = true;
            /* r.expr(True).or_(True) */
            System.out.println("About to run #(2, 2): r.expr(true).or(true)");
            Object obtained = runOrCatch(r.expr(true).or(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 3)
            /* True */
            Boolean expected_ = true;
            /* r.and_(True, True) */
            System.out.println("About to run #(2, 3): r.and(true, true)");
            Object obtained = runOrCatch(r.and(true, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 4)
            /* True */
            Boolean expected_ = true;
            /* r.or_(True, True) */
            System.out.println("About to run #(2, 4): r.or(true, true)");
            Object obtained = runOrCatch(r.or(true, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 5)
            /* True */
            Boolean expected_ = true;
            /* r.expr(False).not_() */
            System.out.println("About to run #(2, 5): r.expr(false).not()");
            Object obtained = runOrCatch(r.expr(false).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(2, 6)
            /* True */
            Boolean expected_ = true;
            /* r.not_(False) */
            System.out.println("About to run #(2, 6): r.not(false)");
            Object obtained = runOrCatch(r.not(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 1)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).eq(1) */
            System.out.println("About to run #(3, 1): r.expr(1L).eq(1L)");
            Object obtained = runOrCatch(r.expr(1L).eq(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 2)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).ne(2) */
            System.out.println("About to run #(3, 2): r.expr(1L).ne(2L)");
            Object obtained = runOrCatch(r.expr(1L).ne(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 3)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).lt(2) */
            System.out.println("About to run #(3, 3): r.expr(1L).lt(2L)");
            Object obtained = runOrCatch(r.expr(1L).lt(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 4)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).gt(0) */
            System.out.println("About to run #(3, 4): r.expr(1L).gt(0L)");
            Object obtained = runOrCatch(r.expr(1L).gt(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 5)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).le(1) */
            System.out.println("About to run #(3, 5): r.expr(1L).le(1L)");
            Object obtained = runOrCatch(r.expr(1L).le(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 6)
            /* True */
            Boolean expected_ = true;
            /* r.expr(1).ge(1) */
            System.out.println("About to run #(3, 6): r.expr(1L).ge(1L)");
            Object obtained = runOrCatch(r.expr(1L).ge(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 7)
            /* True */
            Boolean expected_ = true;
            /* r.eq(1, 1) */
            System.out.println("About to run #(3, 7): r.eq(1L, 1L)");
            Object obtained = runOrCatch(r.eq(1L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 7)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 7)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 7):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 8)
            /* True */
            Boolean expected_ = true;
            /* r.ne(1, 2) */
            System.out.println("About to run #(3, 8): r.ne(1L, 2L)");
            Object obtained = runOrCatch(r.ne(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 8)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 8)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 8):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 9)
            /* True */
            Boolean expected_ = true;
            /* r.lt(1, 2) */
            System.out.println("About to run #(3, 9): r.lt(1L, 2L)");
            Object obtained = runOrCatch(r.lt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 9)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 9)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 9):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 10)
            /* True */
            Boolean expected_ = true;
            /* r.gt(1, 0) */
            System.out.println("About to run #(3, 10): r.gt(1L, 0L)");
            Object obtained = runOrCatch(r.gt(1L, 0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 10)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 10)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 10):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 11)
            /* True */
            Boolean expected_ = true;
            /* r.le(1, 1) */
            System.out.println("About to run #(3, 11): r.le(1L, 1L)");
            Object obtained = runOrCatch(r.le(1L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 11)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 11)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 11):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/aliases.yaml #(3, 12)
            /* True */
            Boolean expected_ = true;
            /* r.ge(1, 1) */
            System.out.println("About to run #(3, 12): r.ge(1L, 1L)");
            Object obtained = runOrCatch(r.ge(1L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 12)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 12)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 12):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
