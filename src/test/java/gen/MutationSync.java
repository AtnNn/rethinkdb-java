// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MutationSync {
    Logger logger = LoggerFactory.getLogger(MutationSync.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // mutation/sync.yaml #1
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.db('test').table_create('test1') */
            System.out.println("About to run #1: r.db('test').tableCreate('test1')");
            Object obtained = runOrCatch(r.db("test").tableCreate("test1"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #2
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.db('test').table_create('test1soft') */
            System.out.println("About to run #2: r.db('test').tableCreate('test1soft')");
            Object obtained = runOrCatch(r.db("test").tableCreate("test1soft"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #3
            /* ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':1, 'inserted':0}) */
            Map expected_ = r.hashMap("skipped", 0L).with("deleted", 0L).with("unchanged", 0L).with("errors", 0L).with("replaced", 1L).with("inserted", 0L);
            /* r.db('test').table('test1soft').config().update({'durability':'soft'}) */
            System.out.println("About to run #3: r.db('test').table('test1soft').config().update(r.hashMap('durability', 'soft'))");
            Object obtained = runOrCatch(r.db("test").table("test1soft").config().update(r.hashMap("durability", "soft")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // mutation/sync.yaml #4
        // tbl = r.db('test').table('test1')
        System.out.println("Possibly executing: Table tbl = (Table) (r.db('test').table('test1'));");
        Table tbl = (Table) (r.db("test").table("test1"));
                
        // mutation/sync.yaml #5
        // tbl_soft = r.db('test').table('test1soft')
        System.out.println("Possibly executing: Table tbl_soft = (Table) (r.db('test').table('test1soft'));");
        Table tbl_soft = (Table) (r.db("test").table("test1soft"));
                
        {
            // mutation/sync.yaml #6
            /* partial({'created':1}) */
            Partial expected_ = partial(r.hashMap("created", 1L));
            /* tbl.index_create('x') */
            System.out.println("About to run #6: tbl.indexCreate('x')");
            Object obtained = runOrCatch(tbl.indexCreate("x"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #7
            /* ([{'ready':True, 'index':'x'}]) */
            List expected_ = r.array(r.hashMap("ready", true).with("index", "x"));
            /* tbl.index_wait('x').pluck('index', 'ready') */
            System.out.println("About to run #7: tbl.indexWait('x').pluck('index', 'ready')");
            Object obtained = runOrCatch(tbl.indexWait("x").pluck("index", "ready"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #8
            /* ({'synced':1}) */
            Map expected_ = r.hashMap("synced", 1L);
            /* tbl.sync() */
            System.out.println("About to run #8: tbl.sync()");
            Object obtained = runOrCatch(tbl.sync(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #9
            /* ({'synced':1}) */
            Map expected_ = r.hashMap("synced", 1L);
            /* tbl_soft.sync() */
            System.out.println("About to run #9: tbl_soft.sync()");
            Object obtained = runOrCatch(tbl_soft.sync(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #10
            /* ({'synced':1}) */
            Map expected_ = r.hashMap("synced", 1L);
            /* tbl.sync() */
            System.out.println("About to run #10: tbl.sync()");
            Object obtained = runOrCatch(tbl.sync(),
                                          new OptArgs()
                                          .with("durability", "soft")
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #11
            /* ({'synced':1}) */
            Map expected_ = r.hashMap("synced", 1L);
            /* tbl.sync() */
            System.out.println("About to run #11: tbl.sync()");
            Object obtained = runOrCatch(tbl.sync(),
                                          new OptArgs()
                                          .with("durability", "hard")
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #15
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.db('test').table_drop('test1') */
            System.out.println("About to run #15: r.db('test').tableDrop('test1')");
            Object obtained = runOrCatch(r.db("test").tableDrop("test1"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // mutation/sync.yaml #16
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.db('test').table_drop('test1soft') */
            System.out.println("About to run #16: r.db('test').tableDrop('test1soft')");
            Object obtained = runOrCatch(r.db("test").tableDrop("test1soft"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
