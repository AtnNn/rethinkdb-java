// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class Random {
    Logger logger = LoggerFactory.getLogger(Random.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // random.yaml #1
            /* 3 */
            Long expected_ = 3L;
            /* r.expr([1,2,3]).sample(3).distinct().count() */
            System.out.println("About to run #1: r.expr(r.array(1L, 2L, 3L)).sample(3L).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).sample(3L).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #2
            /* 3 */
            Long expected_ = 3L;
            /* r.expr([1,2,3]).sample(3).count() */
            System.out.println("About to run #2: r.expr(r.array(1L, 2L, 3L)).sample(3L).count()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).sample(3L).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #3
            /* 3 */
            Long expected_ = 3L;
            /* r.expr([1,2,3,4,5,6]).sample(3).distinct().count() */
            System.out.println("About to run #3: r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L)).sample(3L).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L)).sample(3L).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #4
            /* 3 */
            Long expected_ = 3L;
            /* r.expr([1,2,3]).sample(4).distinct().count() */
            System.out.println("About to run #4: r.expr(r.array(1L, 2L, 3L)).sample(4L).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).sample(4L).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #6
            /* err('ReqlQueryLogicError', 'Number of items to sample must be non-negative, got `-1`.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number of items to sample must be non-negative, got `-1`.", r.array(0L));
            /* r.expr([1,2,3]).sample(-1) */
            System.out.println("About to run #6: r.expr(r.array(1L, 2L, 3L)).sample(-1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).sample(-1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #7
            /* err('ReqlQueryLogicError', 'Cannot convert NUMBER to SEQUENCE', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", r.array(0L));
            /* r.expr(1).sample(1) */
            System.out.println("About to run #7: r.expr(1L).sample(1L)");
            Object obtained = runOrCatch(r.expr(1L).sample(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #8
            /* err('ReqlQueryLogicError', 'Cannot convert OBJECT to SEQUENCE', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert OBJECT to SEQUENCE", r.array(0L));
            /* r.expr({}).sample(1) */
            System.out.println("About to run #8: r.expr(r.hashMap()).sample(1L)");
            Object obtained = runOrCatch(r.expr(r.hashMap()).sample(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random().do(lambda x:r.and_(x.ge(0), x.lt(1))) */
            System.out.println("About to run #(9, 1): r.random().do_(x -> r.and(x.ge(0L), x.lt(1L)))");
            Object obtained = runOrCatch(r.random().do_(x -> r.and(x.ge(0L), x.lt(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1))) */
            System.out.println("About to run #(9, 2): r.random(1L).optArg('float', true).do_(x -> r.and(x.ge(0L), x.lt(1L)))");
            Object obtained = runOrCatch(r.random(1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(0, 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1))) */
            System.out.println("About to run #(9, 3): r.random(0L, 1L).optArg('float', true).do_(x -> r.and(x.ge(0L), x.lt(1L)))");
            Object obtained = runOrCatch(r.random(0L, 1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 4)
            /* True */
            Boolean expected_ = true;
            /* r.random(1, 0, float=True).do(lambda x:r.and_(x.le(1), x.gt(0))) */
            System.out.println("About to run #(9, 4): r.random(1L, 0L).optArg('float', true).do_(x -> r.and(x.le(1L), x.gt(0L)))");
            Object obtained = runOrCatch(r.random(1L, 0L).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 5)
            /* True */
            Boolean expected_ = true;
            /* r.random(r.expr(0), 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1))) */
            System.out.println("About to run #(9, 5): r.random(r.expr(0L), 1L).optArg('float', true).do_(x -> r.and(x.ge(0L), x.lt(1L)))");
            Object obtained = runOrCatch(r.random(r.expr(0L), 1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 6)
            /* True */
            Boolean expected_ = true;
            /* r.random(1, r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0))) */
            System.out.println("About to run #(9, 6): r.random(1L, r.expr(0L)).optArg('float', true).do_(x -> r.and(x.le(1L), x.gt(0L)))");
            Object obtained = runOrCatch(r.random(1L, r.expr(0L)).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(9, 7)
            /* True */
            Boolean expected_ = true;
            /* r.random(r.expr(1), r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0))) */
            System.out.println("About to run #(9, 7): r.random(r.expr(1L), r.expr(0L)).optArg('float', true).do_(x -> r.and(x.le(1L), x.gt(0L)))");
            Object obtained = runOrCatch(r.random(r.expr(1L), r.expr(0L)).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 7)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 7)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 7):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(10, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(0.495, float=True).do(lambda x:r.and_(x.ge(0), x.lt(0.495))) */
            System.out.println("About to run #(10, 1): r.random(0.495).optArg('float', true).do_(x -> r.and(x.ge(0L), x.lt(0.495)))");
            Object obtained = runOrCatch(r.random(0.495).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(0.495))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(10, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(10, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(10, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(10, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(-0.495, float=True).do(lambda x:r.and_(x.le(0), x.gt(-0.495))) */
            System.out.println("About to run #(10, 2): r.random(-0.495).optArg('float', true).do_(x -> r.and(x.le(0L), x.gt(-0.495)))");
            Object obtained = runOrCatch(r.random(-0.495).optArg("float", true).do_(x -> r.and(x.le(0L), x.gt(-0.495))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(10, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(10, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(10, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(10, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(1823756.24, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1823756.24))) */
            System.out.println("About to run #(10, 3): r.random(1823756.24).optArg('float', true).do_(x -> r.and(x.ge(0L), x.lt(1823756.24)))");
            Object obtained = runOrCatch(r.random(1823756.24).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1823756.24))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(10, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(10, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(10, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(10, 4)
            /* True */
            Boolean expected_ = true;
            /* r.random(-1823756.24, float=True).do(lambda x:r.and_(x.le(0), x.gt(-1823756.24))) */
            System.out.println("About to run #(10, 4): r.random(-1823756.24).optArg('float', true).do_(x -> r.and(x.le(0L), x.gt(-1823756.24)))");
            Object obtained = runOrCatch(r.random(-1823756.24).optArg("float", true).do_(x -> r.and(x.le(0L), x.gt(-1823756.24))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(10, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(10, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(10, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(11, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(10.5), x.lt(20.153))) */
            System.out.println("About to run #(11, 1): r.random(10.5, 20.153).optArg('float', true).do_(x -> r.and(x.ge(10.5), x.lt(20.153)))");
            Object obtained = runOrCatch(r.random(10.5, 20.153).optArg("float", true).do_(x -> r.and(x.ge(10.5), x.lt(20.153))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(11, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(11, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(11, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(11, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(20.153, 10.5, float=True).do(lambda x:r.and_(x.le(20.153), x.gt(10.5))) */
            System.out.println("About to run #(11, 2): r.random(20.153, 10.5).optArg('float', true).do_(x -> r.and(x.le(20.153), x.gt(10.5)))");
            Object obtained = runOrCatch(r.random(20.153, 10.5).optArg("float", true).do_(x -> r.and(x.le(20.153), x.gt(10.5))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(11, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(11, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(11, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(11, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(31415926.1, 31415926, float=True).do(lambda x:r.and_(x.le(31415926.1), x.gt(31415926))) */
            System.out.println("About to run #(11, 3): r.random(31415926.1, 31415926L).optArg('float', true).do_(x -> r.and(x.le(31415926.1), x.gt(31415926L)))");
            Object obtained = runOrCatch(r.random(31415926.1, 31415926L).optArg("float", true).do_(x -> r.and(x.le(31415926.1), x.gt(31415926L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(11, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(11, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(11, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(12, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(-10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(-10.5), x.lt(20.153))) */
            System.out.println("About to run #(12, 1): r.random(-10.5, 20.153).optArg('float', true).do_(x -> r.and(x.ge(-10.5), x.lt(20.153)))");
            Object obtained = runOrCatch(r.random(-10.5, 20.153).optArg("float", true).do_(x -> r.and(x.ge(-10.5), x.lt(20.153))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(12, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(12, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(12, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(12, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(-20.153, -10.5, float=True).do(lambda x:r.and_(x.ge(-20.153), x.lt(-10.5))) */
            System.out.println("About to run #(12, 2): r.random(-20.153, -10.5).optArg('float', true).do_(x -> r.and(x.ge(-20.153), x.lt(-10.5)))");
            Object obtained = runOrCatch(r.random(-20.153, -10.5).optArg("float", true).do_(x -> r.and(x.ge(-20.153), x.lt(-10.5))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(12, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(12, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(12, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(12, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(-31415926, -31415926.1, float=True).do(lambda x:r.and_(x.le(-31415926), x.gt(-31415926.1))) */
            System.out.println("About to run #(12, 3): r.random(-31415926L, -31415926.1).optArg('float', true).do_(x -> r.and(x.le(-31415926L), x.gt(-31415926.1)))");
            Object obtained = runOrCatch(r.random(-31415926L, -31415926.1).optArg("float", true).do_(x -> r.and(x.le(-31415926L), x.gt(-31415926.1))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(12, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(12, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(12, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(13, 1)
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([r.random(), r.random()]).distinct().count() */
            System.out.println("About to run #(13, 1): r.expr(r.array(r.random(), r.random())).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(r.random(), r.random())).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(13, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(13, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(13, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(13, 2)
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([r.random(1, float=True), r.random(1, float=True)]).distinct().count() */
            System.out.println("About to run #(13, 2): r.expr(r.array(r.random(1L).optArg('float', true), r.random(1L).optArg('float', true))).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(r.random(1L).optArg("float", true), r.random(1L).optArg("float", true))).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(13, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(13, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(13, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(13, 3)
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([r.random(0, 1, float=True), r.random(0, 1, float=True)]).distinct().count() */
            System.out.println("About to run #(13, 3): r.expr(r.array(r.random(0L, 1L).optArg('float', true), r.random(0L, 1L).optArg('float', true))).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(r.random(0L, 1L).optArg("float", true), r.random(0L, 1L).optArg("float", true))).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(13, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(13, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(13, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(14, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(0, float=True).eq(0) */
            System.out.println("About to run #(14, 1): r.random(0L).optArg('float', true).eq(0L)");
            Object obtained = runOrCatch(r.random(0L).optArg("float", true).eq(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(14, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(14, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(14, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(14, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(5, 5, float=True).eq(5) */
            System.out.println("About to run #(14, 2): r.random(5L, 5L).optArg('float', true).eq(5L)");
            Object obtained = runOrCatch(r.random(5L, 5L).optArg("float", true).eq(5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(14, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(14, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(14, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(14, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(-499384756758, -499384756758, float=True).eq(-499384756758) */
            System.out.println("About to run #(14, 3): r.random(-499384756758L, -499384756758L).optArg('float', true).eq(-499384756758L)");
            Object obtained = runOrCatch(r.random(-499384756758L, -499384756758L).optArg("float", true).eq(-499384756758L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(14, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(14, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(14, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(14, 4)
            /* True */
            Boolean expected_ = true;
            /* r.random(-93.94757, -93.94757, float=True).eq(-93.94757) */
            System.out.println("About to run #(14, 4): r.random(-93.94757, -93.94757).optArg('float', true).eq(-93.94757)");
            Object obtained = runOrCatch(r.random(-93.94757, -93.94757).optArg("float", true).eq(-93.94757),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(14, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(14, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(14, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(14, 5)
            /* True */
            Boolean expected_ = true;
            /* r.random(294.69148, 294.69148, float=True).eq(294.69148) */
            System.out.println("About to run #(14, 5): r.random(294.69148, 294.69148).optArg('float', true).eq(294.69148)");
            Object obtained = runOrCatch(r.random(294.69148, 294.69148).optArg("float", true).eq(294.69148),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(14, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(14, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(14, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // random.yaml #15
        // float_max = sys.float_info.max
        System.out.println("Possibly executing: Double float_max = (Double) (sys.floatInfo.max);");
        Double float_max = (Double) (sys.floatInfo.max);
                
        // random.yaml #16
        // float_min = sys.float_info.min
        System.out.println("Possibly executing: Double float_min = (Double) (sys.floatInfo.min);");
        Double float_min = (Double) (sys.floatInfo.min);
                
        {
            // random.yaml #(17, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(-float_max, float_max, float=True).do(lambda x:r.and_(x.ge(-float_max), x.lt(float_max))) */
            System.out.println("About to run #(17, 1): r.random(-float_max, float_max).optArg('float', true).do_(x -> r.and(x.ge(-float_max), x.lt(float_max)))");
            Object obtained = runOrCatch(r.random(-float_max, float_max).optArg("float", true).do_(x -> r.and(x.ge(-float_max), x.lt(float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(17, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(float_max, -float_max, float=True).do(lambda x:r.and_(x.le(float_max), x.gt(-float_max))) */
            System.out.println("About to run #(17, 2): r.random(float_max, -float_max).optArg('float', true).do_(x -> r.and(x.le(float_max), x.gt(-float_max)))");
            Object obtained = runOrCatch(r.random(float_max, -float_max).optArg("float", true).do_(x -> r.and(x.le(float_max), x.gt(-float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(17, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(float_min, float_max, float=True).do(lambda x:r.and_(x.ge(float_min), x.lt(float_max))) */
            System.out.println("About to run #(17, 3): r.random(float_min, float_max).optArg('float', true).do_(x -> r.and(x.ge(float_min), x.lt(float_max)))");
            Object obtained = runOrCatch(r.random(float_min, float_max).optArg("float", true).do_(x -> r.and(x.ge(float_min), x.lt(float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(17, 4)
            /* True */
            Boolean expected_ = true;
            /* r.random(float_min, -float_max, float=True).do(lambda x:r.and_(x.le(float_min), x.gt(-float_max))) */
            System.out.println("About to run #(17, 4): r.random(float_min, -float_max).optArg('float', true).do_(x -> r.and(x.le(float_min), x.gt(-float_max)))");
            Object obtained = runOrCatch(r.random(float_min, -float_max).optArg("float", true).do_(x -> r.and(x.le(float_min), x.gt(-float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(17, 5)
            /* True */
            Boolean expected_ = true;
            /* r.random(-float_min, float_max, float=True).do(lambda x:r.and_(x.ge(-float_min), x.lt(float_max))) */
            System.out.println("About to run #(17, 5): r.random(-float_min, float_max).optArg('float', true).do_(x -> r.and(x.ge(-float_min), x.lt(float_max)))");
            Object obtained = runOrCatch(r.random(-float_min, float_max).optArg("float", true).do_(x -> r.and(x.ge(-float_min), x.lt(float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(17, 6)
            /* True */
            Boolean expected_ = true;
            /* r.random(-float_min, -float_max, float=True).do(lambda x:r.and_(x.le(-float_min), x.gt(-float_max))) */
            System.out.println("About to run #(17, 6): r.random(-float_min, -float_max).optArg('float', true).do_(x -> r.and(x.le(-float_min), x.gt(-float_max)))");
            Object obtained = runOrCatch(r.random(-float_min, -float_max).optArg("float", true).do_(x -> r.and(x.le(-float_min), x.gt(-float_max))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(17, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(17, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(17, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // random.yaml #18
        // upper_limit = 2**53 - 1
        System.out.println("Possibly executing: Long upper_limit = (Long) (2L << 53L - 1L);");
        Long upper_limit = (Long) (2L << 53L - 1L);
                
        // random.yaml #19
        // lower_limit = 1 - (2**53)
        System.out.println("Possibly executing: Long lower_limit = (Long) (1L - 2L << 53L);");
        Long lower_limit = (Long) (1L - 2L << 53L);
                
        {
            // random.yaml #(20, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(256).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 1): r.random(256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(256L).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(20, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(0, 256).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 2): r.random(0L, 256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(0L, 256L).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(20, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 3): r.random(r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(20, 4)
            /* True */
            Boolean expected_ = true;
            /* r.random(r.expr(0), 256).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 4): r.random(r.expr(0L), 256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(r.expr(0L), 256L).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(20, 5)
            /* True */
            Boolean expected_ = true;
            /* r.random(0, r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 5): r.random(0L, r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(0L, r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(20, 6)
            /* True */
            Boolean expected_ = true;
            /* r.random(r.expr(0), r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256))) */
            System.out.println("About to run #(20, 6): r.random(r.expr(0L), r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))");
            Object obtained = runOrCatch(r.random(r.expr(0L), r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(21, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(10, 20).do(lambda x:r.and_(x.ge(10), x.lt(20))) */
            System.out.println("About to run #(21, 1): r.random(10L, 20L).do_(x -> r.and(x.ge(10L), x.lt(20L)))");
            Object obtained = runOrCatch(r.random(10L, 20L).do_(x -> r.and(x.ge(10L), x.lt(20L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(21, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(21, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(21, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(21, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(9347849, 120937493).do(lambda x:r.and_(x.ge(9347849), x.lt(120937493))) */
            System.out.println("About to run #(21, 2): r.random(9347849L, 120937493L).do_(x -> r.and(x.ge(9347849L), x.lt(120937493L)))");
            Object obtained = runOrCatch(r.random(9347849L, 120937493L).do_(x -> r.and(x.ge(9347849L), x.lt(120937493L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(21, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(21, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(21, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(22, 1)
            /* True */
            Boolean expected_ = true;
            /* r.random(-10, 20).do(lambda x:r.and_(x.ge(-10), x.lt(20))) */
            System.out.println("About to run #(22, 1): r.random(-10L, 20L).do_(x -> r.and(x.ge(-10L), x.lt(20L)))");
            Object obtained = runOrCatch(r.random(-10L, 20L).do_(x -> r.and(x.ge(-10L), x.lt(20L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(22, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(22, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(22, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(22, 2)
            /* True */
            Boolean expected_ = true;
            /* r.random(-20, -10).do(lambda x:r.and_(x.ge(-20), x.lt(-10))) */
            System.out.println("About to run #(22, 2): r.random(-20L, -10L).do_(x -> r.and(x.ge(-20L), x.lt(-10L)))");
            Object obtained = runOrCatch(r.random(-20L, -10L).do_(x -> r.and(x.ge(-20L), x.lt(-10L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(22, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(22, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(22, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #(22, 3)
            /* True */
            Boolean expected_ = true;
            /* r.random(-120937493, -9347849).do(lambda x:r.and_(x.ge(-120937493), x.lt(-9347849))) */
            System.out.println("About to run #(22, 3): r.random(-120937493L, -9347849L).do_(x -> r.and(x.ge(-120937493L), x.lt(-9347849L)))");
            Object obtained = runOrCatch(r.random(-120937493L, -9347849L).do_(x -> r.and(x.ge(-120937493L), x.lt(-9347849L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(22, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(22, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(22, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #23
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([r.random(upper_limit), r.random(upper_limit)]).distinct().count() */
            System.out.println("About to run #23: r.expr(r.array(r.random(upper_limit), r.random(upper_limit))).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(r.random(upper_limit), r.random(upper_limit))).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #24
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([upper_limit,upper_limit]).map(lambda x:r.random(x)).distinct().count() */
            System.out.println("About to run #24: r.expr(r.array(upper_limit, upper_limit)).map(x -> r.random(x)).distinct().count()");
            Object obtained = runOrCatch(r.expr(r.array(upper_limit, upper_limit)).map(x -> r.random(x)).distinct().count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #25
            /* err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", r.array());
            /* r.random(-0.5) */
            System.out.println("About to run #25: r.random(-0.5)");
            Object obtained = runOrCatch(r.random(-0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #26
            /* err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", r.array());
            /* r.random(0.25) */
            System.out.println("About to run #26: r.random(0.25)");
            Object obtained = runOrCatch(r.random(0.25),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #27
            /* err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", r.array());
            /* r.random(-10, 0.75) */
            System.out.println("About to run #27: r.random(-10L, 0.75)");
            Object obtained = runOrCatch(r.random(-10L, 0.75),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #28
            /* err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", r.array());
            /* r.random(-120549.25, 39458) */
            System.out.println("About to run #28: r.random(-120549.25, 39458L)");
            Object obtained = runOrCatch(r.random(-120549.25, 39458L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #29
            /* err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", r.array());
            /* r.random(-6.5, 8.125) */
            System.out.println("About to run #29: r.random(-6.5, 8.125)");
            Object obtained = runOrCatch(r.random(-6.5, 8.125),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #30
            /* err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", r.array());
            /* r.random(float=False) */
            System.out.println("About to run #30: r.random().optArg('float', false)");
            Object obtained = runOrCatch(r.random().optArg("float", false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #31
            /* err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array());
            /* r.random(0) */
            System.out.println("About to run #31: r.random(0L)");
            Object obtained = runOrCatch(r.random(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #32
            /* err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array());
            /* r.random(0, 0) */
            System.out.println("About to run #32: r.random(0L, 0L)");
            Object obtained = runOrCatch(r.random(0L, 0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #33
            /* err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", r.array());
            /* r.random(515, 515) */
            System.out.println("About to run #33: r.random(515L, 515L)");
            Object obtained = runOrCatch(r.random(515L, 515L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #34
            /* err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", r.array());
            /* r.random(-956, -956) */
            System.out.println("About to run #34: r.random(-956L, -956L)");
            Object obtained = runOrCatch(r.random(-956L, -956L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #35
            /* err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", r.array());
            /* r.random(-10) */
            System.out.println("About to run #35: r.random(-10L)");
            Object obtained = runOrCatch(r.random(-10L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #36
            /* err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", r.array());
            /* r.random(20, 2) */
            System.out.println("About to run #36: r.random(20L, 2L)");
            Object obtained = runOrCatch(r.random(20L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #37
            /* err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", r.array());
            /* r.random(2, -20) */
            System.out.println("About to run #37: r.random(2L, -20L)");
            Object obtained = runOrCatch(r.random(2L, -20L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // random.yaml #38
            /* err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", []) */
            Err expected_ = err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", r.array());
            /* r.random(1456, 0) */
            System.out.println("About to run #38: r.random(1456L, 0L)");
            Object obtained = runOrCatch(r.random(1456L, 0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
