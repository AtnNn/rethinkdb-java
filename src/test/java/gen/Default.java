// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class Default {
    Logger logger = LoggerFactory.getLogger(Default.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // default.yaml #1
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(2) */
            System.out.println("About to run #1: r.expr(1L).default_(2L)");
            Object obtained = runOrCatch(r.expr(1L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #2
            /* 2 */
            Long expected_ = 2L;
            /* r.expr(null).default(2) */
            System.out.println("About to run #2: r.expr((ReqlExpr) null).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #3
            /* 2 */
            Long expected_ = 2L;
            /* r.expr({})['b'].default(2) */
            System.out.println("About to run #3: r.expr(r.hashMap()).bracket('b').default_(2L)");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #4
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr(r.expr('a')['b']).default(2) */
            System.out.println("About to run #4: r.expr(r.expr('a').bracket('b')).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.expr("a").bracket("b")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #5
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([]).reduce(lambda a,b:a+b).default(2) */
            System.out.println("About to run #5: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #6
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(2) */
            System.out.println("About to run #6: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #7
            /* err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", r.array());
            /* r.expr('a').reduce(lambda a,b:a+b).default(2) */
            System.out.println("About to run #7: r.expr('a').reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #8
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(null) + 5).default(2) */
            System.out.println("About to run #8: r.expr((ReqlExpr) null).add(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #9
            /* 2 */
            Long expected_ = 2L;
            /* (5 + r.expr(null)).default(2) */
            System.out.println("About to run #9: r.add(5L, r.expr((ReqlExpr) null)).default_(2L)");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #10
            /* 2 */
            Long expected_ = 2L;
            /* (5 - r.expr(null)).default(2) */
            System.out.println("About to run #10: r.sub(5L, r.expr((ReqlExpr) null)).default_(2L)");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #11
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(null) - 5).default(2) */
            System.out.println("About to run #11: r.expr((ReqlExpr) null).sub(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #12
            /* err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array());
            /* (r.expr('a') + 5).default(2) */
            System.out.println("About to run #12: r.expr('a').add(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").add(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #13
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (5 + r.expr('a')).default(2) */
            System.out.println("About to run #13: r.add(5L, r.expr('a')).default_(2L)");
            Object obtained = runOrCatch(r.add(5L, r.expr("a")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #14
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (r.expr('a') - 5).default(2) */
            System.out.println("About to run #14: r.expr('a').sub(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").sub(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #15
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (5 - r.expr('a')).default(2) */
            System.out.println("About to run #15: r.sub(5L, r.expr('a')).default_(2L)");
            Object obtained = runOrCatch(r.sub(5L, r.expr("a")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #16
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(r.error()) */
            System.out.println("About to run #16: r.expr(1L).default_(r.error())");
            Object obtained = runOrCatch(r.expr(1L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #17
            /* (null) */
            Object expected_ = null;
            /* r.expr(null).default(r.error()) */
            System.out.println("About to run #17: r.expr((ReqlExpr) null).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #18
            /* err("ReqlNonExistenceError", "No attribute `b` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `b` in object:", r.array());
            /* r.expr({})['b'].default(r.error()) */
            System.out.println("About to run #18: r.expr(r.hashMap()).bracket('b').default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #19
            /* err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array());
            /* r.expr([]).reduce(lambda a,b:a+b).default(r.error) */
            System.out.println("About to run #19: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #20
            /* err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array());
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(r.error) */
            System.out.println("About to run #20: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #21
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (r.expr(null) + 5).default(r.error) */
            System.out.println("About to run #21: r.expr((ReqlExpr) null).add(5L).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #22
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (5 + r.expr(null)).default(r.error) */
            System.out.println("About to run #22: r.add(5L, r.expr((ReqlExpr) null)).default_(r.error())");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #23
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (5 - r.expr(null)).default(r.error) */
            System.out.println("About to run #23: r.sub(5L, r.expr((ReqlExpr) null)).default_(r.error())");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #24
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (r.expr(null) - 5).default(r.error) */
            System.out.println("About to run #24: r.expr((ReqlExpr) null).sub(5L).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #25
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(lambda e:e) */
            System.out.println("About to run #25: r.expr(1L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(1L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #26
            /* (null) */
            Object expected_ = null;
            /* r.expr(null).default(lambda e:e) */
            System.out.println("About to run #26: r.expr((ReqlExpr) null).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #27
            /* ("No attribute `b` in object:\n{}") */
            String expected_ = "No attribute `b` in object:\n{}";
            /* r.expr({})['b'].default(lambda e:e) */
            System.out.println("About to run #27: r.expr(r.hashMap()).bracket('b').default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #28
            /* ("Cannot reduce over an empty stream.") */
            String expected_ = "Cannot reduce over an empty stream.";
            /* r.expr([]).reduce(lambda a,b:a+b).default(lambda e:e) */
            System.out.println("About to run #28: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #29
            /* ("Cannot reduce over an empty stream.") */
            String expected_ = "Cannot reduce over an empty stream.";
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(lambda e:e) */
            System.out.println("About to run #29: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #30
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (r.expr(null) + 5).default(lambda e:e) */
            System.out.println("About to run #30: r.expr((ReqlExpr) null).add(5L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #31
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (5 + r.expr(null)).default(lambda e:e) */
            System.out.println("About to run #31: r.add(5L, r.expr((ReqlExpr) null)).default_(e -> e)");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #32
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (5 - r.expr(null)).default(lambda e:e) */
            System.out.println("About to run #32: r.sub(5L, r.expr((ReqlExpr) null)).default_(e -> e)");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #33
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (r.expr(null) - 5).default(lambda e:e) */
            System.out.println("About to run #33: r.expr((ReqlExpr) null).sub(5L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // default.yaml #34
        // arr = r.expr([{'a':1},{'a':null},{}]).order_by('a')
        System.out.println("Possibly executing: OrderBy arr = (OrderBy) (r.expr(r.array(r.hashMap('a', 1L), r.hashMap('a', null), r.hashMap())).orderBy('a'));");
        OrderBy arr = (OrderBy) (r.expr(r.array(r.hashMap("a", 1L), r.hashMap("a", null), r.hashMap())).orderBy("a"));
                
        {
            // default.yaml #35
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1)) */
            System.out.println("About to run #35: arr.filter(x -> x.bracket('a').eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #36
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=False) */
            System.out.println("About to run #36: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', false)");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #37
            /* [{}, {'a': 1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=True) */
            System.out.println("About to run #37: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', true)");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #38
            /* [{}, {'a': 1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=r.js('true')) */
            System.out.println("About to run #38: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.js('true'))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("true")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #39
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=r.js('false')) */
            System.out.println("About to run #39: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.js('false'))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("false")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #40
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* arr.filter(lambda x:x['a'].eq(1), default=r.error()) */
            System.out.println("About to run #40: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.error())");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #41
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(False).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)) */
            System.out.println("About to run #41: r.expr(false).do_(d -> arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', d))");
            Object obtained = runOrCatch(r.expr(false).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #42
            /* [{}, {'a': 1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* r.expr(True).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)).order_by('a') */
            System.out.println("About to run #42: r.expr(true).do_(d -> arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', d)).orderBy('a')");
            Object obtained = runOrCatch(r.expr(true).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #43
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(0).eq(1)) */
            System.out.println("About to run #43: arr.filter(x -> x.bracket('a').default_(0L).eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(0L).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #44
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(1).eq(1)).order_by('a') */
            System.out.println("About to run #44: arr.filter(x -> x.bracket('a').default_(1L).eq(1L)).orderBy('a')");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #45
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(r.error()).eq(1)) */
            System.out.println("About to run #45: arr.filter(x -> x.bracket('a').default_(r.error()).eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(r.error()).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #46
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(0).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))) */
            System.out.println("About to run #46: r.expr(0L).do_(i -> arr.filter(x -> x.bracket('a').default_(i).eq(1L)))");
            Object obtained = runOrCatch(r.expr(0L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #47
            /* ([{},{'a':null},{'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* r.expr(1).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))).order_by('a') */
            System.out.println("About to run #47: r.expr(1L).do_(i -> arr.filter(x -> x.bracket('a').default_(i).eq(1L))).orderBy('a')");
            Object obtained = runOrCatch(r.expr(1L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #48
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2))) */
            System.out.println("About to run #48: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L)))");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #49
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False) */
            System.out.println("About to run #49: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', false)");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #50
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a') */
            System.out.println("About to run #50: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', true).orderBy('a')");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #51
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error()) */
            System.out.println("About to run #51: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', r.error())");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #51");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #51");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #52
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.table_create('default_test') */
            System.out.println("About to run #52: r.tableCreate('default_test')");
            Object obtained = runOrCatch(r.tableCreate("default_test"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #52");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #52");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #53
            /* ({'deleted':0,'replaced':0,'generated_keys':arrlen(3,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':3}) */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(3L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 3L);
            /* r.table('default_test').insert(arr) */
            System.out.println("About to run #53: r.table('default_test').insert(arr)");
            Object obtained = runOrCatch(r.table("default_test").insert(arr),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #53");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #53");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // default.yaml #54
        // tbl = r.table('default_test').order_by('a').pluck('a')
        System.out.println("Possibly executing: Pluck tbl = (Pluck) (r.table('default_test').orderBy('a').pluck('a'));");
        Pluck tbl = (Pluck) (r.table("default_test").orderBy("a").pluck("a"));
                
        {
            // default.yaml #55
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1)) */
            System.out.println("About to run #55: tbl.filter(x -> x.bracket('a').eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #55");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #55");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #56
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1), default=False) */
            System.out.println("About to run #56: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', false)");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #56");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #56");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #57
            /* [{}, {'a': 1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1), default=True) */
            System.out.println("About to run #57: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', true)");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #57");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #57");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #58
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* tbl.filter(lambda x:x['a'].eq(1), default=r.error()) */
            System.out.println("About to run #58: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.error())");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #58");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #58");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #59
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(False).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)) */
            System.out.println("About to run #59: r.expr(false).do_(d -> tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', d))");
            Object obtained = runOrCatch(r.expr(false).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #59");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #59");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #60
            /* [{}, {'a': 1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* r.expr(True).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)).order_by('a') */
            System.out.println("About to run #60: r.expr(true).do_(d -> tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', d)).orderBy('a')");
            Object obtained = runOrCatch(r.expr(true).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #60");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #60");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #61
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(0).eq(1)) */
            System.out.println("About to run #61: tbl.filter(x -> x.bracket('a').default_(0L).eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(0L).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #61");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #61");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #62
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(1).eq(1)).order_by('a') */
            System.out.println("About to run #62: tbl.filter(x -> x.bracket('a').default_(1L).eq(1L)).orderBy('a')");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #62");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #62");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #63
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(r.error()).eq(1)) */
            System.out.println("About to run #63: tbl.filter(x -> x.bracket('a').default_(r.error()).eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(r.error()).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #63");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #63");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #64
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(0).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))) */
            System.out.println("About to run #64: r.expr(0L).do_(i -> tbl.filter(x -> x.bracket('a').default_(i).eq(1L)))");
            Object obtained = runOrCatch(r.expr(0L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #64");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #64");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #65
            /* ([{},{'a':null},{'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* r.expr(1).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))).order_by('a') */
            System.out.println("About to run #65: r.expr(1L).do_(i -> tbl.filter(x -> x.bracket('a').default_(i).eq(1L))).orderBy('a')");
            Object obtained = runOrCatch(r.expr(1L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #65");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #65");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #66
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2))) */
            System.out.println("About to run #66: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L)))");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #66");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #66");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #67
            /* [{'a': 1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False) */
            System.out.println("About to run #67: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', false)");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #67");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #67");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #68
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a') */
            System.out.println("About to run #68: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', true).orderBy('a')");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #68");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #68");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #69
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error()) */
            System.out.println("About to run #69: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', r.error())");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #69");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #69");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // default.yaml #70
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.table_drop('default_test') */
            System.out.println("About to run #70: r.tableDrop('default_test')");
            Object obtained = runOrCatch(r.tableDrop("default_test"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #70");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #70");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
