// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class TimesIndex {
    Logger logger = LoggerFactory.getLogger(TimesIndex.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // times/index.yaml #1
        // ts={"timezone":"-07:00","epoch_time":1375445162.0872,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map ts = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445162.0872).with('$reql_type$', 'TIME'));");
        Map ts = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445162.0872).with("$reql_type$", "TIME"));
                
        // times/index.yaml #2
        // t1={"timezone":"-07:00","epoch_time":1375445163.0872,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map t1 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.0872).with('$reql_type$', 'TIME'));");
        Map t1 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.0872).with("$reql_type$", "TIME"));
                
        // times/index.yaml #3
        // t2={"timezone":"-07:00","epoch_time":1375445163.08832,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map t2 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.08832).with('$reql_type$', 'TIME'));");
        Map t2 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.08832).with("$reql_type$", "TIME"));
                
        // times/index.yaml #4
        // t3={"timezone":"-07:00","epoch_time":1375445163.08943,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map t3 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.08943).with('$reql_type$', 'TIME'));");
        Map t3 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.08943).with("$reql_type$", "TIME"));
                
        // times/index.yaml #5
        // t4={"timezone":"-07:00","epoch_time":1375445163.09055,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map t4 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.09055).with('$reql_type$', 'TIME'));");
        Map t4 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.09055).with("$reql_type$", "TIME"));
                
        // times/index.yaml #6
        // t5={"timezone":"-07:00","epoch_time":1375445163.09166,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map t5 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.09166).with('$reql_type$', 'TIME'));");
        Map t5 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.09166).with("$reql_type$", "TIME"));
                
        // times/index.yaml #7
        // te={"timezone":"-07:00","epoch_time":1375445164.0872,"$reql_type$":"TIME"}
        System.out.println("Possibly executing: Map te = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445164.0872).with('$reql_type$', 'TIME'));");
        Map te = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445164.0872).with("$reql_type$", "TIME"));
                
        // times/index.yaml #8
        // trows = [{'id':t1}, {'id':t2}, {'id':t3}, {'id':t4}, {'id':t5}]
        System.out.println("Possibly executing: List trows = (List) (r.array(r.hashMap('id', t1), r.hashMap('id', t2), r.hashMap('id', t3), r.hashMap('id', t4), r.hashMap('id', t5)));");
        List trows = (List) (r.array(r.hashMap("id", t1), r.hashMap("id", t2), r.hashMap("id", t3), r.hashMap("id", t4), r.hashMap("id", t5)));
                
        {
            // times/index.yaml #9
            /* 5 */
            Long expected_ = 5L;
            /* tbl.insert(trows)['inserted'] */
            System.out.println("About to run #9: tbl.insert(trows).bracket('inserted')");
            Object obtained = runOrCatch(tbl.insert(trows).bracket("inserted"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // times/index.yaml #10
        // bad_insert = [{'id':r.expr(t1).in_timezone("Z")}]
        System.out.println("Possibly executing: List bad_insert = (List) (r.array(r.hashMap('id', r.expr(t1).inTimezone('Z'))));");
        List bad_insert = (List) (r.array(r.hashMap("id", r.expr(t1).inTimezone("Z"))));
                
        {
            // times/index.yaml #11
            /* ("Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}") */
            String expected_ = "Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}";
            /* tbl.insert(bad_insert)['first_error'] */
            System.out.println("About to run #11: tbl.insert(bad_insert).bracket('first_error')");
            Object obtained = runOrCatch(tbl.insert(bad_insert).bracket("first_error"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #12
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(ts, te).count() */
            System.out.println("About to run #12: tbl.between(ts, te).count()");
            Object obtained = runOrCatch(tbl.between(ts, te).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #13
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4).count() */
            System.out.println("About to run #13: tbl.between(t1, t4).count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #14
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(t1, t4, right_bound='closed').count() */
            System.out.println("About to run #14: tbl.between(t1, t4).optArg('right_bound', 'closed').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #15
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te).count() */
            System.out.println("About to run #15: tbl.between(r.expr(ts).inTimezone('+06:00'), te).count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #16
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00")).count() */
            System.out.println("About to run #16: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #17
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed').count() */
            System.out.println("About to run #17: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #18
            /* 5 */
            Long expected_ = 5L;
            /* tbl.update(lambda row:{'a':row['id']})['replaced'] */
            System.out.println("About to run #18: tbl.update(row -> r.hashMap('a', row.bracket('id'))).bracket('replaced')");
            Object obtained = runOrCatch(tbl.update(row -> r.hashMap("a", row.bracket("id"))).bracket("replaced"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #19
            /* ({'created':1}) */
            Map expected_ = r.hashMap("created", 1L);
            /* tbl.index_create('a') */
            System.out.println("About to run #19: tbl.indexCreate('a')");
            Object obtained = runOrCatch(tbl.indexCreate("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #20
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('a').count() */
            System.out.println("About to run #20: tbl.indexWait('a').count()");
            Object obtained = runOrCatch(tbl.indexWait("a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #21
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(ts, te, index='a').count() */
            System.out.println("About to run #21: tbl.between(ts, te).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(ts, te).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #22
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, index='a').count() */
            System.out.println("About to run #22: tbl.between(t1, t4).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #23
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(t1, t4, right_bound='closed', index='a').count() */
            System.out.println("About to run #23: tbl.between(t1, t4).optArg('right_bound', 'closed').optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #24
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='a').count() */
            System.out.println("About to run #24: tbl.between(r.expr(ts).inTimezone('+06:00'), te).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #25
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='a').count() */
            System.out.println("About to run #25: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #26
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='a').count() */
            System.out.println("About to run #26: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #27
            /* ({'created':1}) */
            Map expected_ = r.hashMap("created", 1L);
            /* tbl.index_create('b', lambda row:r.branch(row['id'] < t4, row['a'], null)) */
            System.out.println("About to run #27: tbl.indexCreate('b', row -> r.branch(row.bracket('id').lt(t4), row.bracket('a'), (ReqlExpr) null))");
            Object obtained = runOrCatch(tbl.indexCreate("b", row -> r.branch(row.bracket("id").lt(t4), row.bracket("a"), (ReqlExpr) null)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #28
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('b').count() */
            System.out.println("About to run #28: tbl.indexWait('b').count()");
            Object obtained = runOrCatch(tbl.indexWait("b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #29
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('b').count() */
            System.out.println("About to run #29: tbl.indexWait('b').count()");
            Object obtained = runOrCatch(tbl.indexWait("b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #30
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(ts, te, index='b').count() */
            System.out.println("About to run #30: tbl.between(ts, te).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(ts, te).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #31
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, index='b').count() */
            System.out.println("About to run #31: tbl.between(t1, t4).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #32
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, right_bound='closed', index='b').count() */
            System.out.println("About to run #32: tbl.between(t1, t4).optArg('right_bound', 'closed').optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #33
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='b').count() */
            System.out.println("About to run #33: tbl.between(r.expr(ts).inTimezone('+06:00'), te).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #34
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='b').count() */
            System.out.println("About to run #34: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #35
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='b').count() */
            System.out.println("About to run #35: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // times/index.yaml #36
        // oldtime = datetime.fromtimestamp(1375147296.681, PacificTimeZone())
        System.out.println("Possibly executing: OffsetDateTime oldtime = (OffsetDateTime) (datetime.fromtimestamp(1375147296.681, PacificTimeZone()));");
        OffsetDateTime oldtime = (OffsetDateTime) (datetime.fromtimestamp(1375147296.681, PacificTimeZone()));
                
        // times/index.yaml #37
        // curtime = datetime.now()
        System.out.println("Possibly executing: OffsetDateTime curtime = (OffsetDateTime) (datetime.now());");
        OffsetDateTime curtime = (OffsetDateTime) (datetime.now());
                
        {
            // times/index.yaml #38
            /* 1 */
            Long expected_ = 1L;
            /* tbl.insert([{'id':oldtime}])['inserted'] */
            System.out.println("About to run #38: tbl.insert(r.array(r.hashMap('id', oldtime))).bracket('inserted')");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", oldtime))).bracket("inserted"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/index.yaml #39
            /* ("PTYPE<TIME>") */
            String expected_ = "PTYPE<TIME>";
            /* tbl.get(oldtime)['id'].type_of() */
            System.out.println("About to run #39: tbl.get(oldtime).bracket('id').typeOf()");
            Object obtained = runOrCatch(tbl.get(oldtime).bracket("id").typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
