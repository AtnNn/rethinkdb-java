// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class DatumObject {
    Logger logger = LoggerFactory.getLogger(DatumObject.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // datum/object.yaml #1
            /* ({}) */
            Map expected_ = r.hashMap();
            /* r.expr({}) */
            System.out.println("About to run #1: r.expr(r.hashMap())");
            Object obtained = runOrCatch(r.expr(r.hashMap()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #2
            /* {'a':1} */
            Map expected_ = r.hashMap("a", 1L);
            /* r.expr({'a':1}) */
            System.out.println("About to run #2: r.expr(r.hashMap('a', 1L))");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #3
            /* {'a':1, 'b':'two', 'c':True} */
            Map expected_ = r.hashMap("a", 1L).with("b", "two").with("c", true);
            /* r.expr({'a':1, 'b':'two', 'c':True}) */
            System.out.println("About to run #3: r.expr(r.hashMap('a', 1L).with('b', 'two').with('c', true))");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L).with("b", "two").with("c", true)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #4
            /* ({'a':1}) */
            Map expected_ = r.hashMap("a", 1L);
            /* r.expr({'a':r.expr(1)}) */
            System.out.println("About to run #4: r.expr(r.hashMap('a', r.expr(1L)))");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", r.expr(1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #5
            /* ({'a':{'b':[{'c':2}, 'a', 4]}}) */
            Map expected_ = r.hashMap("a", r.hashMap("b", r.array(r.hashMap("c", 2L), "a", 4L)));
            /* r.expr({'a':{'b':[{'c':2}, 'a', 4]}}) */
            System.out.println("About to run #5: r.expr(r.hashMap('a', r.hashMap('b', r.array(r.hashMap('c', 2L), 'a', 4L))))");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", r.hashMap("b", r.array(r.hashMap("c", 2L), "a", 4L)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #6
            /* 'OBJECT' */
            String expected_ = "OBJECT";
            /* r.expr({'a':1}).type_of() */
            System.out.println("About to run #6: r.expr(r.hashMap('a', 1L)).typeOf()");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L)).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #7
            /* ('{"a":1}') */
            String expected_ = "{\"a\":1}";
            /* r.expr({'a':1}).coerce_to('string') */
            System.out.println("About to run #7: r.expr(r.hashMap('a', 1L)).coerceTo('string')");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L)).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #8
            /* ({'a':1}) */
            Map expected_ = r.hashMap("a", 1L);
            /* r.expr({'a':1}).coerce_to('object') */
            System.out.println("About to run #8: r.expr(r.hashMap('a', 1L)).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L)).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #9
            /* [['a', 1]] */
            List expected_ = r.array(r.array("a", 1L));
            /* r.expr({'a':1}).coerce_to('array') */
            System.out.println("About to run #9: r.expr(r.hashMap('a', 1L)).coerceTo('array')");
            Object obtained = runOrCatch(r.expr(r.hashMap("a", 1L)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #16
            /* ({}) */
            Map expected_ = r.hashMap();
            /* r.object() */
            System.out.println("About to run #16: r.object()");
            Object obtained = runOrCatch(r.object(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #17
            /* ({'a':1,'b':2}) */
            Map expected_ = r.hashMap("a", 1L).with("b", 2L);
            /* r.object('a', 1, 'b', 2) */
            System.out.println("About to run #17: r.object('a', 1L, 'b', 2L)");
            Object obtained = runOrCatch(r.object("a", 1L, "b", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #18
            /* ({'cd':3}) */
            Map expected_ = r.hashMap("cd", 3L);
            /* r.object('c'+'d', 3) */
            System.out.println("About to run #18: r.object(r.add('c', 'd'), 3L)");
            Object obtained = runOrCatch(r.object(r.add("c", "d"), 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #20
            /* err("ReqlQueryLogicError","Expected type STRING but found NUMBER.",[]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array());
            /* r.object(1, 1) */
            System.out.println("About to run #20: r.object(1L, 1L)");
            Object obtained = runOrCatch(r.object(1L, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #21
            /* err("ReqlQueryLogicError","Duplicate key `e` in object.  (got `4` and `5` as values)",[]) */
            Err expected_ = err("ReqlQueryLogicError", "Duplicate key `e` in object.  (got `4` and `5` as values)", r.array());
            /* r.object('e', 4, 'e', 5) */
            System.out.println("About to run #21: r.object('e', 4L, 'e', 5L)");
            Object obtained = runOrCatch(r.object("e", 4L, "e", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/object.yaml #22
            /* err("ReqlQueryLogicError","Expected type DATUM but found DATABASE:",[]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", r.array());
            /* r.object('g', r.db('test')) */
            System.out.println("About to run #22: r.object('g', r.db('test'))");
            Object obtained = runOrCatch(r.object("g", r.db("test")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
