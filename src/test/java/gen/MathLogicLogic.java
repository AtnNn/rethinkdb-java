// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MathLogicLogic {
    Logger logger = LoggerFactory.getLogger(MathLogicLogic.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // math_logic/logic.yaml #(1, 1)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true) & true */
            System.out.println("About to run #(1, 1): r.expr(true).and(true)");
            Object obtained = runOrCatch(r.expr(true).and(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(1, 2)
            /* True */
            Boolean expected_ = true;
            /* true & r.expr(true) */
            System.out.println("About to run #(1, 2): r.and(true, r.expr(true))");
            Object obtained = runOrCatch(r.and(true, r.expr(true)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(1, 3)
            /* True */
            Boolean expected_ = true;
            /* r.and_(true,true) */
            System.out.println("About to run #(1, 3): r.and(true, true)");
            Object obtained = runOrCatch(r.and(true, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(1, 4)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true).and_(true) */
            System.out.println("About to run #(1, 4): r.expr(true).and(true)");
            Object obtained = runOrCatch(r.expr(true).and(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 1)
            /* False */
            Boolean expected_ = false;
            /* r.expr(true) & false */
            System.out.println("About to run #(2, 1): r.expr(true).and(false)");
            Object obtained = runOrCatch(r.expr(true).and(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 2)
            /* False */
            Boolean expected_ = false;
            /* r.expr(false) & false */
            System.out.println("About to run #(2, 2): r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 3)
            /* False */
            Boolean expected_ = false;
            /* true & r.expr(false) */
            System.out.println("About to run #(2, 3): r.and(true, r.expr(false))");
            Object obtained = runOrCatch(r.and(true, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 4)
            /* False */
            Boolean expected_ = false;
            /* false & r.expr(false) */
            System.out.println("About to run #(2, 4): r.and(false, r.expr(false))");
            Object obtained = runOrCatch(r.and(false, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 5)
            /* False */
            Boolean expected_ = false;
            /* r.and_(true,false) */
            System.out.println("About to run #(2, 5): r.and(true, false)");
            Object obtained = runOrCatch(r.and(true, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 6)
            /* False */
            Boolean expected_ = false;
            /* r.and_(false,false) */
            System.out.println("About to run #(2, 6): r.and(false, false)");
            Object obtained = runOrCatch(r.and(false, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 7)
            /* False */
            Boolean expected_ = false;
            /* r.expr(true).and_(false) */
            System.out.println("About to run #(2, 7): r.expr(true).and(false)");
            Object obtained = runOrCatch(r.expr(true).and(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 7)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 7)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 7):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(2, 8)
            /* False */
            Boolean expected_ = false;
            /* r.expr(false).and_(false) */
            System.out.println("About to run #(2, 8): r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(2, 8)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(2, 8)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(2, 8):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 1)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true) | true */
            System.out.println("About to run #(3, 1): r.expr(true).or(true)");
            Object obtained = runOrCatch(r.expr(true).or(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 2)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true) | false */
            System.out.println("About to run #(3, 2): r.expr(true).or(false)");
            Object obtained = runOrCatch(r.expr(true).or(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 3)
            /* True */
            Boolean expected_ = true;
            /* true | r.expr(true) */
            System.out.println("About to run #(3, 3): r.or(true, r.expr(true))");
            Object obtained = runOrCatch(r.or(true, r.expr(true)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 4)
            /* True */
            Boolean expected_ = true;
            /* true | r.expr(false) */
            System.out.println("About to run #(3, 4): r.or(true, r.expr(false))");
            Object obtained = runOrCatch(r.or(true, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 5)
            /* True */
            Boolean expected_ = true;
            /* r.or_(true,true) */
            System.out.println("About to run #(3, 5): r.or(true, true)");
            Object obtained = runOrCatch(r.or(true, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 5)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 5)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 5):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 6)
            /* True */
            Boolean expected_ = true;
            /* r.or_(true,false) */
            System.out.println("About to run #(3, 6): r.or(true, false)");
            Object obtained = runOrCatch(r.or(true, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 6)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 6)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 6):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 7)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true).or_(true) */
            System.out.println("About to run #(3, 7): r.expr(true).or(true)");
            Object obtained = runOrCatch(r.expr(true).or(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 7)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 7)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 7):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(3, 8)
            /* True */
            Boolean expected_ = true;
            /* r.expr(true).or_(false) */
            System.out.println("About to run #(3, 8): r.expr(true).or(false)");
            Object obtained = runOrCatch(r.expr(true).or(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(3, 8)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(3, 8)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(3, 8):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(4, 1)
            /* False */
            Boolean expected_ = false;
            /* r.expr(false) | false */
            System.out.println("About to run #(4, 1): r.expr(false).or(false)");
            Object obtained = runOrCatch(r.expr(false).or(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(4, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(4, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(4, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(4, 2)
            /* False */
            Boolean expected_ = false;
            /* false | r.expr(false) */
            System.out.println("About to run #(4, 2): r.or(false, r.expr(false))");
            Object obtained = runOrCatch(r.or(false, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(4, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(4, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(4, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(4, 3)
            /* False */
            Boolean expected_ = false;
            /* r.and_(false,false) */
            System.out.println("About to run #(4, 3): r.and(false, false)");
            Object obtained = runOrCatch(r.and(false, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(4, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(4, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(4, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(4, 4)
            /* False */
            Boolean expected_ = false;
            /* r.expr(false).and_(false) */
            System.out.println("About to run #(4, 4): r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(4, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(4, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(4, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(5, 1)
            /* False */
            Boolean expected_ = false;
            /* ~r.expr(True) */
            System.out.println("About to run #(5, 1): r.expr(true).not()");
            Object obtained = runOrCatch(r.expr(true).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(5, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(5, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(5, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(5, 2)
            /* False */
            Boolean expected_ = false;
            /* r.not_(True) */
            System.out.println("About to run #(5, 2): r.not(true)");
            Object obtained = runOrCatch(r.not(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(5, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(5, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(5, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(6, 1)
            /* True */
            Boolean expected_ = true;
            /* ~r.expr(False) */
            System.out.println("About to run #(6, 1): r.expr(false).not()");
            Object obtained = runOrCatch(r.expr(false).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(6, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(6, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(6, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(6, 2)
            /* True */
            Boolean expected_ = true;
            /* r.not_(False) */
            System.out.println("About to run #(6, 2): r.not(false)");
            Object obtained = runOrCatch(r.not(false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(6, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(6, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(6, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #7
            /* False */
            Boolean expected_ = false;
            /* r.expr(True).not_() */
            System.out.println("About to run #7: r.expr(true).not()");
            Object obtained = runOrCatch(r.expr(true).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #8
            /* True */
            Boolean expected_ = true;
            /* r.expr(False).not_() */
            System.out.println("About to run #8: r.expr(false).not()");
            Object obtained = runOrCatch(r.expr(false).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(9, 1)
            /* True */
            Boolean expected_ = true;
            /* ~r.and_(True, True) == r.or_(~r.expr(True), ~r.expr(True)) */
            System.out.println("About to run #(9, 1): r.and(true, true).not().eq(r.or(r.expr(true).not(), r.expr(true).not()))");
            Object obtained = runOrCatch(r.and(true, true).not().eq(r.or(r.expr(true).not(), r.expr(true).not())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(9, 2)
            /* True */
            Boolean expected_ = true;
            /* ~r.and_(True, False) == r.or_(~r.expr(True), ~r.expr(False)) */
            System.out.println("About to run #(9, 2): r.and(true, false).not().eq(r.or(r.expr(true).not(), r.expr(false).not()))");
            Object obtained = runOrCatch(r.and(true, false).not().eq(r.or(r.expr(true).not(), r.expr(false).not())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(9, 3)
            /* True */
            Boolean expected_ = true;
            /* ~r.and_(False, False) == r.or_(~r.expr(False), ~r.expr(False)) */
            System.out.println("About to run #(9, 3): r.and(false, false).not().eq(r.or(r.expr(false).not(), r.expr(false).not()))");
            Object obtained = runOrCatch(r.and(false, false).not().eq(r.or(r.expr(false).not(), r.expr(false).not())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #(9, 4)
            /* True */
            Boolean expected_ = true;
            /* ~r.and_(False, True) == r.or_(~r.expr(False), ~r.expr(True)) */
            System.out.println("About to run #(9, 4): r.and(false, true).not().eq(r.or(r.expr(false).not(), r.expr(true).not()))");
            Object obtained = runOrCatch(r.and(false, true).not().eq(r.or(r.expr(false).not(), r.expr(true).not())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(9, 4)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(9, 4)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(9, 4):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #10
            /* True */
            Boolean expected_ = true;
            /* r.and_(True, True, True, True, True) */
            System.out.println("About to run #10: r.and(true, true, true, true, true)");
            Object obtained = runOrCatch(r.and(true, true, true, true, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #11
            /* False */
            Boolean expected_ = false;
            /* r.and_(True, True, True, False, True) */
            System.out.println("About to run #11: r.and(true, true, true, false, true)");
            Object obtained = runOrCatch(r.and(true, true, true, false, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #12
            /* False */
            Boolean expected_ = false;
            /* r.and_(True, False, True, False, True) */
            System.out.println("About to run #12: r.and(true, false, true, false, true)");
            Object obtained = runOrCatch(r.and(true, false, true, false, true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #13
            /* False */
            Boolean expected_ = false;
            /* r.or_(False, False, False, False, False) */
            System.out.println("About to run #13: r.or(false, false, false, false, false)");
            Object obtained = runOrCatch(r.or(false, false, false, false, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #14
            /* True */
            Boolean expected_ = true;
            /* r.or_(False, False, False, True, False) */
            System.out.println("About to run #14: r.or(false, false, false, true, false)");
            Object obtained = runOrCatch(r.or(false, false, false, true, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #15
            /* True */
            Boolean expected_ = true;
            /* r.or_(False, True, False, True, False) */
            System.out.println("About to run #15: r.or(false, true, false, true, false)");
            Object obtained = runOrCatch(r.or(false, true, false, true, false),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #16
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr(r.expr('a')['b']).default(2) */
            System.out.println("About to run #16: r.expr(r.expr('a').bracket('b')).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.expr("a").bracket("b")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #18
            /* False */
            Boolean expected_ = false;
            /* r.expr(r.and_(True, False) == r.or_(False, True)) */
            System.out.println("About to run #18: r.expr(r.and(true, false).eq(r.or(false, true)))");
            Object obtained = runOrCatch(r.expr(r.and(true, false).eq(r.or(false, true))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #20
            /* False */
            Boolean expected_ = false;
            /* r.expr(r.and_(True, False) >= r.or_(False, True)) */
            System.out.println("About to run #20: r.expr(r.and(true, false).ge(r.or(false, true)))");
            Object obtained = runOrCatch(r.expr(r.and(true, false).ge(r.or(false, true))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #21
            /* True */
            Boolean expected_ = true;
            /* r.expr(1) & True */
            System.out.println("About to run #21: r.expr(1L).and(true)");
            Object obtained = runOrCatch(r.expr(1L).and(true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #22
            /* ("str") */
            String expected_ = "str";
            /* r.expr(False) | 'str' */
            System.out.println("About to run #22: r.expr(false).or('str')");
            Object obtained = runOrCatch(r.expr(false).or("str"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #23
            /* False */
            Boolean expected_ = false;
            /* ~r.expr(1) */
            System.out.println("About to run #23: r.expr(1L).not()");
            Object obtained = runOrCatch(r.expr(1L).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/logic.yaml #24
            /* True */
            Boolean expected_ = true;
            /* ~r.expr(null) */
            System.out.println("About to run #24: r.expr((ReqlExpr) null).not()");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).not(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
