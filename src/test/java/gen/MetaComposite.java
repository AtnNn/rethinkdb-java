// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MetaComposite {
    Logger logger = LoggerFactory.getLogger(MetaComposite.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // meta/composite.yaml #1
            /* partial({'dbs_dropped':1}) */
            Partial expected_ = partial(r.hashMap("dbs_dropped", 1L));
            /* r.db_drop('test') */
            System.out.println("About to run #1: r.dbDrop('test')");
            Object obtained = runOrCatch(r.dbDrop("test"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/composite.yaml #2
            /* ({'dbs_created':3,'config_changes':arrlen(3)}) */
            Map expected_ = r.hashMap("dbs_created", 3L).with("config_changes", arrlen(3L));
            /* r.expr([1,2,3]).for_each(lambda row:
    r.db_create('db_' + row.coerce_to('string')))
 */
            System.out.println("About to run #2: r.expr(r.array(1L, 2L, 3L)).forEach(row -> r.dbCreate(r.add('db_', row.coerceTo('string'))))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).forEach(row -> r.dbCreate(r.add("db_", row.coerceTo("string")))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/composite.yaml #3
            /* partial({'tables_created':9}) */
            Partial expected_ = partial(r.hashMap("tables_created", 9L));
            /* r.db_list().set_difference(["rethinkdb"]).for_each(lambda db_name:
    r.expr([1,2,3]).for_each(lambda i:
        r.db(db_name).table_create('tbl_' + i.coerce_to('string'))))
 */
            System.out.println("About to run #3: r.dbList().setDifference(r.array('rethinkdb')).forEach(db_name -> r.expr(r.array(1L, 2L, 3L)).forEach(i -> r.db(db_name).tableCreate(r.add('tbl_', i.coerceTo('string')))))");
            Object obtained = runOrCatch(r.dbList().setDifference(r.array("rethinkdb")).forEach(db_name -> r.expr(r.array(1L, 2L, 3L)).forEach(i -> r.db(db_name).tableCreate(r.add("tbl_", i.coerceTo("string"))))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/composite.yaml #4
            /* partial({'dbs_dropped':3,'tables_dropped':9}) */
            Partial expected_ = partial(r.hashMap("dbs_dropped", 3L).with("tables_dropped", 9L));
            /* r.db_list().set_difference(["rethinkdb"]).for_each(lambda row:
    r.db_drop(row))
 */
            System.out.println("About to run #4: r.dbList().setDifference(r.array('rethinkdb')).forEach(row -> r.dbDrop(row))");
            Object obtained = runOrCatch(r.dbList().setDifference(r.array("rethinkdb")).forEach(row -> r.dbDrop(row)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/composite.yaml #5
            /* partial({'dbs_created':1}) */
            Partial expected_ = partial(r.hashMap("dbs_created", 1L));
            /* r.db_create('test') */
            System.out.println("About to run #5: r.dbCreate('test')");
            Object obtained = runOrCatch(r.dbCreate("test"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
