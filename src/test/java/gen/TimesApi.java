// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class TimesApi {
    Logger logger = LoggerFactory.getLogger(TimesApi.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // times/api.yaml #1
        // rt1 = 1375147296.6812
        System.out.println("Possibly executing: Double rt1 = (Double) (1375147296.6812);");
        Double rt1 = (Double) (1375147296.6812);
                
        // times/api.yaml #2
        // t1 = r.epoch_time(rt1)
        System.out.println("Possibly executing: EpochTime t1 = (EpochTime) (r.epochTime(rt1));");
        EpochTime t1 = (EpochTime) (r.epochTime(rt1));
                
        // times/api.yaml #3
        // t2 = r.epoch_time(rt1 + 1000)
        System.out.println("Possibly executing: EpochTime t2 = (EpochTime) (r.epochTime(r.add(rt1, 1000L)));");
        EpochTime t2 = (EpochTime) (r.epochTime(r.add(rt1, 1000L)));
                
        {
            // times/api.yaml #4
            /* (1375148296.681) */
            Double expected_ = 1375148296.681;
            /* (t1 + 1000).to_epoch_time() */
            System.out.println("About to run #4: r.add(t1, 1000L).toEpochTime()");
            Object obtained = runOrCatch(r.add(t1, 1000L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #5
            /* (1375146296.681) */
            Double expected_ = 1375146296.681;
            /* (t1 - 1000).to_epoch_time() */
            System.out.println("About to run #5: r.sub(t1, 1000L).toEpochTime()");
            Object obtained = runOrCatch(r.sub(t1, 1000L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #6
            /* 1000 */
            Long expected_ = 1000L;
            /* (t1 - (t1 - 1000)) */
            System.out.println("About to run #6: r.sub(t1, r.sub(t1, 1000L))");
            Object obtained = runOrCatch(r.sub(t1, r.sub(t1, 1000L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #7
            /* False */
            Boolean expected_ = false;
            /* (t1 < t1) */
            System.out.println("About to run #7: r.lt(t1, t1)");
            Object obtained = runOrCatch(r.lt(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #8
            /* True */
            Boolean expected_ = true;
            /* (t1 <= t1) */
            System.out.println("About to run #8: r.le(t1, t1)");
            Object obtained = runOrCatch(r.le(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #9
            /* True */
            Boolean expected_ = true;
            /* (t1 == t1) */
            System.out.println("About to run #9: r.eq(t1, t1)");
            Object obtained = runOrCatch(r.eq(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #10
            /* False */
            Boolean expected_ = false;
            /* (t1 != t1) */
            System.out.println("About to run #10: r.ne(t1, t1)");
            Object obtained = runOrCatch(r.ne(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #11
            /* True */
            Boolean expected_ = true;
            /* (t1 >= t1) */
            System.out.println("About to run #11: r.ge(t1, t1)");
            Object obtained = runOrCatch(r.ge(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #12
            /* False */
            Boolean expected_ = false;
            /* (t1 > t1) */
            System.out.println("About to run #12: r.gt(t1, t1)");
            Object obtained = runOrCatch(r.gt(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #13
            /* True */
            Boolean expected_ = true;
            /* (t1 < t2) */
            System.out.println("About to run #13: r.lt(t1, t2)");
            Object obtained = runOrCatch(r.lt(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #14
            /* True */
            Boolean expected_ = true;
            /* (t1 <= t2) */
            System.out.println("About to run #14: r.le(t1, t2)");
            Object obtained = runOrCatch(r.le(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #15
            /* False */
            Boolean expected_ = false;
            /* (t1 == t2) */
            System.out.println("About to run #15: r.eq(t1, t2)");
            Object obtained = runOrCatch(r.eq(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #16
            /* True */
            Boolean expected_ = true;
            /* (t1 != t2) */
            System.out.println("About to run #16: r.ne(t1, t2)");
            Object obtained = runOrCatch(r.ne(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #17
            /* False */
            Boolean expected_ = false;
            /* (t1 >= t2) */
            System.out.println("About to run #17: r.ge(t1, t2)");
            Object obtained = runOrCatch(r.ge(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #18
            /* False */
            Boolean expected_ = false;
            /* (t1 > t2) */
            System.out.println("About to run #18: r.gt(t1, t2)");
            Object obtained = runOrCatch(r.gt(t1, t2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #19
            /* True */
            Boolean expected_ = true;
            /* t1.during(t1, t1 + 1000) */
            System.out.println("About to run #19: t1.during(t1, r.add(t1, 1000L))");
            Object obtained = runOrCatch(t1.during(t1, r.add(t1, 1000L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #20
            /* False */
            Boolean expected_ = false;
            /* t1.during(t1, t1 + 1000, left_bound='open') */
            System.out.println("About to run #20: t1.during(t1, r.add(t1, 1000L)).optArg('left_bound', 'open')");
            Object obtained = runOrCatch(t1.during(t1, r.add(t1, 1000L)).optArg("left_bound", "open"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #21
            /* False */
            Boolean expected_ = false;
            /* t1.during(t1, t1) */
            System.out.println("About to run #21: t1.during(t1, t1)");
            Object obtained = runOrCatch(t1.during(t1, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #22
            /* True */
            Boolean expected_ = true;
            /* t1.during(t1, t1, right_bound='closed') */
            System.out.println("About to run #22: t1.during(t1, t1).optArg('right_bound', 'closed')");
            Object obtained = runOrCatch(t1.during(t1, t1).optArg("right_bound", "closed"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #23
            /* 1375142400 */
            Long expected_ = 1375142400L;
            /* t1.date().to_epoch_time() */
            System.out.println("About to run #23: t1.date().toEpochTime()");
            Object obtained = runOrCatch(t1.date().toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #24
            /* (4896.681) */
            Double expected_ = 4896.681;
            /* t1.time_of_day() */
            System.out.println("About to run #24: t1.timeOfDay()");
            Object obtained = runOrCatch(t1.timeOfDay(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #25
            /* 2013 */
            Long expected_ = 2013L;
            /* t1.year() */
            System.out.println("About to run #25: t1.year()");
            Object obtained = runOrCatch(t1.year(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #26
            /* 7 */
            Long expected_ = 7L;
            /* t1.month() */
            System.out.println("About to run #26: t1.month()");
            Object obtained = runOrCatch(t1.month(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #27
            /* 30 */
            Long expected_ = 30L;
            /* t1.day() */
            System.out.println("About to run #27: t1.day()");
            Object obtained = runOrCatch(t1.day(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #28
            /* 2 */
            Long expected_ = 2L;
            /* t1.day_of_week() */
            System.out.println("About to run #28: t1.dayOfWeek()");
            Object obtained = runOrCatch(t1.dayOfWeek(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #29
            /* 211 */
            Long expected_ = 211L;
            /* t1.day_of_year() */
            System.out.println("About to run #29: t1.dayOfYear()");
            Object obtained = runOrCatch(t1.dayOfYear(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #30
            /* 1 */
            Long expected_ = 1L;
            /* t1.hours() */
            System.out.println("About to run #30: t1.hours()");
            Object obtained = runOrCatch(t1.hours(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #31
            /* 21 */
            Long expected_ = 21L;
            /* t1.minutes() */
            System.out.println("About to run #31: t1.minutes()");
            Object obtained = runOrCatch(t1.minutes(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #32
            /* 36.681 */
            Double expected_ = 36.681;
            /* t1.seconds() */
            System.out.println("About to run #32: t1.seconds()");
            Object obtained = runOrCatch(t1.seconds(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #33
            /* (1375165800.1) */
            Double expected_ = 1375165800.1;
            /* r.time(2013, r.july, 29, 23, 30, 0.1, "-07:00").to_epoch_time() */
            System.out.println("About to run #33: r.time(2013L, r.july(), 29L, 23L, 30L, 0.1, '-07:00').toEpochTime()");
            Object obtained = runOrCatch(r.time(2013L, r.july(), 29L, 23L, 30L, 0.1, "-07:00").toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #34
            /* ("-07:00") */
            String expected_ = "-07:00";
            /* r.time(2013, r.july, 29, 23, 30, 0.1, "-07:00").timezone() */
            System.out.println("About to run #34: r.time(2013L, r.july(), 29L, 23L, 30L, 0.1, '-07:00').timezone()");
            Object obtained = runOrCatch(r.time(2013L, r.july(), 29L, 23L, 30L, 0.1, "-07:00").timezone(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #38
            /* err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array());
            /* r.time(2013, r.july, 29, 23).to_epoch_time() */
            System.out.println("About to run #38: r.time(2013L, r.july(), 29L, 23L).toEpochTime()");
            Object obtained = runOrCatch(r.time(2013L, r.july(), 29L, 23L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #39
            /* 1375081200 */
            Long expected_ = 1375081200L;
            /* r.time(2013, r.july, 29, "-07:00").to_epoch_time() */
            System.out.println("About to run #39: r.time(2013L, r.july(), 29L, '-07:00').toEpochTime()");
            Object obtained = runOrCatch(r.time(2013L, r.july(), 29L, "-07:00").toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #40
            /* ("-07:00") */
            String expected_ = "-07:00";
            /* r.time(2013, r.july, 29, "-07:00").timezone() */
            System.out.println("About to run #40: r.time(2013L, r.july(), 29L, '-07:00').timezone()");
            Object obtained = runOrCatch(r.time(2013L, r.july(), 29L, "-07:00").timezone(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #43
            /* 1375242965 */
            Long expected_ = 1375242965L;
            /* r.iso8601("2013-07-30T20:56:05-07:00").to_epoch_time() */
            System.out.println("About to run #43: r.iso8601('2013-07-30T20:56:05-07:00').toEpochTime()");
            Object obtained = runOrCatch(r.iso8601("2013-07-30T20:56:05-07:00").toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #44
            /* ("2013-07-30T20:56:05-07:00") */
            String expected_ = "2013-07-30T20:56:05-07:00";
            /* r.epoch_time(1375242965).in_timezone("-07:00").to_iso8601() */
            System.out.println("About to run #44: r.epochTime(1375242965L).inTimezone('-07:00').toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1375242965L).inTimezone("-07:00").toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #45
            /* ("PTYPE<TIME>") */
            String expected_ = "PTYPE<TIME>";
            /* r.now().type_of() */
            System.out.println("About to run #45: r.now().typeOf()");
            Object obtained = runOrCatch(r.now().typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #46
            /* 0 */
            Long expected_ = 0L;
            /* (r.now() - r.now()) */
            System.out.println("About to run #46: r.now().sub(r.now())");
            Object obtained = runOrCatch(r.now().sub(r.now()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #47
            /* err("ReqlQueryLogicError", "ISO 8601 string has no time zone, and no default time zone was provided.", []) */
            Err expected_ = err("ReqlQueryLogicError", "ISO 8601 string has no time zone, and no default time zone was provided.", r.array());
            /* r.iso8601("2013-07-30T20:56:05").to_iso8601() */
            System.out.println("About to run #47: r.iso8601('2013-07-30T20:56:05').toIso8601()");
            Object obtained = runOrCatch(r.iso8601("2013-07-30T20:56:05").toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #48
            /* ("2013-07-30T20:56:05-07:00") */
            String expected_ = "2013-07-30T20:56:05-07:00";
            /* r.iso8601("2013-07-30T20:56:05", default_timezone='-07').to_iso8601() */
            System.out.println("About to run #48: r.iso8601('2013-07-30T20:56:05').optArg('default_timezone', '-07').toIso8601()");
            Object obtained = runOrCatch(r.iso8601("2013-07-30T20:56:05").optArg("default_timezone", "-07").toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #49
            /* ([1, 2, 3, 4, 5, 6, 7]) */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L);
            /* r.expr([r.monday, r.tuesday, r.wednesday, r.thursday, r.friday, r.saturday, r.sunday]) */
            System.out.println("About to run #49: r.expr(r.array(r.monday(), r.tuesday(), r.wednesday(), r.thursday(), r.friday(), r.saturday(), r.sunday()))");
            Object obtained = runOrCatch(r.expr(r.array(r.monday(), r.tuesday(), r.wednesday(), r.thursday(), r.friday(), r.saturday(), r.sunday())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/api.yaml #50
            /* ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L);
            /* r.expr([r.january, r.february, r.march, r.april, r.may, r.june, r.july, r.august, r.september, r.october, r.november, r.december]) */
            System.out.println("About to run #50: r.expr(r.array(r.january(), r.february(), r.march(), r.april(), r.may(), r.june(), r.july(), r.august(), r.september(), r.october(), r.november(), r.december()))");
            Object obtained = runOrCatch(r.expr(r.array(r.january(), r.february(), r.march(), r.april(), r.may(), r.june(), r.july(), r.august(), r.september(), r.october(), r.november(), r.december())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
