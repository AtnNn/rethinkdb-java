// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class ChangefeedsTable {
    Logger logger = LoggerFactory.getLogger(ChangefeedsTable.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // changefeeds/table.yaml #1
        // all = tbl.changes()
        System.out.println("Possibly executing: Changes all = (Changes) (tbl.changes());");
        Object all = maybeRun((Changes) (tbl.changes()), conn);
                
        {
            // changefeeds/table.yaml #2
            /* partial({'errors':0, 'inserted':2}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
            /* tbl.insert([{'id':1}, {'id':2}]) */
            System.out.println("About to run #2: tbl.insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L)))");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #3
            /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
            Bag expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
            /* fetch(all, 2) */
            System.out.println("About to run #3: fetch(all, 2L)");
            Object obtained = runOrCatch(fetch(all, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #4
            /* partial({'errors':0, 'replaced':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
            /* tbl.get(1).update({'version':1}) */
            System.out.println("About to run #4: tbl.get(1L).update(r.hashMap('version', 1L))");
            Object obtained = runOrCatch(tbl.get(1L).update(r.hashMap("version", 1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #5
            /* [{'new_val': {'version': 1, 'id': 1}, 'old_val': {'id': 1}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 1L).with("id", 1L)).with("old_val", r.hashMap("id", 1L)));
            /* fetch(all, 1) */
            System.out.println("About to run #5: fetch(all, 1L)");
            Object obtained = runOrCatch(fetch(all, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #6
            /* partial({'errors':0, 'deleted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
            /* tbl.get(1).delete() */
            System.out.println("About to run #6: tbl.get(1L).delete()");
            Object obtained = runOrCatch(tbl.get(1L).delete(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #7
            /* [{'new_val': None, 'old_val': {'version': 1, 'id': 1}}] */
            List expected_ = r.array(r.hashMap("new_val", null).with("old_val", r.hashMap("version", 1L).with("id", 1L)));
            /* fetch(all, 1) */
            System.out.println("About to run #7: fetch(all, 1L)");
            Object obtained = runOrCatch(fetch(all, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // changefeeds/table.yaml #8
        // pluck = tbl.changes().pluck({'new_val':['version']})
        System.out.println("Possibly executing: Pluck pluck = (Pluck) (tbl.changes().pluck(r.hashMap('new_val', r.array('version'))));");
        Object pluck = maybeRun((Pluck) (tbl.changes().pluck(r.hashMap("new_val", r.array("version")))), conn);
                
        {
            // changefeeds/table.yaml #9
            /* partial({'errors':0, 'inserted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
            /* tbl.insert([{'id':5, 'version':5}]) */
            System.out.println("About to run #9: tbl.insert(r.array(r.hashMap('id', 5L).with('version', 5L)))");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #10
            /* [{'new_val': {'version': 5}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
            /* fetch(pluck, 1) */
            System.out.println("About to run #10: fetch(pluck, 1L)");
            Object obtained = runOrCatch(fetch(pluck, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #11
            /* err('ReqlQueryLogicError', "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).") */
            Err expected_ = err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).");
            /* tbl.changes().order_by('id') */
            System.out.println("About to run #11: tbl.changes().orderBy('id')");
            Object obtained = runOrCatch(tbl.changes().orderBy("id"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // changefeeds/table.yaml #12
        // vtbl = r.db('rethinkdb').table('_debug_scratch')
        System.out.println("Possibly executing: Table vtbl = (Table) (r.db('rethinkdb').table('_debug_scratch'));");
        Table vtbl = (Table) (r.db("rethinkdb").table("_debug_scratch"));
                
        // changefeeds/table.yaml #13
        // allVirtual = vtbl.changes()
        System.out.println("Possibly executing: Changes allVirtual = (Changes) (vtbl.changes());");
        Object allVirtual = maybeRun((Changes) (vtbl.changes()), conn);
                
        {
            // changefeeds/table.yaml #14
            /* partial({'errors':0, 'inserted':2}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
            /* vtbl.insert([{'id':1}, {'id':2}]) */
            System.out.println("About to run #14: vtbl.insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L)))");
            Object obtained = runOrCatch(vtbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #15
            /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
            Bag expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
            /* fetch(allVirtual, 2) */
            System.out.println("About to run #15: fetch(allVirtual, 2L)");
            Object obtained = runOrCatch(fetch(allVirtual, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #16
            /* partial({'errors':0, 'replaced':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
            /* vtbl.get(1).update({'version':1}) */
            System.out.println("About to run #16: vtbl.get(1L).update(r.hashMap('version', 1L))");
            Object obtained = runOrCatch(vtbl.get(1L).update(r.hashMap("version", 1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #17
            /* [{'new_val': {'version': 1, 'id': 1}, 'old_val': {'id': 1}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 1L).with("id", 1L)).with("old_val", r.hashMap("id", 1L)));
            /* fetch(allVirtual, 1) */
            System.out.println("About to run #17: fetch(allVirtual, 1L)");
            Object obtained = runOrCatch(fetch(allVirtual, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #18
            /* partial({'errors':0, 'deleted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
            /* vtbl.get(1).delete() */
            System.out.println("About to run #18: vtbl.get(1L).delete()");
            Object obtained = runOrCatch(vtbl.get(1L).delete(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #19
            /* [{'new_val': None, 'old_val': {'version': 1, 'id': 1}}] */
            List expected_ = r.array(r.hashMap("new_val", null).with("old_val", r.hashMap("version", 1L).with("id", 1L)));
            /* fetch(allVirtual, 1) */
            System.out.println("About to run #19: fetch(allVirtual, 1L)");
            Object obtained = runOrCatch(fetch(allVirtual, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // changefeeds/table.yaml #20
        // vpluck = vtbl.changes().pluck({'new_val':['version']})
        System.out.println("Possibly executing: Pluck vpluck = (Pluck) (vtbl.changes().pluck(r.hashMap('new_val', r.array('version'))));");
        Object vpluck = maybeRun((Pluck) (vtbl.changes().pluck(r.hashMap("new_val", r.array("version")))), conn);
                
        {
            // changefeeds/table.yaml #21
            /* partial({'errors':0, 'inserted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
            /* vtbl.insert([{'id':5, 'version':5}]) */
            System.out.println("About to run #21: vtbl.insert(r.array(r.hashMap('id', 5L).with('version', 5L)))");
            Object obtained = runOrCatch(vtbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // changefeeds/table.yaml #22
            /* [{'new_val': {'version': 5}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
            /* fetch(vpluck, 1) */
            System.out.println("About to run #22: fetch(vpluck, 1L)");
            Object obtained = runOrCatch(fetch(vpluck, 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
