// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class DatumBinary {
    Logger logger = LoggerFactory.getLogger(DatumBinary.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // datum/binary.yaml #1
        // s = b''
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{});");
        byte[] s = (byte[]) (new byte[]{});
                
        {
            // datum/binary.yaml #2
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #2: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #3
            /* 0 */
            Long expected_ = 0L;
            /* r.binary(s).count() */
            System.out.println("About to run #3: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #4
        // s = b'\x00'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{0});");
        s = ((byte[]) (new byte[]{0}));
        
        {
            // datum/binary.yaml #5
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #5: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #6
            /* 1 */
            Long expected_ = 1L;
            /* r.binary(s).count() */
            System.out.println("About to run #6: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #7
        // s = b'\x00\x42'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{0, 66});");
        s = ((byte[]) (new byte[]{0, 66}));
        
        {
            // datum/binary.yaml #8
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #8: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #9
            /* 2 */
            Long expected_ = 2L;
            /* r.binary(s).count() */
            System.out.println("About to run #9: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #10
        // s = b'\x00\xfe\x7a'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{0, -2, 122});");
        s = ((byte[]) (new byte[]{0, -2, 122}));
        
        {
            // datum/binary.yaml #11
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #11: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #12
            /* 3 */
            Long expected_ = 3L;
            /* r.binary(s).count() */
            System.out.println("About to run #12: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #13
        // s = b'\xed\xfe\x00\xba'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{-19, -2, 0, -70});");
        s = ((byte[]) (new byte[]{-19, -2, 0, -70}));
        
        {
            // datum/binary.yaml #14
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #14: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #15
            /* 4 */
            Long expected_ = 4L;
            /* r.binary(s).count() */
            System.out.println("About to run #15: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #16
        // s = b'\x50\xf9\x00\x77\xf9'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{80, -7, 0, 119, -7});");
        s = ((byte[]) (new byte[]{80, -7, 0, 119, -7}));
        
        {
            // datum/binary.yaml #17
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #17: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #18
            /* 5 */
            Long expected_ = 5L;
            /* r.binary(s).count() */
            System.out.println("About to run #18: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #19
        // s = b'\x2f\xe3\xb5\x57\x00\x92'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{47, -29, -75, 87, 0, -110});");
        s = ((byte[]) (new byte[]{47, -29, -75, 87, 0, -110}));
        
        {
            // datum/binary.yaml #20
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #20: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #21
            /* 6 */
            Long expected_ = 6L;
            /* r.binary(s).count() */
            System.out.println("About to run #21: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #22
        // s = b'\xa9\x43\x54\xe9\x00\xf8\xfb'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{-87, 67, 84, -23, 0, -8, -5});");
        s = ((byte[]) (new byte[]{-87, 67, 84, -23, 0, -8, -5}));
        
        {
            // datum/binary.yaml #23
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #23: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #24
            /* 7 */
            Long expected_ = 7L;
            /* r.binary(s).count() */
            System.out.println("About to run #24: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #25
        // s = b'\x57\xbb\xe5\x82\x8b\xd3\x00\xf9'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{87, -69, -27, -126, -117, -45, 0, -7});");
        s = ((byte[]) (new byte[]{87, -69, -27, -126, -117, -45, 0, -7}));
        
        {
            // datum/binary.yaml #26
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #26: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #27
            /* 8 */
            Long expected_ = 8L;
            /* r.binary(s).count() */
            System.out.println("About to run #27: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #28
        // s = b'\x44\x1b\x3e\x00\x13\x19\x29\x2a\xbf'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{68, 27, 62, 0, 19, 25, 41, 42, -65});");
        s = ((byte[]) (new byte[]{68, 27, 62, 0, 19, 25, 41, 42, -65}));
        
        {
            // datum/binary.yaml #29
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #29: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #30
            /* 9 */
            Long expected_ = 9L;
            /* r.binary(s).count() */
            System.out.println("About to run #30: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #31
        // s = b'\x8a\x1d\x09\x00\x5d\x60\x6b\x2e\x70\xd9'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{-118, 29, 9, 0, 93, 96, 107, 46, 112, -39});");
        s = ((byte[]) (new byte[]{-118, 29, 9, 0, 93, 96, 107, 46, 112, -39}));
        
        {
            // datum/binary.yaml #32
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #32: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #33
            /* 10 */
            Long expected_ = 10L;
            /* r.binary(s).count() */
            System.out.println("About to run #33: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #34
        // s = b'\x00\xaf\x47\x4b\x38\x99\x14\x8d\x8f\x10\x51'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{0, -81, 71, 75, 56, -103, 20, -115, -113, 16, 81});");
        s = ((byte[]) (new byte[]{0, -81, 71, 75, 56, -103, 20, -115, -113, 16, 81}));
        
        {
            // datum/binary.yaml #35
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #35: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #36
            /* 11 */
            Long expected_ = 11L;
            /* r.binary(s).count() */
            System.out.println("About to run #36: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #37
        // s = b'\x45\x39\x00\xf7\xc2\x37\xfd\xe0\x38\x82\x40\xa9'
        System.out.println("Possibly executing: byte[] s = (byte[]) (new byte[]{69, 57, 0, -9, -62, 55, -3, -32, 56, -126, 64, -87});");
        s = ((byte[]) (new byte[]{69, 57, 0, -9, -62, 55, -3, -32, 56, -126, 64, -87}));
        
        {
            // datum/binary.yaml #38
            /* s */
            byte[] expected_ = s;
            /* r.binary(s) */
            System.out.println("About to run #38: r.binary(s)");
            Object obtained = runOrCatch(r.binary(s),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #39
            /* 12 */
            Long expected_ = 12L;
            /* r.binary(s).count() */
            System.out.println("About to run #39: r.binary(s).count()");
            Object obtained = runOrCatch(r.binary(s).count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // datum/binary.yaml #40
        // a = b'\x00'
        System.out.println("Possibly executing: byte[] a = (byte[]) (new byte[]{0});");
        byte[] a = (byte[]) (new byte[]{0});
                
        // datum/binary.yaml #41
        // b = b'\x00\x01'
        System.out.println("Possibly executing: byte[] b = (byte[]) (new byte[]{0, 1});");
        byte[] b = (byte[]) (new byte[]{0, 1});
                
        // datum/binary.yaml #42
        // c = b'\x01'
        System.out.println("Possibly executing: byte[] c = (byte[]) (new byte[]{1});");
        byte[] c = (byte[]) (new byte[]{1});
                
        // datum/binary.yaml #43
        // d = b'\x70\x22'
        System.out.println("Possibly executing: byte[] d = (byte[]) (new byte[]{112, 34});");
        byte[] d = (byte[]) (new byte[]{112, 34});
                
        // datum/binary.yaml #44
        // e = b'\x80'
        System.out.println("Possibly executing: byte[] e = (byte[]) (new byte[]{-128});");
        byte[] e = (byte[]) (new byte[]{-128});
                
        // datum/binary.yaml #45
        // f = b'\xFE'
        System.out.println("Possibly executing: byte[] f = (byte[]) (new byte[]{-2});");
        byte[] f = (byte[]) (new byte[]{-2});
                
        {
            // datum/binary.yaml #46
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).eq(r.binary(a)) */
            System.out.println("About to run #46: r.binary(a).eq(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).eq(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #47
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).le(r.binary(a)) */
            System.out.println("About to run #47: r.binary(a).le(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).le(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #48
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).ge(r.binary(a)) */
            System.out.println("About to run #48: r.binary(a).ge(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).ge(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #49
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).ne(r.binary(a)) */
            System.out.println("About to run #49: r.binary(a).ne(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).ne(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #50
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).lt(r.binary(a)) */
            System.out.println("About to run #50: r.binary(a).lt(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).lt(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #51
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).gt(r.binary(a)) */
            System.out.println("About to run #51: r.binary(a).gt(r.binary(a))");
            Object obtained = runOrCatch(r.binary(a).gt(r.binary(a)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #51");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #51");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #52
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).ne(r.binary(b)) */
            System.out.println("About to run #52: r.binary(a).ne(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).ne(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #52");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #52");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #53
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).lt(r.binary(b)) */
            System.out.println("About to run #53: r.binary(a).lt(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).lt(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #53");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #53");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #54
            /* True */
            Boolean expected_ = true;
            /* r.binary(a).le(r.binary(b)) */
            System.out.println("About to run #54: r.binary(a).le(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).le(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #54");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #54");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #55
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).ge(r.binary(b)) */
            System.out.println("About to run #55: r.binary(a).ge(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).ge(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #55");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #55");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #56
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).gt(r.binary(b)) */
            System.out.println("About to run #56: r.binary(a).gt(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).gt(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #56");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #56");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #57
            /* False */
            Boolean expected_ = false;
            /* r.binary(a).eq(r.binary(b)) */
            System.out.println("About to run #57: r.binary(a).eq(r.binary(b))");
            Object obtained = runOrCatch(r.binary(a).eq(r.binary(b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #57");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #57");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #58
            /* True */
            Boolean expected_ = true;
            /* r.binary(b).ne(r.binary(c)) */
            System.out.println("About to run #58: r.binary(b).ne(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).ne(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #58");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #58");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #59
            /* True */
            Boolean expected_ = true;
            /* r.binary(b).lt(r.binary(c)) */
            System.out.println("About to run #59: r.binary(b).lt(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).lt(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #59");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #59");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #60
            /* True */
            Boolean expected_ = true;
            /* r.binary(b).le(r.binary(c)) */
            System.out.println("About to run #60: r.binary(b).le(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).le(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #60");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #60");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #61
            /* False */
            Boolean expected_ = false;
            /* r.binary(b).ge(r.binary(c)) */
            System.out.println("About to run #61: r.binary(b).ge(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).ge(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #61");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #61");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #62
            /* False */
            Boolean expected_ = false;
            /* r.binary(b).gt(r.binary(c)) */
            System.out.println("About to run #62: r.binary(b).gt(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).gt(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #62");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #62");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #63
            /* False */
            Boolean expected_ = false;
            /* r.binary(b).eq(r.binary(c)) */
            System.out.println("About to run #63: r.binary(b).eq(r.binary(c))");
            Object obtained = runOrCatch(r.binary(b).eq(r.binary(c)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #63");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #63");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #64
            /* True */
            Boolean expected_ = true;
            /* r.binary(c).ne(r.binary(d)) */
            System.out.println("About to run #64: r.binary(c).ne(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).ne(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #64");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #64");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #65
            /* True */
            Boolean expected_ = true;
            /* r.binary(c).lt(r.binary(d)) */
            System.out.println("About to run #65: r.binary(c).lt(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).lt(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #65");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #65");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #66
            /* True */
            Boolean expected_ = true;
            /* r.binary(c).le(r.binary(d)) */
            System.out.println("About to run #66: r.binary(c).le(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).le(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #66");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #66");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #67
            /* False */
            Boolean expected_ = false;
            /* r.binary(c).ge(r.binary(d)) */
            System.out.println("About to run #67: r.binary(c).ge(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).ge(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #67");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #67");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #68
            /* False */
            Boolean expected_ = false;
            /* r.binary(c).gt(r.binary(d)) */
            System.out.println("About to run #68: r.binary(c).gt(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).gt(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #68");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #68");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #69
            /* False */
            Boolean expected_ = false;
            /* r.binary(c).eq(r.binary(d)) */
            System.out.println("About to run #69: r.binary(c).eq(r.binary(d))");
            Object obtained = runOrCatch(r.binary(c).eq(r.binary(d)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #69");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #69");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #70
            /* True */
            Boolean expected_ = true;
            /* r.binary(d).ne(r.binary(e)) */
            System.out.println("About to run #70: r.binary(d).ne(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).ne(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #70");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #70");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #71
            /* True */
            Boolean expected_ = true;
            /* r.binary(d).lt(r.binary(e)) */
            System.out.println("About to run #71: r.binary(d).lt(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).lt(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #71");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #71");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #72
            /* True */
            Boolean expected_ = true;
            /* r.binary(d).le(r.binary(e)) */
            System.out.println("About to run #72: r.binary(d).le(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).le(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #72");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #72");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #73
            /* False */
            Boolean expected_ = false;
            /* r.binary(d).ge(r.binary(e)) */
            System.out.println("About to run #73: r.binary(d).ge(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).ge(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #73");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #73");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #74
            /* False */
            Boolean expected_ = false;
            /* r.binary(d).gt(r.binary(e)) */
            System.out.println("About to run #74: r.binary(d).gt(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).gt(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #74");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #74");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #75
            /* False */
            Boolean expected_ = false;
            /* r.binary(d).eq(r.binary(e)) */
            System.out.println("About to run #75: r.binary(d).eq(r.binary(e))");
            Object obtained = runOrCatch(r.binary(d).eq(r.binary(e)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #75");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #75");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #75:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #76
            /* True */
            Boolean expected_ = true;
            /* r.binary(e).ne(r.binary(f)) */
            System.out.println("About to run #76: r.binary(e).ne(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).ne(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #76");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #76");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #77
            /* True */
            Boolean expected_ = true;
            /* r.binary(e).lt(r.binary(f)) */
            System.out.println("About to run #77: r.binary(e).lt(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).lt(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #77");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #77");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #77:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #78
            /* True */
            Boolean expected_ = true;
            /* r.binary(e).le(r.binary(f)) */
            System.out.println("About to run #78: r.binary(e).le(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).le(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #78");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #78");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #79
            /* False */
            Boolean expected_ = false;
            /* r.binary(e).ge(r.binary(f)) */
            System.out.println("About to run #79: r.binary(e).ge(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).ge(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #79");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #79");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #79:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #80
            /* False */
            Boolean expected_ = false;
            /* r.binary(e).gt(r.binary(f)) */
            System.out.println("About to run #80: r.binary(e).gt(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).gt(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #80");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #80");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #81
            /* False */
            Boolean expected_ = false;
            /* r.binary(e).eq(r.binary(f)) */
            System.out.println("About to run #81: r.binary(e).eq(r.binary(f))");
            Object obtained = runOrCatch(r.binary(e).eq(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #81");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #81");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #82
            /* True */
            Boolean expected_ = true;
            /* r.binary(f).eq(r.binary(f)) */
            System.out.println("About to run #82: r.binary(f).eq(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).eq(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #82");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #82");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #83
            /* True */
            Boolean expected_ = true;
            /* r.binary(f).le(r.binary(f)) */
            System.out.println("About to run #83: r.binary(f).le(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).le(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #83");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #83");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #84
            /* True */
            Boolean expected_ = true;
            /* r.binary(f).ge(r.binary(f)) */
            System.out.println("About to run #84: r.binary(f).ge(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).ge(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #84");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #84");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #85
            /* False */
            Boolean expected_ = false;
            /* r.binary(f).ne(r.binary(f)) */
            System.out.println("About to run #85: r.binary(f).ne(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).ne(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #85");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #85");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #86
            /* False */
            Boolean expected_ = false;
            /* r.binary(f).lt(r.binary(f)) */
            System.out.println("About to run #86: r.binary(f).lt(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).lt(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #86");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #86");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #87
            /* False */
            Boolean expected_ = false;
            /* r.binary(f).gt(r.binary(f)) */
            System.out.println("About to run #87: r.binary(f).gt(r.binary(f))");
            Object obtained = runOrCatch(r.binary(f).gt(r.binary(f)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #87");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #87");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #88
            /* u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8') */
            byte[] expected_ = "イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム".getBytes(StandardCharsets.UTF_8);
            /* r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')) */
            System.out.println("About to run #88: r.binary('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.getBytes(StandardCharsets.UTF_8))");
            Object obtained = runOrCatch(r.binary("イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム".getBytes(StandardCharsets.UTF_8)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #88");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #88");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #89
            /* u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16') */
            byte[] expected_ = "ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ".getBytes(StandardCharsets.UTF_16);
            /* r.binary(u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16')) */
            System.out.println("About to run #89: r.binary('ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.getBytes(StandardCharsets.UTF_16))");
            Object obtained = runOrCatch(r.binary("ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ".getBytes(StandardCharsets.UTF_16)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #89");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #89");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #90
            /* u'lorem ipsum'.encode('ascii') */
            byte[] expected_ = "lorem ipsum".getBytes(StandardCharsets.US_ASCII);
            /* r.binary(u'lorem ipsum'.encode('ascii')) */
            System.out.println("About to run #90: r.binary('lorem ipsum'.getBytes(StandardCharsets.US_ASCII))");
            Object obtained = runOrCatch(r.binary("lorem ipsum".getBytes(StandardCharsets.US_ASCII)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #90");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #90");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #91
            /* ('foo') */
            String expected_ = "foo";
            /* r.binary(b'foo').coerce_to('string') */
            System.out.println("About to run #91: r.binary(new byte[]{102, 111, 111}).coerceTo('string')");
            Object obtained = runOrCatch(r.binary(new byte[]{102, 111, 111}).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #91");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #91");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #91:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #92
            /* u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム' */
            String expected_ = "イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム";
            /* r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')).coerce_to('string') */
            System.out.println("About to run #92: r.binary('イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.getBytes(StandardCharsets.UTF_8)).coerceTo('string')");
            Object obtained = runOrCatch(r.binary("イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム".getBytes(StandardCharsets.UTF_8)).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #92");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #92");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #92:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #93
            /* u'lorem ipsum' */
            String expected_ = "lorem ipsum";
            /* r.binary(u'lorem ipsum'.encode('ascii')).coerce_to('string') */
            System.out.println("About to run #93: r.binary('lorem ipsum'.getBytes(StandardCharsets.US_ASCII)).coerceTo('string')");
            Object obtained = runOrCatch(r.binary("lorem ipsum".getBytes(StandardCharsets.US_ASCII)).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #93");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #93");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #94
            /* b'foo' */
            byte[] expected_ = new byte[]{102, 111, 111};
            /* r.expr('foo').coerce_to('binary') */
            System.out.println("About to run #94: r.expr('foo').coerceTo('binary')");
            Object obtained = runOrCatch(r.expr("foo").coerceTo("binary"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #94");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #94");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #94:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #95
            /* b'foo' */
            byte[] expected_ = new byte[]{102, 111, 111};
            /* r.binary(b'foo').coerce_to('binary') */
            System.out.println("About to run #95: r.binary(new byte[]{102, 111, 111}).coerceTo('binary')");
            Object obtained = runOrCatch(r.binary(new byte[]{102, 111, 111}).coerceTo("binary"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #95");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #95");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #95:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #96
            /* b'ef' */
            byte[] expected_ = new byte[]{101, 102};
            /* r.binary(b'abcdefg').slice(-3,-1) */
            System.out.println("About to run #96: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-3L, -1L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-3L, -1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #96");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #96");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #97
            /* b'ab' */
            byte[] expected_ = new byte[]{97, 98};
            /* r.binary(b'abcdefg').slice(0, 2) */
            System.out.println("About to run #97: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(0L, 2L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(0L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #97");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #97");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #97:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #98
            /* b'def' */
            byte[] expected_ = new byte[]{100, 101, 102};
            /* r.binary(b'abcdefg').slice(3, -1) */
            System.out.println("About to run #98: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(3L, -1L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(3L, -1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #98");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #98");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #99
            /* b'cde' */
            byte[] expected_ = new byte[]{99, 100, 101};
            /* r.binary(b'abcdefg').slice(-5, 5) */
            System.out.println("About to run #99: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-5L, 5L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-5L, 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #99");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #99");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #100
            /* b'ab' */
            byte[] expected_ = new byte[]{97, 98};
            /* r.binary(b'abcdefg').slice(-8, 2) */
            System.out.println("About to run #100: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-8L, 2L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-8L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #100");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #100");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #101
            /* b'fg' */
            byte[] expected_ = new byte[]{102, 103};
            /* r.binary(b'abcdefg').slice(5, 7) */
            System.out.println("About to run #101: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 7L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 7L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #101");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #101");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #101:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #102
            /* b'ab' */
            byte[] expected_ = new byte[]{97, 98};
            /* r.binary(b'abcdefg').slice(-9, 2) */
            System.out.println("About to run #102: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-9L, 2L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-9L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #102");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #102");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #102:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #103
            /* b'fg' */
            byte[] expected_ = new byte[]{102, 103};
            /* r.binary(b'abcdefg').slice(5, 9) */
            System.out.println("About to run #103: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 9L)");
            Object obtained = runOrCatch(r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 9L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #103");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #103");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #103:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #104
            /* b */
            byte[] expected_ = b;
            /* r.binary(b) */
            System.out.println("About to run #104: r.binary(b)");
            Object obtained = runOrCatch(r.binary(b),
                                          new OptArgs()
                                          .with("binary_format", "native")
                                          ,conn);
            System.out.println("Finished running #104");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #104");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #104:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #105
            /* ({'$reql_type$':'BINARY','data':'AAE='}) */
            Map expected_ = r.hashMap("$reql_type$", "BINARY").with("data", "AAE=");
            /* r.binary(b) */
            System.out.println("About to run #105: r.binary(b)");
            Object obtained = runOrCatch(r.binary(b),
                                          new OptArgs()
                                          .with("binary_format", "raw")
                                          ,conn);
            System.out.println("Finished running #105");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #105");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #105:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #106
            /* (b"data") */
            byte[] expected_ = new byte[]{100, 97, 116, 97};
            /* r.binary(r.expr("data")) */
            System.out.println("About to run #106: r.binary(r.expr('data'))");
            Object obtained = runOrCatch(r.binary(r.expr("data")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #106");
            try {
                assertArrayEquals(expected_, (byte[]) obtained);
            System.out.println("Finished asserting #106");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #106:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #107
            /* err('ReqlQueryLogicError', 'Expected type STRING but found OBJECT.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found OBJECT.", r.array());
            /* r.binary(r.expr({})) */
            System.out.println("About to run #107: r.binary(r.expr(r.hashMap()))");
            Object obtained = runOrCatch(r.binary(r.expr(r.hashMap())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #107");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #107");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #107:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #108
            /* err('ReqlQueryLogicError', 'Expected type STRING but found ARRAY.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found ARRAY.", r.array());
            /* r.binary(r.expr([])) */
            System.out.println("About to run #108: r.binary(r.expr(r.array()))");
            Object obtained = runOrCatch(r.binary(r.expr(r.array())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #108");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #108");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #109
            /* err('ReqlQueryLogicError','Invalid binary pseudotype:'+' lacking `data` key.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid binary pseudotype:" + " lacking `data` key.", r.array());
            /* r.expr({'$reql_type$':'BINARY'}) */
            System.out.println("About to run #109: r.expr(r.hashMap('$reql_type$', 'BINARY'))");
            Object obtained = runOrCatch(r.expr(r.hashMap("$reql_type$", "BINARY")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #109");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #109");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #109:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #110
            /* err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", r.array());
            /* r.expr({'$reql_type$':'BINARY','data':'ABCDEFGH==AA'}) */
            System.out.println("About to run #110: r.expr(r.hashMap('$reql_type$', 'BINARY').with('data', 'ABCDEFGH==AA'))");
            Object obtained = runOrCatch(r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDEFGH==AA")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #110");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #110");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #110:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #111
            /* err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", r.array());
            /* r.expr({'$reql_type$':'BINARY','data':'ABCDEF==$'}) */
            System.out.println("About to run #111: r.expr(r.hashMap('$reql_type$', 'BINARY').with('data', 'ABCDEF==$'))");
            Object obtained = runOrCatch(r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDEF==$")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #111");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #111");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #111:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #112
            /* err('ReqlQueryLogicError','Invalid base64 character found:'+' \'^\'.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid base64 character found:" + " '^'.", r.array());
            /* r.expr({'$reql_type$':'BINARY','data':'A^CDEFGH'}) */
            System.out.println("About to run #112: r.expr(r.hashMap('$reql_type$', 'BINARY').with('data', 'A^CDEFGH'))");
            Object obtained = runOrCatch(r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "A^CDEFGH")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #112");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #112");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #112:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #113
            /* err('ReqlQueryLogicError','Invalid base64 length:'+' 1 character remaining, cannot decode a full byte.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid base64 length:" + " 1 character remaining, cannot decode a full byte.", r.array());
            /* r.expr({'$reql_type$':'BINARY','data':'ABCDE'}) */
            System.out.println("About to run #113: r.expr(r.hashMap('$reql_type$', 'BINARY').with('data', 'ABCDE'))");
            Object obtained = runOrCatch(r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDE")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #113");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #113");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #114
            /* err('ReqlQueryLogicError','Cannot coerce BINARY to ARRAY.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce BINARY to ARRAY.", r.array());
            /* r.binary(a).coerce_to('array') */
            System.out.println("About to run #114: r.binary(a).coerceTo('array')");
            Object obtained = runOrCatch(r.binary(a).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #114");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #114");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #114:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #115
            /* err('ReqlQueryLogicError','Cannot coerce BINARY to OBJECT.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce BINARY to OBJECT.", r.array());
            /* r.binary(a).coerce_to('object') */
            System.out.println("About to run #115: r.binary(a).coerceTo('object')");
            Object obtained = runOrCatch(r.binary(a).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #115");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #115");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #115:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #116
            /* err('ReqlQueryLogicError','Cannot coerce BINARY to BOOL.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce BINARY to BOOL.", r.array());
            /* r.binary(a).coerce_to('bool') */
            System.out.println("About to run #116: r.binary(a).coerceTo('bool')");
            Object obtained = runOrCatch(r.binary(a).coerceTo("bool"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #116");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #116");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #116:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #117
            /* err('ReqlQueryLogicError','Cannot coerce BINARY to NUMBER.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce BINARY to NUMBER.", r.array());
            /* r.binary(a).coerce_to('number') */
            System.out.println("About to run #117: r.binary(a).coerceTo('number')");
            Object obtained = runOrCatch(r.binary(a).coerceTo("number"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #117");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #117");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #117:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/binary.yaml #118
            /* err('ReqlQueryLogicError','Cannot coerce BINARY to NULL.',[]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce BINARY to NULL.", r.array());
            /* r.binary(a).coerce_to('nu'+'ll') */
            System.out.println("About to run #118: r.binary(a).coerceTo(r.add('nu', 'll'))");
            Object obtained = runOrCatch(r.binary(a).coerceTo(r.add("nu", "ll")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #118");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #118");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #118:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
