// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class TimesTimezones {
    Logger logger = LoggerFactory.getLogger(TimesTimezones.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // times/timezones.yaml #1
        // t1 = r.time(2013, r.july, 29, 23, 30, 0, "+00:00")
        System.out.println("Possibly executing: Time t1 = (Time) (r.time(2013L, r.july(), 29L, 23L, 30L, 0L, '+00:00'));");
        Time t1 = (Time) (r.time(2013L, r.july(), 29L, 23L, 30L, 0L, "+00:00"));
                
        // times/timezones.yaml #2
        // tutc1 = t1.in_timezone("Z")
        System.out.println("Possibly executing: InTimezone tutc1 = (InTimezone) (t1.inTimezone('Z'));");
        InTimezone tutc1 = (InTimezone) (t1.inTimezone("Z"));
                
        // times/timezones.yaml #3
        // tutc2 = t1.in_timezone("+00:00")
        System.out.println("Possibly executing: InTimezone tutc2 = (InTimezone) (t1.inTimezone('+00:00'));");
        InTimezone tutc2 = (InTimezone) (t1.inTimezone("+00:00"));
                
        // times/timezones.yaml #4
        // tutc3 = t1.in_timezone("+00")
        System.out.println("Possibly executing: InTimezone tutc3 = (InTimezone) (t1.inTimezone('+00'));");
        InTimezone tutc3 = (InTimezone) (t1.inTimezone("+00"));
                
        // times/timezones.yaml #5
        // tutcs = r.expr([tutc1, tutc2, tutc3])
        System.out.println("Possibly executing: MakeArray tutcs = (MakeArray) (r.expr(r.array(tutc1, tutc2, tutc3)));");
        MakeArray tutcs = (MakeArray) (r.expr(r.array(tutc1, tutc2, tutc3)));
                
        // times/timezones.yaml #6
        // tm1 = t1.in_timezone("-00:59")
        System.out.println("Possibly executing: InTimezone tm1 = (InTimezone) (t1.inTimezone('-00:59'));");
        InTimezone tm1 = (InTimezone) (t1.inTimezone("-00:59"));
                
        // times/timezones.yaml #7
        // tm2 = t1.in_timezone("-01:00")
        System.out.println("Possibly executing: InTimezone tm2 = (InTimezone) (t1.inTimezone('-01:00'));");
        InTimezone tm2 = (InTimezone) (t1.inTimezone("-01:00"));
                
        // times/timezones.yaml #8
        // tm3 = t1.in_timezone("-01:01")
        System.out.println("Possibly executing: InTimezone tm3 = (InTimezone) (t1.inTimezone('-01:01'));");
        InTimezone tm3 = (InTimezone) (t1.inTimezone("-01:01"));
                
        // times/timezones.yaml #9
        // tms = r.expr([tm1, tm2, tm3])
        System.out.println("Possibly executing: MakeArray tms = (MakeArray) (r.expr(r.array(tm1, tm2, tm3)));");
        MakeArray tms = (MakeArray) (r.expr(r.array(tm1, tm2, tm3)));
                
        // times/timezones.yaml #10
        // tp1 = t1.in_timezone("+00:59")
        System.out.println("Possibly executing: InTimezone tp1 = (InTimezone) (t1.inTimezone('+00:59'));");
        InTimezone tp1 = (InTimezone) (t1.inTimezone("+00:59"));
                
        // times/timezones.yaml #11
        // tp2 = t1.in_timezone("+01:00")
        System.out.println("Possibly executing: InTimezone tp2 = (InTimezone) (t1.inTimezone('+01:00'));");
        InTimezone tp2 = (InTimezone) (t1.inTimezone("+01:00"));
                
        // times/timezones.yaml #12
        // tp3 = t1.in_timezone("+01:01")
        System.out.println("Possibly executing: InTimezone tp3 = (InTimezone) (t1.inTimezone('+01:01'));");
        InTimezone tp3 = (InTimezone) (t1.inTimezone("+01:01"));
                
        // times/timezones.yaml #13
        // tps = r.expr([tp1, tp2, tp3])
        System.out.println("Possibly executing: MakeArray tps = (MakeArray) (r.expr(r.array(tp1, tp2, tp3)));");
        MakeArray tps = (MakeArray) (r.expr(r.array(tp1, tp2, tp3)));
                
        // times/timezones.yaml #14
        // ts = tutcs.union(tms).union(tps).union([t1])
        System.out.println("Possibly executing: Union ts = (Union) (tutcs.union(tms).union(tps).union(r.array(t1)));");
        Union ts = (Union) (tutcs.union(tms).union(tps).union(r.array(t1)));
                
        {
            // times/timezones.yaml #15
            /* ([["+00:00", 29], ["+00:00", 29], ["+00:00", 29]]) */
            List expected_ = r.array(r.array("+00:00", 29L), r.array("+00:00", 29L), r.array("+00:00", 29L));
            /* tutcs.map(lambda x:[x.timezone(), x.day()]) */
            System.out.println("About to run #15: tutcs.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tutcs.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #16
            /* ([["-00:59", 29], ["-01:00", 29], ["-01:01", 29]]) */
            List expected_ = r.array(r.array("-00:59", 29L), r.array("-01:00", 29L), r.array("-01:01", 29L));
            /* tms.map(lambda x:[x.timezone(), x.day()]) */
            System.out.println("About to run #16: tms.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tms.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #17
            /* ([["+00:59", 30], ["+01:00", 30], ["+01:01", 30]]) */
            List expected_ = r.array(r.array("+00:59", 30L), r.array("+01:00", 30L), r.array("+01:01", 30L));
            /* tps.map(lambda x:[x.timezone(), x.day()]) */
            System.out.println("About to run #17: tps.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tps.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #18
            /* ([0]) */
            List expected_ = r.array(0L);
            /* ts.concat_map(lambda x:ts.map(lambda y:x - y)).distinct() */
            System.out.println("About to run #18: ts.concatMap(x -> ts.map(y -> r.sub(x, y))).distinct()");
            Object obtained = runOrCatch(ts.concatMap(x -> ts.map(y -> r.sub(x, y))).distinct(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #19
            /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.");
            /* r.now().in_timezone("") */
            System.out.println("About to run #19: r.now().inTimezone('')");
            Object obtained = runOrCatch(r.now().inTimezone(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #20
            /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00` is not a valid time offset.");
            /* r.now().in_timezone("-00") */
            System.out.println("About to run #20: r.now().inTimezone('-00')");
            Object obtained = runOrCatch(r.now().inTimezone("-00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #21
            /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.");
            /* r.now().in_timezone("-00:00") */
            System.out.println("About to run #21: r.now().inTimezone('-00:00')");
            Object obtained = runOrCatch(r.now().inTimezone("-00:00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #22
            /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.");
            /* r.now().in_timezone("UTC+00") */
            System.out.println("About to run #22: r.now().inTimezone('UTC+00')");
            Object obtained = runOrCatch(r.now().inTimezone("UTC+00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #23
            /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
            Err expected_ = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.");
            /* r.now().in_timezone("+00:60") */
            System.out.println("About to run #23: r.now().inTimezone('+00:60')");
            Object obtained = runOrCatch(r.now().inTimezone("+00:60"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #24
            /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
            Err expected_ = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.");
            /* r.now().in_timezone("+25:00") */
            System.out.println("About to run #24: r.now().inTimezone('+25:00')");
            Object obtained = runOrCatch(r.now().inTimezone("+25:00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #25
            /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.");
            /* r.time(2013, 1, 1, "") */
            System.out.println("About to run #25: r.time(2013L, 1L, 1L, '')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, ""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #26
            /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00` is not a valid time offset.");
            /* r.time(2013, 1, 1, "-00") */
            System.out.println("About to run #26: r.time(2013L, 1L, 1L, '-00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "-00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #27
            /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.");
            /* r.time(2013, 1, 1, "-00:00") */
            System.out.println("About to run #27: r.time(2013L, 1L, 1L, '-00:00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "-00:00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #28
            /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.");
            /* r.time(2013, 1, 1, "UTC+00") */
            System.out.println("About to run #28: r.time(2013L, 1L, 1L, 'UTC+00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "UTC+00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #29
            /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
            Err expected_ = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.");
            /* r.time(2013, 1, 1, "+00:60") */
            System.out.println("About to run #29: r.time(2013L, 1L, 1L, '+00:60')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "+00:60"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #30
            /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
            Err expected_ = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.");
            /* r.time(2013, 1, 1, "+25:00") */
            System.out.println("About to run #30: r.time(2013L, 1L, 1L, '+25:00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "+25:00"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #31
            /* ("2015-07-08T00:00:00-08:00") */
            String expected_ = "2015-07-08T00:00:00-08:00";
            /* r.epoch_time(1436428422.339).in_timezone('-08:00').date().to_iso8601() */
            System.out.println("About to run #31: r.epochTime(1436428422.339).inTimezone('-08:00').date().toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1436428422.339).inTimezone("-08:00").date().toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/timezones.yaml #32
            /* ("2015-07-09T00:00:00-07:00") */
            String expected_ = "2015-07-09T00:00:00-07:00";
            /* r.epoch_time(1436428422.339).in_timezone('-07:00').date().to_iso8601() */
            System.out.println("About to run #32: r.epochTime(1436428422.339).inTimezone('-07:00').date().toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1436428422.339).inTimezone("-07:00").date().toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
