// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class GeoGeojson {
    Logger logger = LoggerFactory.getLogger(GeoGeojson.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // geo/geojson.yaml #1
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[0, 0], 'type':'Point'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(0L, 0L)).with("type", "Point");
            /* r.geojson({'coordinates':[0, 0], 'type':'Point'}) */
            System.out.println("About to run #1: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)).with('type', 'Point'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L)).with("type", "Point")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #2
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[0,0], [0,1]], 'type':'LineString'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(0L, 0L), r.array(0L, 1L))).with("type", "LineString");
            /* r.geojson({'coordinates':[[0,0], [0,1]], 'type':'LineString'}) */
            System.out.println("About to run #2: r.geojson(r.hashMap('coordinates', r.array(r.array(0L, 0L), r.array(0L, 1L))).with('type', 'LineString'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(r.array(0L, 0L), r.array(0L, 1L))).with("type", "LineString")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #3
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0], [0,1], [1,0], [0,0]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, 0L), r.array(0L, 1L), r.array(1L, 0L), r.array(0L, 0L)))).with("type", "Polygon");
            /* r.geojson({'coordinates':[[[0,0], [0,1], [1,0], [0,0]]], 'type':'Polygon'}) */
            System.out.println("About to run #3: r.geojson(r.hashMap('coordinates', r.array(r.array(r.array(0L, 0L), r.array(0L, 1L), r.array(1L, 0L), r.array(0L, 0L)))).with('type', 'Polygon'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(r.array(r.array(0L, 0L), r.array(0L, 1L), r.array(1L, 0L), r.array(0L, 0L)))).with("type", "Polygon")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #4
            /* err('ReqlQueryLogicError', 'Expected type NUMBER but found ARRAY.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found ARRAY.", r.array(0L));
            /* r.geojson({'coordinates':[[], 0], 'type':'Point'}) */
            System.out.println("About to run #4: r.geojson(r.hashMap('coordinates', r.array(r.array(), 0L)).with('type', 'Point'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(r.array(), 0L)).with("type", "Point")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #5
            /* err('ReqlQueryLogicError', 'Expected type ARRAY but found BOOL.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type ARRAY but found BOOL.", r.array(0L));
            /* r.geojson({'coordinates':true, 'type':'Point'}) */
            System.out.println("About to run #5: r.geojson(r.hashMap('coordinates', true).with('type', 'Point'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", true).with("type", "Point")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #6
            /* err('ReqlNonExistenceError', 'No attribute `coordinates` in object:', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `coordinates` in object:", r.array(0L));
            /* r.geojson({'type':'Point'}) */
            System.out.println("About to run #6: r.geojson(r.hashMap('type', 'Point'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("type", "Point")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #7
            /* err('ReqlNonExistenceError', 'No attribute `type` in object:', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `type` in object:", r.array(0L));
            /* r.geojson({'coordinates':[0, 0]}) */
            System.out.println("About to run #7: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #8
            /* err('ReqlQueryLogicError', 'Unrecognized GeoJSON type `foo`.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Unrecognized GeoJSON type `foo`.", r.array(0L));
            /* r.geojson({'coordinates':[0, 0], 'type':'foo'}) */
            System.out.println("About to run #8: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)).with('type', 'foo'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L)).with("type", "foo")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #9
            /* err('ReqlQueryLogicError', 'Unrecognized field `foo` found in geometry object.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Unrecognized field `foo` found in geometry object.", r.array(0L));
            /* r.geojson({'coordinates':[0, 0], 'type':'Point', 'foo':'wrong'}) */
            System.out.println("About to run #9: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)).with('type', 'Point').with('foo', 'wrong'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L)).with("type", "Point").with("foo", "wrong")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #10
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[0, 0], 'type':'Point', 'crs':null}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(0L, 0L)).with("type", "Point").with("crs", null);
            /* r.geojson({'coordinates':[0, 0], 'type':'Point', 'crs':null}) */
            System.out.println("About to run #10: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)).with('type', 'Point').with('crs', null))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L)).with("type", "Point").with("crs", null)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/geojson.yaml #12
            /* err('ReqlQueryLogicError', 'GeoJSON type `MultiPoint` is not supported.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "GeoJSON type `MultiPoint` is not supported.", r.array(0L));
            /* r.geojson({'coordinates':[0, 0], 'type':'MultiPoint'}) */
            System.out.println("About to run #12: r.geojson(r.hashMap('coordinates', r.array(0L, 0L)).with('type', 'MultiPoint'))");
            Object obtained = runOrCatch(r.geojson(r.hashMap("coordinates", r.array(0L, 0L)).with("type", "MultiPoint")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
