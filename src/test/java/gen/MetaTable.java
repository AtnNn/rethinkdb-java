// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MetaTable {
    Logger logger = LoggerFactory.getLogger(MetaTable.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // meta/table.yaml #1
        // db = r.db('test')
        System.out.println("Possibly executing: Db db = (Db) (r.db('test'));");
        Db db = (Db) (r.db("test"));
                
        {
            // meta/table.yaml #2
            /* [] */
            List expected_ = r.array();
            /* db.table_list() */
            System.out.println("About to run #2: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #3
            /* ({'type':'DB','name':'rethinkdb','id':null}) */
            Map expected_ = r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null);
            /* r.db('rethinkdb').info() */
            System.out.println("About to run #3: r.db('rethinkdb').info()");
            Object obtained = runOrCatch(r.db("rethinkdb").info(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #4
            /* partial({'db':{'type':'DB','name':'rethinkdb','id':null}, 'type':'TABLE','id':null,'name':'stats', 'indexes':[],'primary_key':'id'}) */
            Partial expected_ = partial(r.hashMap("db", r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null)).with("type", "TABLE").with("id", null).with("name", "stats").with("indexes", r.array()).with("primary_key", "id"));
            /* r.db('rethinkdb').table('stats').info() */
            System.out.println("About to run #4: r.db('rethinkdb').table('stats').info()");
            Object obtained = runOrCatch(r.db("rethinkdb").table("stats").info(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #5
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            System.out.println("About to run #5: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #6
            /* ['a'] */
            List expected_ = r.array("a");
            /* db.table_list() */
            System.out.println("About to run #6: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #7
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('b') */
            System.out.println("About to run #7: db.tableCreate('b')");
            Object obtained = runOrCatch(db.tableCreate("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #8
            /* bag(['a', 'b']) */
            Bag expected_ = bag(r.array("a", "b"));
            /* db.table_list() */
            System.out.println("About to run #8: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #9
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            System.out.println("About to run #9: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #10
            /* ['b'] */
            List expected_ = r.array("b");
            /* db.table_list() */
            System.out.println("About to run #10: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #11
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('b') */
            System.out.println("About to run #11: db.tableDrop('b')");
            Object obtained = runOrCatch(db.tableDrop("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #12
            /* [] */
            List expected_ = r.array();
            /* db.table_list() */
            System.out.println("About to run #12: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #13
            /* partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'soft'})})]}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "soft")))))));
            /* db.table_create('ab', durability='soft') */
            System.out.println("About to run #13: db.tableCreate('ab').optArg('durability', 'soft')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "soft"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #14
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            System.out.println("About to run #14: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #15
            /* partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'hard'})})]}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "hard")))))));
            /* db.table_create('ab', durability='hard') */
            System.out.println("About to run #15: db.tableCreate('ab').optArg('durability', 'hard')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "hard"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #16
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            System.out.println("About to run #16: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #17
            /* err('ReqlQueryLogicError', 'Durability option `fake` unrecognized (options are "hard" and "soft").') */
            Err expected_ = err("ReqlQueryLogicError", "Durability option `fake` unrecognized (options are \"hard\" and \"soft\").");
            /* db.table_create('ab', durability='fake') */
            System.out.println("About to run #17: db.tableCreate('ab').optArg('durability', 'fake')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "fake"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #18
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', primary_key='bar', shards=2, replicas=1) */
            System.out.println("About to run #18: db.tableCreate('ab').optArg('primary_key', 'bar').optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("primary_key", "bar").optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #19
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            System.out.println("About to run #19: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #20
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', primary_key='bar', primary_replica_tag='default') */
            System.out.println("About to run #20: db.tableCreate('ab').optArg('primary_key', 'bar').optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("primary_key", "bar").optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #21
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            System.out.println("About to run #21: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #22
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', nonvoting_replica_tags=['default']) */
            System.out.println("About to run #22: db.tableCreate('ab').optArg('nonvoting_replica_tags', r.array('default'))");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("nonvoting_replica_tags", r.array("default")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #23
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            System.out.println("About to run #23: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #24
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            System.out.println("About to run #24: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #25
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=1, replicas=1) */
            System.out.println("About to run #25: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #26
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, nonvoting_replica_tags=['default'], primary_replica_tag='default') */
            System.out.println("About to run #26: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('nonvoting_replica_tags', r.array('default')).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("nonvoting_replica_tags", r.array("default")).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #27
            /* partial({'reconfigured':0}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 0L));
            /* db.table('a').reconfigure(shards=1, replicas=1, dry_run=True) */
            System.out.println("About to run #27: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 1L).optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #28
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback") */
            System.out.println("About to run #28: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #29
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback", dry_run=True) */
            System.out.println("About to run #29: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback').optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #30
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback_or_erase") */
            System.out.println("About to run #30: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback_or_erase')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback_or_erase"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #31
            /* partial({'reconfigured':0}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 0L));
            /* db.table('a').reconfigure(emergency_repair=None, shards=1, replicas=1, dry_run=True) */
            System.out.println("About to run #31: db.table('a').reconfigure().optArg('emergency_repair', null).optArg('shards', 1L).optArg('replicas', 1L).optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", null).optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #32
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            System.out.println("About to run #32: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #33
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('foo') */
            System.out.println("About to run #33: db.tableCreate('foo')");
            Object obtained = runOrCatch(db.tableCreate("foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #34
            /* err('ReqlOpFailedError', 'Table `test.foo` already exists.', [0]) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.foo` already exists.", r.array(0L));
            /* db.table_create('foo') */
            System.out.println("About to run #34: db.tableCreate('foo')");
            Object obtained = runOrCatch(db.tableCreate("foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #35
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('foo') */
            System.out.println("About to run #35: db.tableDrop('foo')");
            Object obtained = runOrCatch(db.tableDrop("foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #36
            /* err('ReqlOpFailedError', 'Table `test.foo` does not exist.', [0]) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.foo` does not exist.", r.array(0L));
            /* db.table_drop('foo') */
            System.out.println("About to run #36: db.tableDrop('foo')");
            Object obtained = runOrCatch(db.tableDrop("foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #38
            /* err('ReqlCompileError', "Unrecognized optional argument `foo`.", []) */
            Err expected_ = err("ReqlCompileError", "Unrecognized optional argument `foo`.", r.array());
            /* db.table_create('nonsense', foo='bar') */
            System.out.println("About to run #38: db.tableCreate('nonsense').optArg('foo', 'bar')");
            Object obtained = runOrCatch(db.tableCreate("nonsense").optArg("foo", "bar"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #39
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            System.out.println("About to run #39: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #40
            /* err('ReqlQueryLogicError', 'Every table must have at least one shard.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array());
            /* db.table('a').reconfigure(shards=0, replicas=1) */
            System.out.println("About to run #40: db.table('a').reconfigure().optArg('shards', 0L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 0L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #41
            /* err('ReqlOpFailedError', 'Can\'t use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.', [])
 */
            Err expected_ = err("ReqlOpFailedError", "Can't use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="foo") */
            System.out.println("About to run #41: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #42
            /* err('ReqlOpFailedError', 'You specified that the replicas in server tag `foo` should be non-voting, but you didn\'t specify a number of replicas in server tag `foo`.', [])
 */
            Err expected_ = err("ReqlOpFailedError", "You specified that the replicas in server tag `foo` should be non-voting, but you didn't specify a number of replicas in server tag `foo`.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="default", nonvoting_replica_tags=["foo"]) */
            System.out.println("About to run #42: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('primary_replica_tag', 'default').optArg('nonvoting_replica_tags', r.array('foo'))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "default").optArg("nonvoting_replica_tags", r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #43
            /* err('ReqlOpFailedError', 'You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.', [])
 */
            Err expected_ = err("ReqlOpFailedError", "You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"foo":0}, primary_replica_tag="foo") */
            System.out.println("About to run #43: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('foo', 0L)).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("foo", 0L)).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #44
            /* err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":0}) */
            System.out.println("About to run #44: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 0L))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #45
            /* err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', []) */
            Err expected_ = err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default') */
            System.out.println("About to run #45: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', -3L)).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #46
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=3, primary_replica_tag='foo') */
            System.out.println("About to run #46: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #47
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.', [])
 */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=3, nonvoting_replica_tags=['foo']) */
            System.out.println("About to run #47: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('nonvoting_replica_tags', r.array('foo'))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("nonvoting_replica_tags", r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #48
            /* err('ReqlQueryLogicError', 'Can\'t emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.')
 */
            Err expected_ = err("ReqlQueryLogicError", "Can't emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.");
            /* db.reconfigure(emergency_repair="unsafe_rollback") */
            System.out.println("About to run #48: db.reconfigure().optArg('emergency_repair', 'unsafe_rollback')");
            Object obtained = runOrCatch(db.reconfigure().optArg("emergency_repair", "unsafe_rollback"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #49
            /* err('ReqlQueryLogicError', '`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"', []) */
            Err expected_ = err("ReqlQueryLogicError", "`emergency_repair` should be \"unsafe_rollback\" or \"unsafe_rollback_or_erase\"", r.array());
            /* db.table('a').reconfigure(emergency_repair="foo") */
            System.out.println("About to run #49: db.table('a').reconfigure().optArg('emergency_repair', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #50
            /* err('ReqlQueryLogicError', 'In emergency repair mode, you can\'t specify shards, replicas, etc.') */
            Err expected_ = err("ReqlQueryLogicError", "In emergency repair mode, you can't specify shards, replicas, etc.");
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback", shards=1, replicas=1) */
            System.out.println("About to run #50: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback').optArg('shards', 1L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("shards", 1L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #51
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=2, replicas=1) */
            System.out.println("About to run #51: db.table('a').reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #51");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #51");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #52
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table('a').wait() */
            System.out.println("About to run #52: db.table('a').wait_()");
            Object obtained = runOrCatch(db.table("a").wait_(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #52");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #52");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #53
            /* partial({"inserted":4}) */
            Partial expected_ = partial(r.hashMap("inserted", 4L));
            /* db.table('a').insert([{"id":1}, {"id":2}, {"id":3}, {"id":4}]) */
            System.out.println("About to run #53: db.table('a').insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L), r.hashMap('id', 3L), r.hashMap('id', 4L)))");
            Object obtained = runOrCatch(db.table("a").insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L), r.hashMap("id", 3L), r.hashMap("id", 4L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #53");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #53");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #54
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=2, replicas=1) */
            System.out.println("About to run #54: db.table('a').reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #54");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #54");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #55
            /* err('ReqlOpFailedError', 'Can\'t put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It\'s impossible to have more replicas of the data than there are servers.', [])
 */
            Err expected_ = err("ReqlOpFailedError", "Can't put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It's impossible to have more replicas of the data than there are servers.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=2) */
            System.out.println("About to run #55: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 2L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #55");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #55");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #56
            /* partial({'ready':1}) */
            Partial expected_ = partial(r.hashMap("ready", 1L));
            /* db.table('a').wait() */
            System.out.println("About to run #56: db.table('a').wait_()");
            Object obtained = runOrCatch(db.table("a").wait_(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #56");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #56");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #57
            /* partial({'rebalanced':1}) */
            Partial expected_ = partial(r.hashMap("rebalanced", 1L));
            /* db.table('a').rebalance() */
            System.out.println("About to run #57: db.table('a').rebalance()");
            Object obtained = runOrCatch(db.table("a").rebalance(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #57");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #57");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #58
            /* partial({'ready':1}) */
            Partial expected_ = partial(r.hashMap("ready", 1L));
            /* db.wait() */
            System.out.println("About to run #58: db.wait_()");
            Object obtained = runOrCatch(db.wait_(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #58");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #58");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #59
            /* partial({'rebalanced':1}) */
            Partial expected_ = partial(r.hashMap("rebalanced", 1L));
            /* db.rebalance() */
            System.out.println("About to run #59: db.rebalance()");
            Object obtained = runOrCatch(db.rebalance(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #59");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #59");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #60
            /* partial({'ready':1}) */
            Partial expected_ = partial(r.hashMap("ready", 1L));
            /* r.wait() */
            System.out.println("About to run #60: r.wait_()");
            Object obtained = runOrCatch(r.wait_(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #60");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #60");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #61
            /* partial({'rebalanced':1}) */
            Partial expected_ = partial(r.hashMap("rebalanced", 1L));
            /* r.rebalance() */
            System.out.println("About to run #61: r.rebalance()");
            Object obtained = runOrCatch(r.rebalance(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #61");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #61");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #62
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            System.out.println("About to run #62: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #62");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #62");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #63
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('a') */
            System.out.println("About to run #63: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #63");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #63");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #64
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('b') */
            System.out.println("About to run #64: db.tableCreate('b')");
            Object obtained = runOrCatch(db.tableCreate("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #64");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #64");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #65
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('c') */
            System.out.println("About to run #65: db.tableCreate('c')");
            Object obtained = runOrCatch(db.tableCreate("c"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #65");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #65");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #66
            /* err('ReqlQueryLogicError', 'Every table must have at least one shard.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array());
            /* db.reconfigure(shards=0, replicas=1) */
            System.out.println("About to run #66: db.reconfigure().optArg('shards', 0L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 0L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #66");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #66");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #67
            /* err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array());
            /* db.reconfigure(shards=1, replicas={"default":0}) */
            System.out.println("About to run #67: db.reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 0L))");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #67");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #67");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #68
            /* err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', []) */
            Err expected_ = err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array());
            /* db.reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default') */
            System.out.println("About to run #68: db.reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', -3L)).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #68");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #68");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #69
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array());
            /* db.reconfigure(shards=1, replicas=3, primary_replica_tag='foo') */
            System.out.println("About to run #69: db.reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #69");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #69");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #70
            /* partial({'reconfigured':3}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 3L));
            /* db.reconfigure(shards=2, replicas=1) */
            System.out.println("About to run #70: db.reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #70");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #70");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #71
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            System.out.println("About to run #71: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #71");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #71");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #72
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('b') */
            System.out.println("About to run #72: db.tableDrop('b')");
            Object obtained = runOrCatch(db.tableDrop("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #72");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #72");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #73
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('c') */
            System.out.println("About to run #73: db.tableDrop('c')");
            Object obtained = runOrCatch(db.tableDrop("c"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #73");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #73");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #74
            /* partial({'dbs_created':1}) */
            Partial expected_ = partial(r.hashMap("dbs_created", 1L));
            /* r.db_create("test2") */
            System.out.println("About to run #74: r.dbCreate('test2')");
            Object obtained = runOrCatch(r.dbCreate("test2"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #74");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #74");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // meta/table.yaml #75
        // db2 = r.db("test2")
        System.out.println("Possibly executing: Db db2 = (Db) (r.db('test2'));");
        Db db2 = (Db) (r.db("test2"));
                
        {
            // meta/table.yaml #76
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create("testA") */
            System.out.println("About to run #76: db.tableCreate('testA')");
            Object obtained = runOrCatch(db.tableCreate("testA"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #76");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #76");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #77
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create("testB") */
            System.out.println("About to run #77: db.tableCreate('testB')");
            Object obtained = runOrCatch(db.tableCreate("testB"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #77");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #77");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #77:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #78
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db2.table_create("test2B") */
            System.out.println("About to run #78: db2.tableCreate('test2B')");
            Object obtained = runOrCatch(db2.tableCreate("test2B"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #78");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #78");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #79
            /* {'db': 'test', 'name': 'testA'} */
            Map expected_ = r.hashMap("db", "test").with("name", "testA");
            /* r.table('testA').config().pluck('db','name') */
            System.out.println("About to run #79: r.table('testA').config().pluck('db', 'name')");
            Object obtained = runOrCatch(r.table("testA").config().pluck("db", "name"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #79");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #79");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #79:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #80
            /* err('ReqlOpFailedError', 'Table `test.doesntexist` does not exist.', []) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.doesntexist` does not exist.", r.array());
            /* r.table('doesntexist').config() */
            System.out.println("About to run #80: r.table('doesntexist').config()");
            Object obtained = runOrCatch(r.table("doesntexist").config(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #80");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #80");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #81
            /* err('ReqlOpFailedError', 'Table `test.test2B` does not exist.', []) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.test2B` does not exist.", r.array());
            /* r.table('test2B').config() */
            System.out.println("About to run #81: r.table('test2B').config()");
            Object obtained = runOrCatch(r.table("test2B").config(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #81");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #81");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #82
            /* True */
            Boolean expected_ = true;
            /* r.db('rethinkdb').table('table_config').filter({'name':'testA'}).nth(0).eq(r.table('testA').config()) */
            System.out.println("About to run #82: r.db('rethinkdb').table('table_config').filter(r.hashMap('name', 'testA')).nth(0L).eq(r.table('testA').config())");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_config").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").config()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #82");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #82");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #83
            /* True */
            Boolean expected_ = true;
            /* r.db('rethinkdb').table('table_status').filter({'name':'testA'}).nth(0).eq(r.table('testA').status()) */
            System.out.println("About to run #83: r.db('rethinkdb').table('table_status').filter(r.hashMap('name', 'testA')).nth(0L).eq(r.table('testA').status())");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_status").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").status()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #83");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #83");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #84
            /* uuid() */
            UUIDMatch expected_ = uuid();
            /* r.db('rethinkdb').table('table_config', identifier_format='uuid').nth(0)["db"] */
            System.out.println("About to run #84: r.db('rethinkdb').table('table_config').optArg('identifier_format', 'uuid').nth(0L).bracket('db')");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_config").optArg("identifier_format", "uuid").nth(0L).bracket("db"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #84");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #84");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #85
            /* 0 */
            Long expected_ = 0L;
            /* r.table('testA', identifier_format='uuid').count() */
            System.out.println("About to run #85: r.table('testA').optArg('identifier_format', 'uuid').count()");
            Object obtained = runOrCatch(r.table("testA").optArg("identifier_format", "uuid").count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #85");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #85");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #86
            /* partial({'ready':2}) */
            Partial expected_ = partial(r.hashMap("ready", 2L));
            /* r.wait(wait_for='all_replicas_ready', timeout=5) */
            System.out.println("About to run #86: r.wait_().optArg('wait_for', 'all_replicas_ready').optArg('timeout', 5L)");
            Object obtained = runOrCatch(r.wait_().optArg("wait_for", "all_replicas_ready").optArg("timeout", 5L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #86");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #86");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #87
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('testA') */
            System.out.println("About to run #87: db.tableDrop('testA')");
            Object obtained = runOrCatch(db.tableDrop("testA"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #87");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #87");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #88
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('testB') */
            System.out.println("About to run #88: db.tableDrop('testB')");
            Object obtained = runOrCatch(db.tableDrop("testB"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #88");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #88");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // meta/table.yaml #89
            /* partial({'dbs_dropped':1,'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("dbs_dropped", 1L).with("tables_dropped", 1L));
            /* r.db_drop('test2') */
            System.out.println("About to run #89: r.dbDrop('test2')");
            Object obtained = runOrCatch(r.dbDrop("test2"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #89");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #89");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
