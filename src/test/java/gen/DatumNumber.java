// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class DatumNumber {
    Logger logger = LoggerFactory.getLogger(DatumNumber.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // datum/number.yaml #1
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1) */
            System.out.println("About to run #1: r.expr(1L)");
            Object obtained = runOrCatch(r.expr(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #2
            /* -1 */
            Long expected_ = -1L;
            /* r.expr(-1) */
            System.out.println("About to run #2: r.expr(-1L)");
            Object obtained = runOrCatch(r.expr(-1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #3
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(0) */
            System.out.println("About to run #3: r.expr(0L)");
            Object obtained = runOrCatch(r.expr(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #4
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0) */
            System.out.println("About to run #4: r.expr(1.0)");
            Object obtained = runOrCatch(r.expr(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #5
            /* 1.5 */
            Double expected_ = 1.5;
            /* r.expr(1.5) */
            System.out.println("About to run #5: r.expr(1.5)");
            Object obtained = runOrCatch(r.expr(1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #6
            /* -0.5 */
            Double expected_ = -0.5;
            /* r.expr(-0.5) */
            System.out.println("About to run #6: r.expr(-0.5)");
            Object obtained = runOrCatch(r.expr(-0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #7
            /* 67498.89278 */
            Double expected_ = 67498.89278;
            /* r.expr(67498.89278) */
            System.out.println("About to run #7: r.expr(67498.89278)");
            Object obtained = runOrCatch(r.expr(67498.89278),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #8
            /* 1234567890 */
            Long expected_ = 1234567890L;
            /* r.expr(1234567890) */
            System.out.println("About to run #8: r.expr(1234567890L)");
            Object obtained = runOrCatch(r.expr(1234567890L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #9
            /* -73850380122423 */
            Long expected_ = -73850380122423L;
            /* r.expr(-73850380122423) */
            System.out.println("About to run #9: r.expr(-73850380122423L)");
            Object obtained = runOrCatch(r.expr(-73850380122423L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #10
            /* float(1234567890123456789012345678901234567890) */
            Double expected_ = float_(1234567890123456789012345678901234567890.0);
            /* r.expr(1234567890123456789012345678901234567890) */
            System.out.println("About to run #10: r.expr(1234567890123456789012345678901234567890.0)");
            Object obtained = runOrCatch(r.expr(1234567890123456789012345678901234567890.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #11
            /* (123.4567890123456789012345678901234567890) */
            Double expected_ = 123.45678901234568;
            /* r.expr(123.4567890123456789012345678901234567890) */
            System.out.println("About to run #11: r.expr(123.45678901234568)");
            Object obtained = runOrCatch(r.expr(123.45678901234568),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #12
            /* 'NUMBER' */
            String expected_ = "NUMBER";
            /* r.expr(1).type_of() */
            System.out.println("About to run #12: r.expr(1L).typeOf()");
            Object obtained = runOrCatch(r.expr(1L).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #13
            /* '1' */
            String expected_ = "1";
            /* r.expr(1).coerce_to('string') */
            System.out.println("About to run #13: r.expr(1L).coerceTo('string')");
            Object obtained = runOrCatch(r.expr(1L).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #14
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).coerce_to('number') */
            System.out.println("About to run #14: r.expr(1L).coerceTo('number')");
            Object obtained = runOrCatch(r.expr(1L).coerceTo("number"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #15
            /* int_cmp(1) */
            IntCmp expected_ = int_cmp(1L);
            /* r.expr(1.0) */
            System.out.println("About to run #15: r.expr(1.0)");
            Object obtained = runOrCatch(r.expr(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #16
            /* int_cmp(45) */
            IntCmp expected_ = int_cmp(45L);
            /* r.expr(45) */
            System.out.println("About to run #16: r.expr(45L)");
            Object obtained = runOrCatch(r.expr(45L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // datum/number.yaml #17
            /* float_cmp(1.2) */
            FloatCmp expected_ = float_cmp(1.2);
            /* r.expr(1.2) */
            System.out.println("About to run #17: r.expr(1.2)");
            Object obtained = runOrCatch(r.expr(1.2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
