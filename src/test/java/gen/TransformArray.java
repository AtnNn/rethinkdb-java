// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class TransformArray {
    Logger logger = LoggerFactory.getLogger(TransformArray.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // transform/array.yaml #1
        // arr = r.expr([1, 2, 3])
        System.out.println("Possibly executing: MakeArray arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L)));");
        MakeArray arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L)));
                
        // transform/array.yaml #2
        // dupe_arr = r.expr([1, 1, 2, 3])
        System.out.println("Possibly executing: MakeArray dupe_arr = (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)));");
        MakeArray dupe_arr = (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)));
                
        // transform/array.yaml #3
        // objArr = r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])
        System.out.println("Possibly executing: MakeArray objArr = (MakeArray) (r.expr(r.array(r.hashMap('a', 1L).with('b', 'a'), r.hashMap('a', 2L).with('b', 'b'), r.hashMap('a', 3L).with('b', 'c'))));");
        MakeArray objArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))));
                
        // transform/array.yaml #4
        // nestedObjArr = r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])
        System.out.println("Possibly executing: MakeArray nestedObjArr = (MakeArray) (r.expr(r.array(r.hashMap('a', 1L).with('b', r.hashMap('c', 1L)), r.hashMap('a', 2L).with('b', r.hashMap('c', 2L)), r.hashMap('a', 3L).with('b', r.hashMap('c', 3L)))));");
        MakeArray nestedObjArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", r.hashMap("c", 1L)), r.hashMap("a", 2L).with("b", r.hashMap("c", 2L)), r.hashMap("a", 3L).with("b", r.hashMap("c", 3L)))));
                
        {
            // transform/array.yaml #5
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* arr.append(4) */
            System.out.println("About to run #5: arr.append(4L)");
            Object obtained = runOrCatch(arr.append(4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #6
            /* [1, 2, 3, 'a'] */
            List expected_ = r.array(1L, 2L, 3L, "a");
            /* arr.append('a') */
            System.out.println("About to run #6: arr.append('a')");
            Object obtained = runOrCatch(arr.append("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #7
            /* [0, 1, 2, 3] */
            List expected_ = r.array(0L, 1L, 2L, 3L);
            /* arr.prepend(0) */
            System.out.println("About to run #7: arr.prepend(0L)");
            Object obtained = runOrCatch(arr.prepend(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #8
            /* ['a', 1, 2, 3] */
            List expected_ = r.array("a", 1L, 2L, 3L);
            /* arr.prepend('a') */
            System.out.println("About to run #8: arr.prepend('a')");
            Object obtained = runOrCatch(arr.prepend("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #9
            /* [3] */
            List expected_ = r.array(3L);
            /* arr.difference([1,2,2]) */
            System.out.println("About to run #9: arr.difference(r.array(1L, 2L, 2L))");
            Object obtained = runOrCatch(arr.difference(r.array(1L, 2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #10
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.difference([]) */
            System.out.println("About to run #10: arr.difference(r.array())");
            Object obtained = runOrCatch(arr.difference(r.array()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #11
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.difference(["foo", "bar"]) */
            System.out.println("About to run #11: arr.difference(r.array('foo', 'bar'))");
            Object obtained = runOrCatch(arr.difference(r.array("foo", "bar")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #12
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* dupe_arr.set_insert(1) */
            System.out.println("About to run #12: dupe_arr.setInsert(1L)");
            Object obtained = runOrCatch(dupe_arr.setInsert(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #13
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* dupe_arr.set_insert(4) */
            System.out.println("About to run #13: dupe_arr.setInsert(4L)");
            Object obtained = runOrCatch(dupe_arr.setInsert(4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #14
            /* [1, 2, 3, 4, 5] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L);
            /* dupe_arr.set_union([3,4,5,5]) */
            System.out.println("About to run #14: dupe_arr.setUnion(r.array(3L, 4L, 5L, 5L))");
            Object obtained = runOrCatch(dupe_arr.setUnion(r.array(3L, 4L, 5L, 5L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #15
            /* [1, 2, 3, 5, 6] */
            List expected_ = r.array(1L, 2L, 3L, 5L, 6L);
            /* dupe_arr.set_union([5,6]) */
            System.out.println("About to run #15: dupe_arr.setUnion(r.array(5L, 6L))");
            Object obtained = runOrCatch(dupe_arr.setUnion(r.array(5L, 6L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #16
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* dupe_arr.set_intersection([1,1,1,2,2]) */
            System.out.println("About to run #16: dupe_arr.setIntersection(r.array(1L, 1L, 1L, 2L, 2L))");
            Object obtained = runOrCatch(dupe_arr.setIntersection(r.array(1L, 1L, 1L, 2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #17
            /* [] */
            List expected_ = r.array();
            /* dupe_arr.set_intersection(["foo"]) */
            System.out.println("About to run #17: dupe_arr.setIntersection(r.array('foo'))");
            Object obtained = runOrCatch(dupe_arr.setIntersection(r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #18
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* dupe_arr.set_difference([1,1,1,10]) */
            System.out.println("About to run #18: dupe_arr.setDifference(r.array(1L, 1L, 1L, 10L))");
            Object obtained = runOrCatch(dupe_arr.setDifference(r.array(1L, 1L, 1L, 10L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #19
            /* [1, 3] */
            List expected_ = r.array(1L, 3L);
            /* dupe_arr.set_difference([2]) */
            System.out.println("About to run #19: dupe_arr.setDifference(r.array(2L))");
            Object obtained = runOrCatch(dupe_arr.setDifference(r.array(2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(20, 1)
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr[1:3] */
            System.out.println("About to run #(20, 1): arr.slice(1, 3)");
            Object obtained = runOrCatch(arr.slice(1, 3),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(20, 2)
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1, 3) */
            System.out.println("About to run #(20, 2): arr.slice(1L, 3L)");
            Object obtained = runOrCatch(arr.slice(1L, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(20, 3)
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1, 2, right_bound='closed') */
            System.out.println("About to run #(20, 3): arr.slice(1L, 2L).optArg('right_bound', 'closed')");
            Object obtained = runOrCatch(arr.slice(1L, 2L).optArg("right_bound", "closed"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(20, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(20, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(20, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(21, 1)
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* arr[:2] */
            System.out.println("About to run #(21, 1): arr.slice(0, 2)");
            Object obtained = runOrCatch(arr.slice(0, 2),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(21, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(21, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(21, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(21, 2)
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* arr.slice(0,2) */
            System.out.println("About to run #(21, 2): arr.slice(0L, 2L)");
            Object obtained = runOrCatch(arr.slice(0L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(21, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(21, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(21, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(22, 1)
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr[1:] */
            System.out.println("About to run #(22, 1): arr.slice(1, -1).optArg('right_bound', 'closed')");
            Object obtained = runOrCatch(arr.slice(1, -1).optArg("right_bound", "closed"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(22, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(22, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(22, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(22, 2)
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1) */
            System.out.println("About to run #(22, 2): arr.slice(1L)");
            Object obtained = runOrCatch(arr.slice(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(22, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(22, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(22, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #23
            /* [2] */
            List expected_ = r.array(2L);
            /* arr.slice(-2, -1) */
            System.out.println("About to run #23: arr.slice(-2L, -1L)");
            Object obtained = runOrCatch(arr.slice(-2L, -1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #24
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.skip(1) */
            System.out.println("About to run #24: arr.skip(1L)");
            Object obtained = runOrCatch(arr.skip(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #25
            /* [3] */
            List expected_ = r.array(3L);
            /* arr.skip(2) */
            System.out.println("About to run #25: arr.skip(2L)");
            Object obtained = runOrCatch(arr.skip(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #26
            /* [] */
            List expected_ = r.array();
            /* arr.skip(12) */
            System.out.println("About to run #26: arr.skip(12L)");
            Object obtained = runOrCatch(arr.skip(12L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #27
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* arr.limit(2) */
            System.out.println("About to run #27: arr.limit(2L)");
            Object obtained = runOrCatch(arr.limit(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #28
            /* [] */
            List expected_ = r.array();
            /* arr.limit(0) */
            System.out.println("About to run #28: arr.limit(0L)");
            Object obtained = runOrCatch(arr.limit(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #29
            /* [1, 2, 3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.limit(12) */
            System.out.println("About to run #29: arr.limit(12L)");
            Object obtained = runOrCatch(arr.limit(12L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #30
            /* [{'b': 'a', 'a': 1}, {'b': 'b', 'a': 2}, {'b': 'c', 'a': 3}] */
            List expected_ = r.array(r.hashMap("b", "a").with("a", 1L), r.hashMap("b", "b").with("a", 2L), r.hashMap("b", "c").with("a", 3L));
            /* objArr.pluck('a', 'b') */
            System.out.println("About to run #30: objArr.pluck('a', 'b')");
            Object obtained = runOrCatch(objArr.pluck("a", "b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #31
            /* [{'a': 1}, {'a': 2}, {'a': 3}] */
            List expected_ = r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L));
            /* objArr.pluck('a') */
            System.out.println("About to run #31: objArr.pluck('a')");
            Object obtained = runOrCatch(objArr.pluck("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #32
            /* [{}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap());
            /* objArr.pluck() */
            System.out.println("About to run #32: objArr.pluck()");
            Object obtained = runOrCatch(objArr.pluck(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // transform/array.yaml #33
        // wftst = objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])
        System.out.println("Possibly executing: Union wftst = (Union) (objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union(r.array(r.hashMap('a', null))));");
        Union wftst = (Union) (objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(r.array(r.hashMap("a", null))));
                
        {
            // transform/array.yaml #34
            /* ([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}]) */
            List expected_ = r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L), r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L));
            /* wftst.with_fields('a') */
            System.out.println("About to run #34: wftst.withFields('a')");
            Object obtained = runOrCatch(wftst.withFields("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #35
            /* ([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}]) */
            List expected_ = r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"), r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"));
            /* wftst.with_fields('b') */
            System.out.println("About to run #35: wftst.withFields('b')");
            Object obtained = runOrCatch(wftst.withFields("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #36
            /* ([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}]) */
            List expected_ = r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* wftst.with_fields('a', 'b') */
            System.out.println("About to run #36: wftst.withFields('a', 'b')");
            Object obtained = runOrCatch(wftst.withFields("a", "b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #37
            /* [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap());
            /* wftst.with_fields() */
            System.out.println("About to run #37: wftst.withFields()");
            Object obtained = runOrCatch(wftst.withFields(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // transform/array.yaml #38
        // wftst2 = nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))
        System.out.println("Possibly executing: Union wftst2 = (Union) (nestedObjArr.union(objArr.pluck(r.hashMap('b', 'missing'))).union(nestedObjArr.pluck(r.hashMap('b', 'c'))));");
        Union wftst2 = (Union) (nestedObjArr.union(objArr.pluck(r.hashMap("b", "missing"))).union(nestedObjArr.pluck(r.hashMap("b", "c"))));
                
        {
            // transform/array.yaml #39
            /* ([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}]) */
            List expected_ = r.array(r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)), r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)));
            /* wftst2.with_fields({'b':'c'}) */
            System.out.println("About to run #39: wftst2.withFields(r.hashMap('b', 'c'))");
            Object obtained = runOrCatch(wftst2.withFields(r.hashMap("b", "c")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #40
            /* err("ReqlQueryLogicError", "Invalid path argument `1`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid path argument `1`.", r.array());
            /* wftst.with_fields(1) */
            System.out.println("About to run #40: wftst.withFields(1L)");
            Object obtained = runOrCatch(wftst.withFields(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #41
            /* err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", r.array());
            /* r.expr(1).with_fields() */
            System.out.println("About to run #41: r.expr(1L).withFields()");
            Object obtained = runOrCatch(r.expr(1L).withFields(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #42
            /* [{}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap());
            /* objArr.without('a', 'b') */
            System.out.println("About to run #42: objArr.without('a', 'b')");
            Object obtained = runOrCatch(objArr.without("a", "b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #43
            /* [{'b': 'a'}, {'b': 'b'}, {'b': 'c'}] */
            List expected_ = r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"));
            /* objArr.without('a') */
            System.out.println("About to run #43: objArr.without('a')");
            Object obtained = runOrCatch(objArr.without("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #44
            /* [{'b': 'a', 'a': 1}, {'b': 'b', 'a': 2}, {'b': 'c', 'a': 3}] */
            List expected_ = r.array(r.hashMap("b", "a").with("a", 1L), r.hashMap("b", "b").with("a", 2L), r.hashMap("b", "c").with("a", 3L));
            /* objArr.without() */
            System.out.println("About to run #44: objArr.without()");
            Object obtained = runOrCatch(objArr.without(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #45
            /* [2, 3, 4] */
            List expected_ = r.array(2L, 3L, 4L);
            /* arr.map(lambda v: v + 1) */
            System.out.println("About to run #45: arr.map(v -> r.add(v, 1L))");
            Object obtained = runOrCatch(arr.map(v -> r.add(v, 1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #46
            /* 6 */
            Long expected_ = 6L;
            /* arr.reduce(lambda a, b: a + b) */
            System.out.println("About to run #46: arr.reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #47
            /* 6 */
            Long expected_ = 6L;
            /* arr.reduce(lambda a, b:a + b) */
            System.out.println("About to run #47: arr.reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #48
            /* 12 */
            Long expected_ = 12L;
            /* arr.union(arr).reduce(lambda a, b: a + b) */
            System.out.println("About to run #48: arr.union(arr).reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.union(arr).reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #49
            /* 12 */
            Long expected_ = 12L;
            /* arr.union(arr).reduce(lambda a, b:a + b) */
            System.out.println("About to run #49: arr.union(arr).reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.union(arr).reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #49");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #49");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #50
            /* [{'b': 'b', 'a': 2}] */
            List expected_ = r.array(r.hashMap("b", "b").with("a", 2L));
            /* objArr.filter(lambda row: row['b'] == 'b') */
            System.out.println("About to run #50: objArr.filter(row -> row.bracket('b').eq('b'))");
            Object obtained = runOrCatch(objArr.filter(row -> row.bracket("b").eq("b")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #50");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #50");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #51
            /* [1, 2, 1, 2, 1, 2] */
            List expected_ = r.array(1L, 2L, 1L, 2L, 1L, 2L);
            /* arr.concat_map(lambda v: [1,2]) */
            System.out.println("About to run #51: arr.concatMap(v -> r.array(1L, 2L))");
            Object obtained = runOrCatch(arr.concatMap(v -> r.array(1L, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #51");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #51");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #52
            /* [{'v': 1}, {'v2': 2}, {'v': 2}, {'v2': 3}, {'v': 3}, {'v2': 4}] */
            List expected_ = r.array(r.hashMap("v", 1L), r.hashMap("v2", 2L), r.hashMap("v", 2L), r.hashMap("v2", 3L), r.hashMap("v", 3L), r.hashMap("v2", 4L));
            /* arr.concat_map(lambda v: [{'v':v}, {'v2':v + 1}]) */
            System.out.println("About to run #52: arr.concatMap(v -> r.array(r.hashMap('v', v), r.hashMap('v2', r.add(v, 1L))))");
            Object obtained = runOrCatch(arr.concatMap(v -> r.array(r.hashMap("v", v), r.hashMap("v2", r.add(v, 1L)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #52");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #52");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #53
            /* [{'b': 'a', 'a': 1}, {'b': 'b', 'a': 2}, {'b': 'c', 'a': 3}] */
            List expected_ = r.array(r.hashMap("b", "a").with("a", 1L), r.hashMap("b", "b").with("a", 2L), r.hashMap("b", "c").with("a", 3L));
            /* objArr.order_by('b') */
            System.out.println("About to run #53: objArr.orderBy('b')");
            Object obtained = runOrCatch(objArr.orderBy("b"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #53");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #53");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #54
            /* [{'b': 'c', 'a': 3}, {'b': 'b', 'a': 2}, {'b': 'a', 'a': 1}] */
            List expected_ = r.array(r.hashMap("b", "c").with("a", 3L), r.hashMap("b", "b").with("a", 2L), r.hashMap("b", "a").with("a", 1L));
            /* objArr.order_by(r.desc('b')) */
            System.out.println("About to run #54: objArr.orderBy(r.desc('b'))");
            Object obtained = runOrCatch(objArr.orderBy(r.desc("b")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #54");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #54");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #55
            /* [{'-a': 1}, {'-a': 2}] */
            List expected_ = r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L));
            /* r.expr([{'-a':1},{'-a':2}]).order_by('-a') */
            System.out.println("About to run #55: r.expr(r.array(r.hashMap('-a', 1L), r.hashMap('-a', 2L))).orderBy('-a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L))).orderBy("-a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #55");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #55");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #56
            /* [1, 2, 3, 4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,1,2,2,2,3,4]).distinct() */
            System.out.println("About to run #56: r.expr(r.array(1L, 1L, 2L, 2L, 2L, 3L, 4L)).distinct()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 1L, 2L, 2L, 2L, 3L, 4L)).distinct(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #56");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #56");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #57
            /* 3 */
            Long expected_ = 3L;
            /* objArr.count() */
            System.out.println("About to run #57: objArr.count()");
            Object obtained = runOrCatch(objArr.count(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #57");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #57");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #58
            /* [1, 2, 3, {'b': 'a', 'a': 1}, {'b': 'b', 'a': 2}, {'b': 'c', 'a': 3}] */
            List expected_ = r.array(1L, 2L, 3L, r.hashMap("b", "a").with("a", 1L), r.hashMap("b", "b").with("a", 2L), r.hashMap("b", "c").with("a", 3L));
            /* arr.union(objArr) */
            System.out.println("About to run #58: arr.union(objArr)");
            Object obtained = runOrCatch(arr.union(objArr),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #58");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #58");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(59, 1)
            /* 2 */
            Long expected_ = 2L;
            /* arr[1] */
            System.out.println("About to run #(59, 1): arr.bracket(1L)");
            Object obtained = runOrCatch(arr.bracket(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(59, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(59, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(59, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #(59, 2)
            /* 2 */
            Long expected_ = 2L;
            /* arr.nth(1) */
            System.out.println("About to run #(59, 2): arr.nth(1L)");
            Object obtained = runOrCatch(arr.nth(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(59, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(59, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(59, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #60
            /* 1 */
            Long expected_ = 1L;
            /* arr[0] */
            System.out.println("About to run #60: arr.bracket(0L)");
            Object obtained = runOrCatch(arr.bracket(0L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #60");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #60");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #61
            /* True */
            Boolean expected_ = true;
            /* r.expr([]).is_empty() */
            System.out.println("About to run #61: r.expr(r.array()).isEmpty()");
            Object obtained = runOrCatch(r.expr(r.array()).isEmpty(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #61");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #61");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #62
            /* False */
            Boolean expected_ = false;
            /* arr.is_empty() */
            System.out.println("About to run #62: arr.isEmpty()");
            Object obtained = runOrCatch(arr.isEmpty(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #62");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #62");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #63
            /* True */
            Boolean expected_ = true;
            /* arr.contains(2) */
            System.out.println("About to run #63: arr.contains(2L)");
            Object obtained = runOrCatch(arr.contains(2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #63");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #63");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #64
            /* True */
            Boolean expected_ = true;
            /* arr.contains(2, 3) */
            System.out.println("About to run #64: arr.contains(2L, 3L)");
            Object obtained = runOrCatch(arr.contains(2L, 3L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #64");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #64");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #65
            /* False */
            Boolean expected_ = false;
            /* arr.contains(4) */
            System.out.println("About to run #65: arr.contains(4L)");
            Object obtained = runOrCatch(arr.contains(4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #65");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #65");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #66
            /* False */
            Boolean expected_ = false;
            /* arr.contains(2, 4) */
            System.out.println("About to run #66: arr.contains(2L, 4L)");
            Object obtained = runOrCatch(arr.contains(2L, 4L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #66");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #66");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #67
            /* False */
            Boolean expected_ = false;
            /* arr.contains(2, 2) */
            System.out.println("About to run #67: arr.contains(2L, 2L)");
            Object obtained = runOrCatch(arr.contains(2L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #67");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #67");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #68
            /* True */
            Boolean expected_ = true;
            /* arr.union(arr).contains(2, 2) */
            System.out.println("About to run #68: arr.union(arr).contains(2L, 2L)");
            Object obtained = runOrCatch(arr.union(arr).contains(2L, 2L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #68");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #68");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #69
            /* True */
            Boolean expected_ = true;
            /* arr.contains(lambda x:x == 2) */
            System.out.println("About to run #69: arr.contains(x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #69");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #69");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #70
            /* True */
            Boolean expected_ = true;
            /* arr.contains(lambda x:x == 2, lambda x:x==3) */
            System.out.println("About to run #70: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 3L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 3L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #70");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #70");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #71
            /* False */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 4) */
            System.out.println("About to run #71: arr.contains(x -> r.eq(x, 4L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #71");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #71");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #72
            /* False */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 2, lambda x:x==4) */
            System.out.println("About to run #72: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 4L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #72");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #72");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #73
            /* False */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 2, lambda x:x==2) */
            System.out.println("About to run #73: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #73");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #73");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #74
            /* True */
            Boolean expected_ = true;
            /* arr.union(arr).contains(lambda x:x == 2, lambda x:x==2) */
            System.out.println("About to run #74: arr.union(arr).contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.union(arr).contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #74");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #74");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #75
            /* [1, 3] */
            List expected_ = r.array(1L, 3L);
            /* r.expr([{'a':1},{'b':2},{'a':3,'c':4}])['a'] */
            System.out.println("About to run #75: r.expr(r.array(r.hashMap('a', 1L), r.hashMap('b', 2L), r.hashMap('a', 3L).with('c', 4L))).bracket('a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("a", 1L), r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #75");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #75");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #75:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // transform/array.yaml #76
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])['a'] */
            System.out.println("About to run #76: r.expr(r.array(r.hashMap('a', 1L), 'a', r.hashMap('b', 2L), r.hashMap('a', 3L).with('c', 4L))).bracket('a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("a", 1L), "a", r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #76");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #76");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
