// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class TimesTimeArith {
    Logger logger = LoggerFactory.getLogger(TimesTimeArith.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        // times/time_arith.yaml #1
        // rt1 = 1375147296.681
        System.out.println("Possibly executing: Double rt1 = (Double) (1375147296.681);");
        Double rt1 = (Double) (1375147296.681);
                
        // times/time_arith.yaml #2
        // rt2 = 1375147296.682
        System.out.println("Possibly executing: Double rt2 = (Double) (1375147296.682);");
        Double rt2 = (Double) (1375147296.682);
                
        // times/time_arith.yaml #3
        // rt3 = 1375147297.681
        System.out.println("Possibly executing: Double rt3 = (Double) (1375147297.681);");
        Double rt3 = (Double) (1375147297.681);
                
        // times/time_arith.yaml #4
        // rt4 = 2375147296.681
        System.out.println("Possibly executing: Double rt4 = (Double) (2375147296.681);");
        Double rt4 = (Double) (2375147296.681);
                
        // times/time_arith.yaml #5
        // rts = [rt1, rt2, rt3, rt4]
        System.out.println("Possibly executing: List rts = (List) (r.array(rt1, rt2, rt3, rt4));");
        List rts = (List) (r.array(rt1, rt2, rt3, rt4));
                
        // times/time_arith.yaml #6
        // t1 = r.epoch_time(rt1)
        System.out.println("Possibly executing: EpochTime t1 = (EpochTime) (r.epochTime(rt1));");
        EpochTime t1 = (EpochTime) (r.epochTime(rt1));
                
        // times/time_arith.yaml #7
        // t2 = r.epoch_time(rt2)
        System.out.println("Possibly executing: EpochTime t2 = (EpochTime) (r.epochTime(rt2));");
        EpochTime t2 = (EpochTime) (r.epochTime(rt2));
                
        // times/time_arith.yaml #8
        // t3 = r.epoch_time(rt3)
        System.out.println("Possibly executing: EpochTime t3 = (EpochTime) (r.epochTime(rt3));");
        EpochTime t3 = (EpochTime) (r.epochTime(rt3));
                
        // times/time_arith.yaml #9
        // t4 = r.epoch_time(rt4)
        System.out.println("Possibly executing: EpochTime t4 = (EpochTime) (r.epochTime(rt4));");
        EpochTime t4 = (EpochTime) (r.epochTime(rt4));
                
        // times/time_arith.yaml #10
        // ts = r.expr([t1, t2, t3, t4])
        System.out.println("Possibly executing: MakeArray ts = (MakeArray) (r.expr(r.array(t1, t2, t3, t4)));");
        MakeArray ts = (MakeArray) (r.expr(r.array(t1, t2, t3, t4)));
                
        {
            // times/time_arith.yaml #11
            /* True */
            Boolean expected_ = true;
            /* ((t2 - t1) * 1000).do(lambda x:(x > 0.99) & (x < 1.01)) */
            System.out.println("About to run #11: r.sub(t2, t1).mul(1000L).do_(x -> r.gt(x, 0.99).and(r.lt(x, 1.01)))");
            Object obtained = runOrCatch(r.sub(t2, t1).mul(1000L).do_(x -> r.gt(x, 0.99).and(r.lt(x, 1.01))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #12
            /* 1 */
            Long expected_ = 1L;
            /* t3 - t1 */
            System.out.println("About to run #12: r.sub(t3, t1)");
            Object obtained = runOrCatch(r.sub(t3, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #13
            /* 1000000000 */
            Long expected_ = 1000000000L;
            /* t4 - t1 */
            System.out.println("About to run #13: r.sub(t4, t1)");
            Object obtained = runOrCatch(r.sub(t4, t1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #14
            /* True */
            Boolean expected_ = true;
            /* ((t1 - t2) * 1000).do(lambda x:(x < -0.99) & (x > -1.01)) */
            System.out.println("About to run #14: r.sub(t1, t2).mul(1000L).do_(x -> r.lt(x, -0.99).and(r.gt(x, -1.01)))");
            Object obtained = runOrCatch(r.sub(t1, t2).mul(1000L).do_(x -> r.lt(x, -0.99).and(r.gt(x, -1.01))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #15
            /* -1 */
            Long expected_ = -1L;
            /* t1 - t3 */
            System.out.println("About to run #15: r.sub(t1, t3)");
            Object obtained = runOrCatch(r.sub(t1, t3),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #16
            /* -1000000000 */
            Long expected_ = -1000000000L;
            /* t1 - t4 */
            System.out.println("About to run #16: r.sub(t1, t4)");
            Object obtained = runOrCatch(r.sub(t1, t4),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #17
            /* ([rt1, rt2, rt3, rt4]) */
            List expected_ = r.array(rt1, rt2, rt3, rt4);
            /* ts.map(lambda x:t1 + (x - t1)).map(lambda x:x.to_epoch_time()) */
            System.out.println("About to run #17: ts.map(x -> r.add(t1, r.sub(x, t1))).map(x -> x.toEpochTime())");
            Object obtained = runOrCatch(ts.map(x -> r.add(t1, r.sub(x, t1))).map(x -> x.toEpochTime()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #18
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found PTYPE<TIME>.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found PTYPE<TIME>.", r.array());
            /* ts.map(lambda x:(t1 + x) - t1).map(lambda x:x.to_epoch_time()) */
            System.out.println("About to run #18: ts.map(x -> r.add(t1, x).sub(t1)).map(x -> x.toEpochTime())");
            Object obtained = runOrCatch(ts.map(x -> r.add(t1, x).sub(t1)).map(x -> x.toEpochTime()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #19
            /* ([rt1, rt2, rt3, rt4]) */
            List expected_ = r.array(rt1, rt2, rt3, rt4);
            /* ts.map(lambda x:t1 - (t1 - x)).map(lambda x:x.to_epoch_time()) */
            System.out.println("About to run #19: ts.map(x -> r.sub(t1, r.sub(t1, x))).map(x -> x.toEpochTime())");
            Object obtained = runOrCatch(ts.map(x -> r.sub(t1, r.sub(t1, x))).map(x -> x.toEpochTime()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #20
            /* ([[[false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, true,  true,  false, true,  false]]]) */
            List expected_ = r.array(r.array(r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false)));
            /* ts.map(lambda x:ts.map(lambda y:[x < y, x <= y, x == y, x != y, x >= y, x > y])) */
            System.out.println("About to run #20: ts.map(x -> ts.map(y -> r.array(r.lt(x, y), r.le(x, y), r.eq(x, y), r.ne(x, y), r.ge(x, y), r.gt(x, y))))");
            Object obtained = runOrCatch(ts.map(x -> ts.map(y -> r.array(r.lt(x, y), r.le(x, y), r.eq(x, y), r.ne(x, y), r.ge(x, y), r.gt(x, y)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // times/time_arith.yaml #21
        // datum_types = r.expr([null, true, false, 1, "1", [1], {"1":1}, r.binary(b'')])
        System.out.println("Possibly executing: MakeArray datum_types = (MakeArray) (r.expr(r.array(null, true, false, 1L, '1', r.array(1L), r.hashMap('1', 1L), r.binary(new byte[]{}))));");
        MakeArray datum_types = (MakeArray) (r.expr(r.array(null, true, false, 1L, "1", r.array(1L), r.hashMap("1", 1L), r.binary(new byte[]{}))));
                
        {
            // times/time_arith.yaml #22
            /* ([[[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[false, false, false, true,  true,  true], [true,  true,  false, true,  false, false]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]]]) */
            List expected_ = r.array(r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(false, false, false, true, true, true), r.array(true, true, false, true, false, false)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)));
            /* datum_types.map(lambda x:r.expr([[x, t1], [t1, x]]).map(lambda xy:xy[0].do(lambda x2:xy[1].do(lambda y:[x2 < y, x2 <= y, x2 == y, x2 != y, x2 >= y, x2 > y])))) */
            System.out.println("About to run #22: datum_types.map(x -> r.expr(r.array(r.array(x, t1), r.array(t1, x))).map(xy -> xy.bracket(0L).do_(x2 -> xy.bracket(1L).do_(y -> r.array(r.lt(x2, y), r.le(x2, y), r.eq(x2, y), r.ne(x2, y), r.ge(x2, y), r.gt(x2, y))))))");
            Object obtained = runOrCatch(datum_types.map(x -> r.expr(r.array(r.array(x, t1), r.array(t1, x))).map(xy -> xy.bracket(0L).do_(x2 -> xy.bracket(1L).do_(y -> r.array(r.lt(x2, y), r.le(x2, y), r.eq(x2, y), r.ne(x2, y), r.ge(x2, y), r.gt(x2, y)))))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #23
            /* ([[[false, true,  true,  true], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]]) */
            List expected_ = r.array(r.array(r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)));
            /* ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c)))) */
            System.out.println("About to run #23: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c))))");
            Object obtained = runOrCatch(ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #24
            /* ([[[false, false, false, false], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]]) */
            List expected_ = r.array(r.array(r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)));
            /* ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, left_bound='open')))) */
            System.out.println("About to run #24: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg('left_bound', 'open'))))");
            Object obtained = runOrCatch(ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("left_bound", "open")))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #25
            /* ([[[true,  true,  true,  true], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, true]]]) */
            List expected_ = r.array(r.array(r.array(true, true, true, true), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true)));
            /* ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, right_bound='closed')))) */
            System.out.println("About to run #25: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg('right_bound', 'closed'))))");
            Object obtained = runOrCatch(ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("right_bound", "closed")))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #26
            /* ([[[false, false, false, false], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]]) */
            List expected_ = r.array(r.array(r.array(false, false, false, false), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)));
            /* ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, left_bound='open', right_bound='closed')))) */
            System.out.println("About to run #26: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg('left_bound', 'open').optArg('right_bound', 'closed'))))");
            Object obtained = runOrCatch(ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("left_bound", "open").optArg("right_bound", "closed")))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #27
            /* rts */
            List expected_ = rts;
            /* ts.map(lambda x:x.date() + x.time_of_day()).map(lambda x:x.to_epoch_time()) */
            System.out.println("About to run #27: ts.map(x -> x.date().add(x.timeOfDay())).map(x -> x.toEpochTime())");
            Object obtained = runOrCatch(ts.map(x -> x.date().add(x.timeOfDay())).map(x -> x.toEpochTime()),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #28
            /* rt1 */
            Double expected_ = rt1;
            /* r.epoch_time(rt1).do(r.js("(function(data){return data})")).to_epoch_time() */
            System.out.println("About to run #28: r.epochTime(rt1).do_(r.js('(function(data){return data})')).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(rt1).do_(r.js("(function(data){return data})")).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #29
            /* ("2012-08-01T00:00:00+00:00") */
            String expected_ = "2012-08-01T00:00:00+00:00";
            /* r.do(r.js("new Date('2012-08-01')")).to_iso8601() */
            System.out.println("About to run #29: r.do_(r.js('new Date('2012-08-01')')).toIso8601()");
            Object obtained = runOrCatch(r.do_(r.js("new Date('2012-08-01')")).toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // times/time_arith.yaml #30
            /* ("2012-08-01T00:00:00+00:00") */
            String expected_ = "2012-08-01T00:00:00+00:00";
            /* r.do(r.js("(function(x){doc = new Object(); doc.date = new Date('2012-08-01'); return doc;})"))["date"].to_iso8601() */
            System.out.println("About to run #30: r.do_(r.js('(function(x){doc = new Object(); doc.date = new Date('2012-08-01'); return doc;})')).bracket('date').toIso8601()");
            Object obtained = runOrCatch(r.do_(r.js("(function(x){doc = new Object(); doc.date = new Date('2012-08-01'); return doc;})")).bracket("date").toIso8601(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
