// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MathLogicFloorCeilRound {
    Logger logger = LoggerFactory.getLogger(MathLogicFloorCeilRound.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // math_logic/floor_ceil_round.yaml #1
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.floor(1.0).type_of() */
            System.out.println("About to run #1: r.floor(1.0).typeOf()");
            Object obtained = runOrCatch(r.floor(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #2
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.0) */
            System.out.println("About to run #2: r.floor(1.0)");
            Object obtained = runOrCatch(r.floor(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #3
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).floor() */
            System.out.println("About to run #3: r.expr(1.0).floor()");
            Object obtained = runOrCatch(r.expr(1.0).floor(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #4
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.floor(0.5) */
            System.out.println("About to run #4: r.floor(0.5)");
            Object obtained = runOrCatch(r.floor(0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #5
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.0) */
            System.out.println("About to run #5: r.floor(1.0)");
            Object obtained = runOrCatch(r.floor(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #6
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.5) */
            System.out.println("About to run #6: r.floor(1.5)");
            Object obtained = runOrCatch(r.floor(1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #7
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.floor(-0.5) */
            System.out.println("About to run #7: r.floor(-0.5)");
            Object obtained = runOrCatch(r.floor(-0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #8
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.floor(-1.0) */
            System.out.println("About to run #8: r.floor(-1.0)");
            Object obtained = runOrCatch(r.floor(-1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #9
            /* -2.0 */
            Double expected_ = -2.0;
            /* r.floor(-1.5) */
            System.out.println("About to run #9: r.floor(-1.5)");
            Object obtained = runOrCatch(r.floor(-1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #10
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').floor() */
            System.out.println("About to run #10: r.expr('X').floor()");
            Object obtained = runOrCatch(r.expr("X").floor(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #11
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.ceil(1.0).type_of() */
            System.out.println("About to run #11: r.ceil(1.0).typeOf()");
            Object obtained = runOrCatch(r.ceil(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #12
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(1.0) */
            System.out.println("About to run #12: r.ceil(1.0)");
            Object obtained = runOrCatch(r.ceil(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #13
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).ceil() */
            System.out.println("About to run #13: r.expr(1.0).ceil()");
            Object obtained = runOrCatch(r.expr(1.0).ceil(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #14
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(0.5) */
            System.out.println("About to run #14: r.ceil(0.5)");
            Object obtained = runOrCatch(r.ceil(0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #15
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(1.0) */
            System.out.println("About to run #15: r.ceil(1.0)");
            Object obtained = runOrCatch(r.ceil(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #16
            /* 2.0 */
            Double expected_ = 2.0;
            /* r.ceil(1.5) */
            System.out.println("About to run #16: r.ceil(1.5)");
            Object obtained = runOrCatch(r.ceil(1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #17
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.ceil(-0.5) */
            System.out.println("About to run #17: r.ceil(-0.5)");
            Object obtained = runOrCatch(r.ceil(-0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #18
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.ceil(-1.0) */
            System.out.println("About to run #18: r.ceil(-1.0)");
            Object obtained = runOrCatch(r.ceil(-1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #19
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.ceil(-1.5) */
            System.out.println("About to run #19: r.ceil(-1.5)");
            Object obtained = runOrCatch(r.ceil(-1.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #20
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').ceil() */
            System.out.println("About to run #20: r.expr('X').ceil()");
            Object obtained = runOrCatch(r.expr("X").ceil(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #21
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.round(1.0).type_of() */
            System.out.println("About to run #21: r.round(1.0).typeOf()");
            Object obtained = runOrCatch(r.round(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #22
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.0) */
            System.out.println("About to run #22: r.round(1.0)");
            Object obtained = runOrCatch(r.round(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #23
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).round() */
            System.out.println("About to run #23: r.expr(1.0).round()");
            Object obtained = runOrCatch(r.expr(1.0).round(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #24
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(0.5) */
            System.out.println("About to run #24: r.round(0.5)");
            Object obtained = runOrCatch(r.round(0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #25
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-0.5) */
            System.out.println("About to run #25: r.round(-0.5)");
            Object obtained = runOrCatch(r.round(-0.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #26
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.round(0.0) */
            System.out.println("About to run #26: r.round(0.0)");
            Object obtained = runOrCatch(r.round(0.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #27
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.0) */
            System.out.println("About to run #27: r.round(1.0)");
            Object obtained = runOrCatch(r.round(1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #28
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(10.0) */
            System.out.println("About to run #28: r.round(10.0)");
            Object obtained = runOrCatch(r.round(10.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #29
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(1000000000.0) */
            System.out.println("About to run #29: r.round(1000000000.0)");
            Object obtained = runOrCatch(r.round(1000000000.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #30
            /* 1e20 */
            Double expected_ = 1e+20;
            /* r.round(1e20) */
            System.out.println("About to run #30: r.round(1e+20)");
            Object obtained = runOrCatch(r.round(1e+20),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #31
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-1.0) */
            System.out.println("About to run #31: r.round(-1.0)");
            Object obtained = runOrCatch(r.round(-1.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #32
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-10.0) */
            System.out.println("About to run #32: r.round(-10.0)");
            Object obtained = runOrCatch(r.round(-10.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #33
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-1000000000.0) */
            System.out.println("About to run #33: r.round(-1000000000.0)");
            Object obtained = runOrCatch(r.round(-1000000000.0),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #34
            /* -1e20 */
            Double expected_ = -1e+20;
            /* r.round(-1e20) */
            System.out.println("About to run #34: r.round(-1e+20)");
            Object obtained = runOrCatch(r.round(-1e+20),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #34");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #34");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #35
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.round(0.1) */
            System.out.println("About to run #35: r.round(0.1)");
            Object obtained = runOrCatch(r.round(0.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #35");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #35");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #36
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.1) */
            System.out.println("About to run #36: r.round(1.1)");
            Object obtained = runOrCatch(r.round(1.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #36");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #36");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #37
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(10.1) */
            System.out.println("About to run #37: r.round(10.1)");
            Object obtained = runOrCatch(r.round(10.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #37");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #37");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #38
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(1000000000.1) */
            System.out.println("About to run #38: r.round(1000000000.1)");
            Object obtained = runOrCatch(r.round(1000000000.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #38");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #38");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #39
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-1.1) */
            System.out.println("About to run #39: r.round(-1.1)");
            Object obtained = runOrCatch(r.round(-1.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #39");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #39");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #40
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-10.1) */
            System.out.println("About to run #40: r.round(-10.1)");
            Object obtained = runOrCatch(r.round(-10.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #40");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #40");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #41
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-1000000000.1) */
            System.out.println("About to run #41: r.round(-1000000000.1)");
            Object obtained = runOrCatch(r.round(-1000000000.1),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #41");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #41");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #42
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(0.9) */
            System.out.println("About to run #42: r.round(0.9)");
            Object obtained = runOrCatch(r.round(0.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #42");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #42");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #43
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(9.9) */
            System.out.println("About to run #43: r.round(9.9)");
            Object obtained = runOrCatch(r.round(9.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #43");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #43");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #44
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(999999999.9) */
            System.out.println("About to run #44: r.round(999999999.9)");
            Object obtained = runOrCatch(r.round(999999999.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #44");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #44");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #45
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-0.9) */
            System.out.println("About to run #45: r.round(-0.9)");
            Object obtained = runOrCatch(r.round(-0.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #45");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #45");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #46
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-9.9) */
            System.out.println("About to run #46: r.round(-9.9)");
            Object obtained = runOrCatch(r.round(-9.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #46");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #46");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #47
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-999999999.9) */
            System.out.println("About to run #47: r.round(-999999999.9)");
            Object obtained = runOrCatch(r.round(-999999999.9),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #47");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #47");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/floor_ceil_round.yaml #48
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').round() */
            System.out.println("About to run #48: r.expr('X').round()");
            Object obtained = runOrCatch(r.expr("X").round(),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #48");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #48");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
