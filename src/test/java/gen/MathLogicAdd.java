// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class MathLogicAdd {
    Logger logger = LoggerFactory.getLogger(MathLogicAdd.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // math_logic/add.yaml #(1, 1)
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(1) + 1) */
            System.out.println("About to run #(1, 1): r.expr(1L).add(1L)");
            Object obtained = runOrCatch(r.expr(1L).add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 1)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 1)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 1):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #(1, 2)
            /* 2 */
            Long expected_ = 2L;
            /* (1 + r.expr(1)) */
            System.out.println("About to run #(1, 2): r.add(1L, r.expr(1L))");
            Object obtained = runOrCatch(r.add(1L, r.expr(1L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 2)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 2)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 2):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #(1, 3)
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(1).add(1)) */
            System.out.println("About to run #(1, 3): r.expr(1L).add(1L)");
            Object obtained = runOrCatch(r.expr(1L).add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #(1, 3)");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #(1, 3)");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #(1, 3):" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #2
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(-1) + 1 */
            System.out.println("About to run #2: r.expr(-1L).add(1L)");
            Object obtained = runOrCatch(r.expr(-1L).add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #3
            /* 10.25 */
            Double expected_ = 10.25;
            /* r.expr(1.75) + 8.5 */
            System.out.println("About to run #3: r.expr(1.75).add(8.5)");
            Object obtained = runOrCatch(r.expr(1.75).add(8.5),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #4
            /* '' */
            String expected_ = "";
            /* r.expr('') + '' */
            System.out.println("About to run #4: r.expr('').add('')");
            Object obtained = runOrCatch(r.expr("").add(""),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #5
            /* 'abcdef' */
            String expected_ = "abcdef";
            /* r.expr('abc') + 'def' */
            System.out.println("About to run #5: r.expr('abc').add('def')");
            Object obtained = runOrCatch(r.expr("abc").add("def"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #6
            /* [1, 2, 3, 4, 5, 6, 7, 8] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L);
            /* r.expr([1,2]) + [3] + [4,5] + [6,7,8] */
            System.out.println("About to run #6: r.expr(r.array(1L, 2L)).add(r.array(3L)).add(r.array(4L, 5L)).add(r.array(6L, 7L, 8L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).add(r.array(3L)).add(r.array(4L, 5L)).add(r.array(6L, 7L, 8L)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #9
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [1]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(1L));
            /* r.expr(1) + 'a' */
            System.out.println("About to run #9: r.expr(1L).add('a')");
            Object obtained = runOrCatch(r.expr(1L).add("a"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #10
            /* err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [1]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array(1L));
            /* r.expr('a') + 1 */
            System.out.println("About to run #10: r.expr('a').add(1L)");
            Object obtained = runOrCatch(r.expr("a").add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // math_logic/add.yaml #11
            /* err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", [1]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", r.array(1L));
            /* r.expr([]) + 1 */
            System.out.println("About to run #11: r.expr(r.array()).add(1L)");
            Object obtained = runOrCatch(r.expr(r.array()).add(1L),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
