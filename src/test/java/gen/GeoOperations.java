// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../templates/Test.java
package gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static gen.TestingCommon.*;
import gen.TestingFramework;

public class GeoOperations {
    Logger logger = LoggerFactory.getLogger(GeoOperations.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection<?> conn;
    public String hostname = TestingFramework.getConfig().getHostName();
    public int port = TestingFramework.getConfig().getPort();

    @Before
    public void setUp() throws Exception {
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("Tearing down.");
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        r.db("rethinkdb").table("_debug_scratch").delete();
        conn.close(false);
    }

    // Autogenerated tests below

        @Test(timeout=120000)
    public void test() throws Exception {
                
        {
            // geo/operations.yaml #1
            /* ("89011.26253835332") */
            String expected_ = "89011.26253835332";
            /* r.distance(r.point(-122, 37), r.point(-123, 37)).coerce_to('STRING') */
            System.out.println("About to run #1: r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #1");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #1");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #1:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #2
            /* ("110968.30443995494") */
            String expected_ = "110968.30443995494";
            /* r.distance(r.point(-122, 37), r.point(-122, 36)).coerce_to('STRING') */
            System.out.println("About to run #2: r.distance(r.point(-122L, 37L), r.point(-122L, 36L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(-122L, 37L), r.point(-122L, 36L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #2");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #2");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #2:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #3
            /* True */
            Boolean expected_ = true;
            /* r.distance(r.point(-122, 37), r.point(-122, 36)).eq(r.distance(r.point(-122, 36), r.point(-122, 37))) */
            System.out.println("About to run #3: r.distance(r.point(-122L, 37L), r.point(-122L, 36L)).eq(r.distance(r.point(-122L, 36L), r.point(-122L, 37L)))");
            Object obtained = runOrCatch(r.distance(r.point(-122L, 37L), r.point(-122L, 36L)).eq(r.distance(r.point(-122L, 36L), r.point(-122L, 37L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #3");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #3");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #4
            /* ("89011.26253835332") */
            String expected_ = "89011.26253835332";
            /* r.point(-122, 37).distance(r.point(-123, 37)).coerce_to('STRING') */
            System.out.println("About to run #4: r.point(-122L, 37L).distance(r.point(-123L, 37L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.point(-122L, 37L).distance(r.point(-123L, 37L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #4");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #4");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        // geo/operations.yaml #5
        // someDist = r.distance(r.point(-122, 37), r.point(-123, 37))
        System.out.println("Possibly executing: Distance someDist = (Distance) (r.distance(r.point(-122L, 37L), r.point(-123L, 37L)));");
        Distance someDist = (Distance) (r.distance(r.point(-122L, 37L), r.point(-123L, 37L)));
                
        {
            // geo/operations.yaml #5
            /* True */
            Boolean expected_ = true;
            /* someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='m')) */
            System.out.println("About to run #5: someDist.eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('unit', 'm'))");
            Object obtained = runOrCatch(someDist.eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("unit", "m")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #5");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #5");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #6
            /* True */
            Boolean expected_ = true;
            /* someDist.mul(1.0/1000.0).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='km')) */
            System.out.println("About to run #6: someDist.mul(r.div(1.0, 1000.0)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('unit', 'km'))");
            Object obtained = runOrCatch(someDist.mul(r.div(1.0, 1000.0)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("unit", "km")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #6");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #6");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #7
            /* True */
            Boolean expected_ = true;
            /* someDist.mul(1.0/1609.344).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='mi')) */
            System.out.println("About to run #7: someDist.mul(r.div(1.0, 1609.344)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('unit', 'mi'))");
            Object obtained = runOrCatch(someDist.mul(r.div(1.0, 1609.344)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("unit", "mi")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #7");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #7");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #8
            /* True */
            Boolean expected_ = true;
            /* someDist.mul(1.0/0.3048).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='ft')) */
            System.out.println("About to run #8: someDist.mul(r.div(1.0, 0.3048)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('unit', 'ft'))");
            Object obtained = runOrCatch(someDist.mul(r.div(1.0, 0.3048)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("unit", "ft")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #8");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #8");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #9
            /* True */
            Boolean expected_ = true;
            /* someDist.mul(1.0/1852.0).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='nm')) */
            System.out.println("About to run #9: someDist.mul(r.div(1.0, 1852.0)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('unit', 'nm'))");
            Object obtained = runOrCatch(someDist.mul(r.div(1.0, 1852.0)).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("unit", "nm")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #9");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #9");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #10
            /* True */
            Boolean expected_ = true;
            /* someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37), geo_system='WGS84')) */
            System.out.println("About to run #10: someDist.eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('geo_system', 'WGS84'))");
            Object obtained = runOrCatch(someDist.eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("geo_system", "WGS84")),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #10");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #10");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #11
            /* True */
            Boolean expected_ = true;
            /* someDist.div(10).eq(r.distance(r.point(-122, 37), r.point(-123, 37), geo_system={'a':637813.7, 'f':(1.0/298.257223563)})) */
            System.out.println("About to run #11: someDist.div(10L).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('geo_system', r.hashMap('a', 637813.7).with('f', r.div(1.0, 298.257223563))))");
            Object obtained = runOrCatch(someDist.div(10L).eq(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("geo_system", r.hashMap("a", 637813.7).with("f", r.div(1.0, 298.257223563)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #11");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #11");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #12
            /* ("0.01393875509649327") */
            String expected_ = "0.01393875509649327";
            /* r.distance(r.point(-122, 37), r.point(-123, 37), geo_system='unit_sphere').coerce_to('STRING') */
            System.out.println("About to run #12: r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg('geo_system', 'unit_sphere').coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(-122L, 37L), r.point(-123L, 37L)).optArg("geo_system", "unit_sphere").coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #12");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #12");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #13
            /* ("0") */
            String expected_ = "0";
            /* r.distance(r.point(0, 0), r.point(0, 0)).coerce_to('STRING') */
            System.out.println("About to run #13: r.distance(r.point(0L, 0L), r.point(0L, 0L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.point(0L, 0L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #13");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #13");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #14
            /* ("40007862.917250897") */
            String expected_ = "40007862.917250897";
            /* r.distance(r.point(0, 0), r.point(180, 0)).mul(2).coerce_to('STRING') */
            System.out.println("About to run #14: r.distance(r.point(0L, 0L), r.point(180L, 0L)).mul(2L).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.point(180L, 0L)).mul(2L).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #14");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #14");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #15
            /* ("40007862.917250897") */
            String expected_ = "40007862.917250897";
            /* r.distance(r.point(0, -90), r.point(0, 90)).mul(2).coerce_to('STRING') */
            System.out.println("About to run #15: r.distance(r.point(0L, -90L), r.point(0L, 90L)).mul(2L).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, -90L), r.point(0L, 90L)).mul(2L).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #15");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #15");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #16
            /* ("0") */
            String expected_ = "0";
            /* r.distance(r.point(0, 0), r.line([0,0], [0,1])).coerce_to('STRING') */
            System.out.println("About to run #16: r.distance(r.point(0L, 0L), r.line(r.array(0L, 0L), r.array(0L, 1L))).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.line(r.array(0L, 0L), r.array(0L, 1L))).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #16");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #16");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #17
            /* ("0") */
            String expected_ = "0";
            /* r.distance(r.line([0,0], [0,1]), r.point(0, 0)).coerce_to('STRING') */
            System.out.println("About to run #17: r.distance(r.line(r.array(0L, 0L), r.array(0L, 1L)), r.point(0L, 0L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.line(r.array(0L, 0L), r.array(0L, 1L)), r.point(0L, 0L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #17");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #17");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #18
            /* True */
            Boolean expected_ = true;
            /* r.distance(r.point(0, 0), r.line([0.1,0], [1,0])).eq(r.distance(r.point(0, 0), r.point(0.1, 0))) */
            System.out.println("About to run #18: r.distance(r.point(0L, 0L), r.line(r.array(0.1, 0L), r.array(1L, 0L))).eq(r.distance(r.point(0L, 0L), r.point(0.1, 0L)))");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.line(r.array(0.1, 0L), r.array(1L, 0L))).eq(r.distance(r.point(0L, 0L), r.point(0.1, 0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #18");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #18");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #19
            /* ("492471.4990055255") */
            String expected_ = "492471.4990055255";
            /* r.distance(r.point(0, 0), r.line([5,-1], [4,2])).coerce_to('STRING') */
            System.out.println("About to run #19: r.distance(r.point(0L, 0L), r.line(r.array(5L, -1L), r.array(4L, 2L))).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.line(r.array(5L, -1L), r.array(4L, 2L))).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #19");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #19");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #20
            /* ("492471.4990055255") */
            String expected_ = "492471.4990055255";
            /* r.distance(r.point(0, 0), r.polygon([5,-1], [4,2], [10,10])).coerce_to('STRING') */
            System.out.println("About to run #20: r.distance(r.point(0L, 0L), r.polygon(r.array(5L, -1L), r.array(4L, 2L), r.array(10L, 10L))).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.polygon(r.array(5L, -1L), r.array(4L, 2L), r.array(10L, 10L))).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #20");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #20");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #21
            /* ("0") */
            String expected_ = "0";
            /* r.distance(r.point(0, 0), r.polygon([0,-1], [0,1], [10,10])).coerce_to('STRING') */
            System.out.println("About to run #21: r.distance(r.point(0L, 0L), r.polygon(r.array(0L, -1L), r.array(0L, 1L), r.array(10L, 10L))).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0L, 0L), r.polygon(r.array(0L, -1L), r.array(0L, 1L), r.array(10L, 10L))).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #21");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #21");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #22
            /* ("0") */
            String expected_ = "0";
            /* r.distance(r.point(0.5, 0.5), r.polygon([0,-1], [0,1], [10,10])).coerce_to('STRING') */
            System.out.println("About to run #22: r.distance(r.point(0.5, 0.5), r.polygon(r.array(0L, -1L), r.array(0L, 1L), r.array(10L, 10L))).coerceTo('STRING')");
            Object obtained = runOrCatch(r.distance(r.point(0.5, 0.5), r.polygon(r.array(0L, -1L), r.array(0L, 1L), r.array(10L, 10L))).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #22");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #22");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #23
            /* False */
            Boolean expected_ = false;
            /* r.circle([0,0], 1, fill=false).eq(r.circle([0,0], 1, fill=true)) */
            System.out.println("About to run #23: r.circle(r.array(0L, 0L), 1L).optArg('fill', false).eq(r.circle(r.array(0L, 0L), 1L).optArg('fill', true))");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 1L).optArg("fill", false).eq(r.circle(r.array(0L, 0L), 1L).optArg("fill", true)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #23");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #23");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #24
            /* True */
            Boolean expected_ = true;
            /* r.circle([0,0], 1, fill=false).fill().eq(r.circle([0,0], 1, fill=true)) */
            System.out.println("About to run #24: r.circle(r.array(0L, 0L), 1L).optArg('fill', false).fill().eq(r.circle(r.array(0L, 0L), 1L).optArg('fill', true))");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 1L).optArg("fill", false).fill().eq(r.circle(r.array(0L, 0L), 1L).optArg("fill", true)),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #24");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #24");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #25
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0.1,0.1],[0.9,0.1],[0.9,0.9],[0.1,0.9],[0.1,0.1]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L), r.array(0L, 0L)), r.array(r.array(0.1, 0.1), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9), r.array(0.1, 0.1)))).with("type", "Polygon");
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,0.1], [0.9,0.1], [0.9,0.9], [0.1,0.9])) */
            System.out.println("About to run #25: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, 0.1), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, 0.1), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #25");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #25");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #26
            /* err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,0.9], [0.9,0.0], [0.9,0.9], [0.1,0.9])) */
            System.out.println("About to run #26: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, 0.9), r.array(0.9, 0.0), r.array(0.9, 0.9), r.array(0.1, 0.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, 0.9), r.array(0.9, 0.0), r.array(0.9, 0.9), r.array(0.1, 0.9))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #26");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #26");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #27
            /* err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0], [2,0], [2,2], [0,2])) */
            System.out.println("About to run #27: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(2L, 0L), r.array(2L, 2L), r.array(0L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(2L, 0L), r.array(2L, 2L), r.array(0L, 2L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #27");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #27");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #28
            /* err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,-2], [1,-2], [-1,1], [0,-1])) */
            System.out.println("About to run #28: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, -2L), r.array(1L, -2L), r.array(-1L, 1L), r.array(0L, -1L)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, -2L), r.array(1L, -2L), r.array(-1L, 1L), r.array(0L, -1L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #28");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #28");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #29
            /* err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,-1], [1,-1], [1,0], [0,0])) */
            System.out.println("About to run #29: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, -1L), r.array(1L, -1L), r.array(1L, 0L), r.array(0L, 0L)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, -1L), r.array(1L, -1L), r.array(1L, 0L), r.array(0L, 0L))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #29");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #29");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #30
            /* err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,-1], [0.9,-1], [0.9,0.5], [0.1,0.5])) */
            System.out.println("About to run #30: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, -1L), r.array(0.9, -1L), r.array(0.9, 0.5), r.array(0.1, 0.5)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0.1, -1L), r.array(0.9, -1L), r.array(0.9, 0.5), r.array(0.1, 0.5))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #30");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #30");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #31
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1],[0,0]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L), r.array(0L, 0L)), r.array(r.array(0L, 0L), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1), r.array(0L, 0L)))).with("type", "Polygon");
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1])) */
            System.out.println("About to run #31: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #31");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #31");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #32
            /* err('ReqlQueryLogicError', 'Expected a Polygon with only an outer shell.  This one has holes.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected a Polygon with only an outer shell.  This one has holes.", r.array(0L));
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1]).polygon_sub(r.polygon([0.2,0.2],[0.5,0.8],[0.8,0.2]))) */
            System.out.println("About to run #32: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1)).polygonSub(r.polygon(r.array(0.2, 0.2), r.array(0.5, 0.8), r.array(0.8, 0.2))))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.polygon(r.array(0L, 0L), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1)).polygonSub(r.polygon(r.array(0.2, 0.2), r.array(0.5, 0.8), r.array(0.8, 0.2)))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #32");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #32");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #32:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
        
        {
            // geo/operations.yaml #33
            /* err('ReqlQueryLogicError', 'Expected a Polygon but found a LineString.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected a Polygon but found a LineString.", r.array());
            /* r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.line([0,0],[0.9,0.1],[0.9,0.9],[0.1,0.9])) */
            System.out.println("About to run #33: r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.line(r.array(0L, 0L), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L)).polygonSub(r.line(r.array(0L, 0L), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9))),
                                          new OptArgs()
                                          ,conn);
            System.out.println("Finished running #33");
            try {
                assertEquals(expected_, obtained);
            System.out.println("Finished asserting #33");
            } catch (Throwable ae) {
                System.out.println("Whoops, got exception on #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
